name: sls deploy action
description: Reusable sls deploy

inputs:
  environment-name:
    description: 'The environment name'
    required: true
  app:
    description: 'The application - crn-server or gp2-server'
    required: true
  aws-access-key-id:
    description: 'AWS Access Key ID'
    required: true
  aws-secret-access-key:
    description: 'AWS Secret Access Key'
    required: true
  lightstep-token:
    description: 'Lightstep Token'
    required: true
  crn-contentful-env:
    description: 'CRN Contentful Environment'
    required: false
  crn-contentful-access-token:
    description: 'CRN Contentful Access Token'
    required: false
  crn-contentful-management-access-token:
    description: 'CRN Contentful Management Access Token'
    required: false
  crn-squidex-api-client-secret:
    description: 'CRN Squidex Client Secret'
    required: false
  crn-squidex-shared-secret:
    description: 'CRN Squidex Shared Secret'
    required: false
  gp2-squidex-api-client-secret:
    description: 'GP2 Squidex Client Secret'
    required: false
  gp2-squidex-shared-secret:
    description: 'GP2 Squidex Shared Secret'
    required: false
  gp2-auth0-shared-secret:
    description: 'GP2 Auth0 Shared Secret'
    required: false

outputs:
  crn-api-url:
    description: 'CRN API Url'
    value: ${{ steps.setup.outputs.crn-api-url }}
  crn-app-url:
    description: 'CRN APP Url'
    value: ${{ steps.setup.outputs.crn-app-url }}
  gp2-api-url:
    description: 'GP2 API Url'
    value: ${{ steps.setup.outputs.gp2-api-url }}
  gp2-app-url:
    description: 'GP2 APP Url'
    value: ${{ steps.setup.outputs.gp2-app-url }}

runs:
  using: 'composite'
  steps:
    - name: Setup
      id: setup
      uses: ./.github/actions/setup-environment
      with:
        environment-name: ${{ inputs.environment-name }}
    - name: Cache build output
      uses: ./.github/actions/cache-build
      with:
        cache-prefix: ${{ steps.setup.outputs.cache-prefix-frontend }}
        environment-name: ${{ inputs.environment-name }}
    - name: Cache build typecheck output
      uses: ./.github/actions/cache-unplugged
      with:
        environment-name: ${{ inputs.environment-name }}
    - uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.app }}-sls-package-${{ inputs.environment-name }}
        path: '${{ inputs.app }}-sls-package'
    - name: Deploy
      shell: bash
      run: |
        yarn workspace @asap-hub/${{ inputs.app }} run pnpify serverless deploy --package $PWD/${{ inputs.app }}-sls-package
      env:
        ALGOLIA_INDEX: ${{ steps.setup.outputs.algolia-index }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_REGION: ${{ steps.setup.outputs.aws-region }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
        CRN_API_URL: ${{ steps.setup.outputs.crn-api-url }}
        CRN_APP_URL: ${{ steps.setup.outputs.crn-app-url }}
        CRN_AUTH0_AUDIENCE: ${{ steps.setup.outputs.crn-auth0-audience }}
        CRN_AUTH0_CLIENT_ID: ${{ steps.setup.outputs.crn-auth0-client-id }}
        CRN_AWS_ACM_CERTIFICATE_ARN: ${{ steps.setup.outputs.crn-aws-acm-certificate-arn }}
        CRN_CONTENTFUL_ACCESS_TOKEN: ${{ inputs.crn-contentful-access-token }}
        CRN_CONTENTFUL_ENV: ${{ inputs.crn-contentful-env }}
        CRN_CONTENTFUL_MANAGEMENT_ACCESS_TOKEN: ${{ inputs.crn-contentful-management-access-token }}
        CRN_CONTENTFUL_SPACE_ID: ${{ steps.setup.outputs.contentful-space-id }}
        CRN_SENTRY_DSN_API: ${{ steps.setup.outputs.crn-sentry-dsn-api }}
        CRN_SENTRY_DSN_HANDLERS: ${{ steps.setup.outputs.crn-sentry-dsn-handlers }}
        CRN_SQUIDEX_API_CLIENT_ID: ${{ steps.setup.outputs.crn-squidex-api-client-id }}
        CRN_SQUIDEX_API_CLIENT_SECRET: ${{ inputs.crn-squidex-api-client-secret }}
        CRN_SQUIDEX_APP_NAME: ${{ steps.setup.outputs.crn-squidex-app-name }}
        CRN_SQUIDEX_SHARED_SECRET: ${{ inputs.crn-squidex-shared-secret }}
        CURRENT_REVISION: ${{ github.sha }}
        GP2_AUTH0_AUDIENCE: ${{ steps.setup.outputs.gp2-auth0-audience }}
        GP2_AUTH0_CLIENT_ID: ${{ steps.setup.outputs.gp2-auth0-client-id }}
        GP2_AUTH0_SHARED_SECRET: ${{ inputs.gp2-auth0-shared-secret }}
        GP2_AWS_ACM_CERTIFICATE_ARN: ${{ steps.setup.outputs.gp2-aws-acm-certificate-arn }}
        GP2_HOSTNAME: ${{ steps.setup.outputs.gp2-hostname }}
        GP2_SENTRY_DSN_API: ${{ steps.setup.outputs.gp2-sentry-dsn-api }}
        GP2_SENTRY_DSN_HANDLERS: ${{ steps.setup.outputs.gp2-sentry-dsn-handlers }}
        GP2_SQUIDEX_API_CLIENT_ID: ${{ steps.setup.outputs.gp2-squidex-api-client-id }}
        GP2_SQUIDEX_API_CLIENT_SECRET: ${{ inputs.gp2-squidex-api-client-secret }}
        GP2_SQUIDEX_APP_NAME: ${{ steps.setup.outputs.gp2-squidex-app-name }}
        GP2_SQUIDEX_SHARED_SECRET: ${{ inputs.gp2-squidex-shared-secret }}
        IS_CONTENTFUL_ENABLED: ${{ steps.setup.outputs.is-contentful-enabled }}
        IS_CONTENTFUL_ENABLED_V2: ${{ steps.setup.outputs.is-contentful-enabled-v2 }}
        LIGHTSTEP_TOKEN: ${{ inputs.lightstep-token }}
        NODE_ENV: 'production'
        NODE_OPTIONS: '--max-old-space-size=8192'
        SLS_STAGE: ${{ steps.setup.outputs.sls-stage}}
        SQUIDEX_BASE_URL: ${{ steps.setup.outputs.squidex-base-url }}
