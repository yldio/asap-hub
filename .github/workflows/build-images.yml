name: Build Docker Images

on:
  push:
    branches:
      - 'master'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_ECR }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build and push squidex
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: asap-hub/squidex-utils
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY
          docker build -t $IMAGE_NAME:$IMAGE_TAG . -f ci/Dockerfile --target base
          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
      - name: push squidex
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: docker push --all-tags ${{ env.IMAGE_NAME }}

      - name: Build and push integration
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: asap-hub/node-python-sq
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY
          docker build -t $IMAGE_NAME:$IMAGE_TAG . -f ci/Dockerfile --target integration
          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
      - name: push integration
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: docker push --all-tags ${{ env.IMAGE_NAME }}
