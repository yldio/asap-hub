name: Build Pipeline

on:
  pull_request:

env:
  NODE_OPTIONS: '--max_old_space_size=4096'
jobs:
  setup:
    uses: ./.github/workflows/setup.yml
  echo:
    needs: setup
    runs-on: ubuntu-latest
    env:
      PR_NUMBER: ${{ needs.setup.outputs.pr-number }}
      INTEGRATION_IMAGE: ${{ needs.setup.outputs.integration-image-name }}
      SQUIDEX_IMAGE: ${{ needs.setup.outputs.squidex-image-name }}
      NODE_IMAGE: ${{ needs.setup.outputs.node-image-name }}
    steps:
      - name: Start
        run: |
          echo "Started $PR_NUMBER"
          echo "integration image $INTEGRATION_IMAGE"
          echo "squidex image $SQUIDEX_IMAGE"
          echo "node $NODE_IMAGE"

  test-unit:
    needs: setup
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.setup.outputs.node-image-name }}
      credentials:
        username: AWS
        password: ${{ secrets.AWS_ECR_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/cache@v1
        name: Cache Jest cache
        id: cache-jest-cache
        with:
          path: .jest-cache
          key: ${{ runner.os }}-jest
      - name: Test
        run: yarn test --coverage --maxWorkers=3
  test-integration:
    needs: setup
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.setup.outputs.integration-image-name }}
      credentials:
        username: AWS
        password: ${{ secrets.AWS_ECR_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Test
        run: echo "Test"
  build:
    needs: setup
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.setup.outputs.integration-image-name }}
      credentials:
        username: AWS
        password: ${{ secrets.AWS_ECR_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Get Algolia App id
        id: get-algolia-app-id
        run: |
          REACT_APP_ALGOLIA_APP_ID=$(aws ssm get-parameter --name "algolia-app-id-dev" --query Parameter.Value --output text)
          echo "::set-output name=id::$REACT_APP_ALGOLIA_APP_ID"
      - name: Build
        env:
          NODE_ENV: 'production'
          ASAP_HOSTNAME: 'hub.asap.science'
          ASAP_API_URL: 'https://api-${ needs.setup.outputs.pr-number }.${ASAP_HOSTNAME}'
          ASAP_APP_URL: 'https://${ needs.setup.outputs.pr-number }.${ASAP_HOSTNAME}'
          ALGOLIA_INDEX: 'asap-hub_research_outputs_CI-${ needs.setup.outputs.pr-number }'
          REACT_APP_ALGOLIA_APP_ID: ${{ steps.get-algolia-app-id.outputs.id }}
          REACT_APP_ALGOLIA_INDEX: $ALGOLIA_INDEX
          REACT_APP_API_BASE_URL: 'http://api-${ needs.setup.outputs.pr-number }.${ASAP_HOSTNAME}'
          REACT_APP_ENVIRONMENT: 'development'
          REACT_APP_RELEASE: '${GITHUB_RUN_ID}-dev'
          REACT_APP_SENTRY_DSN: ''
        run: |
          yarn build
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: build-output
          path: |
            apps/**/build*
            packages/**/build*
          retention-days: 1

  rebuild:
    needs: setup
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.setup.outputs.integration-image-name }}
      credentials:
        username: AWS
        password: ${{ secrets.AWS_ECR_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Re-Build
        run: |
          yarn rebuild
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: rebuild-output
          path: |
            .yarn/unplugged/
          retention-days: 1
  check:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        script: [constraints, 'lint:format', 'check:packages']
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Check
        run: |
          yarn ${{ matrix.script }}
          yarn constraints
  build-sls-package:
    needs: [setup, build, rebuild]
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.setup.outputs.integration-image-name }}
      credentials:
        username: AWS
        password: ${{ secrets.AWS_ECR_PASSWORD }}
    env:
      SLS_STAGE: ${{ needs.setup.outputs.pr-number }}
      NODE_ENV: 'production'
      ASAP_HOSTNAME: 'hub.asap.science'
      ASAP_API_URL: 'https://api-${{ needs.setup.outputs.pr-number }}.hub.asap.science'
      ASAP_APP_URL: 'https://${{ needs.setup.outputs.pr-number }}.hub.asap.science'
      ALGOLIA_INDEX: 'asap-hub_research_outputs_CI-${{ needs.setup.outputs.pr-number }}'
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACM_CERTIFICATE_ARN: ${{ secrets.AWS_ACM_CERTIFICATE_ARN }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      SQUIDEX_APP_NAME: ${{ needs.setup.outputs.pr-number }}
      SQUIDEX_CLIENT_ID: ${{ secrets.SQUIDEX_CLIENT_ID_TEST }}
      SQUIDEX_CLIENT_SECRET: ${{ secrets.SQUIDEX_CLIENT_SECRET_TEST }}
      LIGHTSTEP_TOKEN: ${{ secrets.LIGHTSTEP_TOKEN }}
      SQUIDEX_BASE_URL: ${{ secrets.SQUIDEX_BASE_URL }}
      SQUIDEX_SHARED_SECRET_TEST: ${{ secrets.SQUIDEX_SHARED_SECRET_TEST }}
      CURRENT_REVISION: ${{ github.sha }}
      SENTRY_DSN_API: ${{ secrets.SENTRY_DSN_API }}
      SENTRY_DSN_CALENDAR: ${{ secrets.SENTRY_DSN_CALENDAR }}
      SENTRY_DSN_USER_INVITE: ${{ secrets.SENTRY_DSN_USER_INVITE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download build arctifacts
        uses: actions/download-artifact@v2
        with:
          name: build-output
      - name: Download rebuild artifact
        uses: actions/download-artifact@v2
        with:
          name: rebuild-output
          path: .yarn/unplugged/
      - name: Generate Package
        run: |
          # yarn rebuild # Duplicated for performance
          # yarn build:typecheck # Duplicated for performance
          # yarn build:babel # Duplicated for performance
          ls -la
          ls -la apps/asap-server
          yarn sls package
      - uses: actions/upload-artifact@v2
        with:
          name: sls-package
          path: '.serverless'
          retention-days: 14
