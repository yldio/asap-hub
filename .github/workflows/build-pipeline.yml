name: Build Pipeline

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - master

env:
  NODE_OPTIONS: '--max_old_space_size=4096'
jobs:
  setup:
    uses: ./.github/workflows/setup.yml
  test-unit:
    permissions:
      packages: read
    needs: setup
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.setup.outputs.integration-image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache Jest cache
        uses: actions/cache@v2
        id: jest-cache
        with:
          path: |
            .jest-cache/
          key: jest-cache
      - name: Test
        run: |
          yarn test --coverage --maxWorkers=2
          yarn codecov

  test-integration:
    permissions:
      packages: read
    needs: setup
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.setup.outputs.integration-image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    env:
      SQUIDEX_APP_NAME: ${{ needs.setup.outputs.pr-number || github.head_ref }}-${{ github.run_id }}
      SQUIDEX_CLIENT_ID: ${{ secrets.SQUIDEX_CLIENT_ID_TEST }}
      SQUIDEX_CLIENT_SECRET: ${{ secrets.SQUIDEX_CLIENT_SECRET_TEST }}
      SQUIDEX_BASE_URL: ${{ secrets.SQUIDEX_BASE_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup app
        run: python ci/integration/scripts/create-app.py
      - name: Test
        run: yarn test:integration
      - name: Delete app
        if: always()
        run: python ci/integration/scripts/delete-app.py

  build:
    needs: [setup]
    uses: ./.github/workflows/reusable-build.yml
    with:
      algolia-app-name: 'algolia-app-id-dev'
      algolia-index: 'asap-hub_CI-${{ needs.setup.outputs.pr-number }}'
      app-release: '${{ github.run_id }}-dev'
      asap-api-url: 'https://api-${{ needs.setup.outputs.pr-number }}.hub.asap.science'
      asap-app-url: 'https://${{ needs.setup.outputs.pr-number }}.hub.asap.science'
      image-name: ${{ needs.setup.outputs.integration-image-name }}
      sentry-dsn: ''
      sls-stage: '${{ needs.setup.outputs.pr-number }}'
      squidex-app-name: '${{ needs.setup.outputs.pr-number }}'
    secrets:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-acm-certificate-arn: ${{ secrets.AWS_ACM_CERTIFICATE_ARN }}
      aws-default-region: ${{ secrets.AWS_DEFAULT_REGION }}
      aws-region: ${{ secrets.AWS_REGION }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      lightstep-token: ${{ secrets.LIGHTSTEP_TOKEN }}
      sentry-dsn-api: ${{ secrets.SENTRY_DSN_API }}
      sentry-dsn-calendar: ${{ secrets.SENTRY_DSN_CALENDAR }}
      sentry-dsn-user-invite: ${{ secrets.SENTRY_DSN_USER_INVITE }}
      react-app-gtm-container-id: ${{ secrets.REACT_APP_GTM_CONTAINER_ID }}
      squidex-base-url: ${{ secrets.SQUIDEX_BASE_URL }}
      squidex-client-id: ${{ secrets.SQUIDEX_CLIENT_ID_TEST }}
      squidex-client-secret: ${{ secrets.SQUIDEX_CLIENT_SECRET_TEST }}
      squidex-shared-secret: ${{ secrets.SQUIDEX_SHARED_SECRET_TEST }}

  check:
    permissions:
      packages: read
    needs: setup
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.setup.outputs.integration-image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        script: [constraints, 'lint:format', 'check:packages']
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check
        run: |
          yarn ${{ matrix.script }}

  bundlewatch:
    permissions:
      packages: read
    needs: [setup, build]
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.setup.outputs.integration-image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    env:
      CI_REPO_OWNER: ${{ github.repository_owner }}
      CI_REPO: ${{ github.repository }}
      CI_COMMIT_SHA: ${{ github.sha }}
      CI_BRANCH: ${{ github.head_ref }}
      BUNDLEWATCH_GITHUB_TOKEN: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache -frontendbuild output
        uses: actions/cache@v2
        id: restore-build-frontend
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: build-frontend-output-${{ github.sha }}
      - name: Bundle watch
        run: |
          CI_REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}')
          yarn bundlewatch

  test-build-output:
    permissions:
      packages: read
    needs: [setup, build]
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.setup.outputs.integration-image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache build output
        uses: actions/cache@v2
        id: restore-build-frontend
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: build-frontend-output-${{ github.sha }}
      - name: Test output
        run: |
          yarn run test:build-output

  test-browser:
    needs: [setup, build]
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:focal
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache build output
        uses: actions/cache@v2
        id: restore-rebuild
        with:
          path: |
            .yarn/unplugged/
          key: rebuild-output-${{ github.sha }}
      - name: Install Playwright
        run: |
          yarn workspace @asap-hub/react-components run playwright install
      - name: Test browser
        run: |
          yarn run test:browser

  prepare-squidex:
    permissions:
      packages: read
    needs: setup
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    container:
      image: ${{ needs.setup.outputs.integration-image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    env:
      SQUIDEX_APP_NAME: ${{ needs.setup.outputs.pr-number }}
      SQUIDEX_CLIENT_ID: ${{ secrets.SQUIDEX_CLIENT_ID_TEST }}
      SQUIDEX_CLIENT_SECRET: ${{ secrets.SQUIDEX_CLIENT_SECRET_TEST }}
      SQUIDEX_BASE_URL: ${{ secrets.SQUIDEX_BASE_URL }}
      SQUIDEX_SHARED_SECRET: ${{ secrets.SQUIDEX_SHARED_SECRET_TEST }}
      ASAP_API_URL: 'https://api-${{ needs.setup.outputs.pr-number }}.hub.asap.science'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup app
        if: ${{ github.event.action == 'opened' }}
        run: python ci/integration/scripts/create-app.py
      - name: Configure AWS credentials
        if: ${{ github.event.action == 'opened' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Import data
        if: ${{ github.event.action == 'opened' }}
        run: |
          MOST_RECENT_BACKUP=$(aws s3api list-objects-v2 --bucket "asap-hub-dev-data-backup" --query 'sort_by(Contents, &LastModified)[-1].Key' --output=text)
          aws s3api get-object --bucket "asap-hub-dev-data-backup" --key $MOST_RECENT_BACKUP  $MOST_RECENT_BACKUP
          tar -xf $MOST_RECENT_BACKUP
          FIRST_RUN="true" ./ci/import-squidex-data.sh
      - name: Update schema
        uses: ./.github/actions/squidex-sync
        with:
          squidex-app-name: ${{ env.SQUIDEX_APP_NAME }}
          squidex-client-id: ${{ env.SQUIDEX_CLIENT_ID }}
          squidex-client-secret: ${{ env.SQUIDEX_CLIENT_SECRET }}
          squidex-base-url: ${{ env.SQUIDEX_BASE_URL }}
          squidex-shared-secret: ${{ env.SQUIDEX_SHARED_SECRET }}
          asap-api-url: ${{ env.ASAP_API_URL }}

  verify-schema:
    permissions:
      packages: read
    needs: [setup, prepare-squidex]
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.setup.outputs.integration-image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    env:
      SQUIDEX_APP_NAME: ${{ needs.setup.outputs.pr-number }}
      SQUIDEX_CLIENT_ID: ${{ secrets.SQUIDEX_CLIENT_ID_TEST }}
      SQUIDEX_CLIENT_SECRET: ${{ secrets.SQUIDEX_CLIENT_SECRET_TEST }}
      SQUIDEX_BASE_URL: ${{ secrets.SQUIDEX_BASE_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Verify
        run: |
          yarn schema:update
          git diff --exit-code ./apps/crn-server/src/autogenerated-gql/
  deploy-sls:
    needs:
      [
        setup,
        build,
        test-unit,
        test-integration,
        check,
        bundlewatch,
        test-build-output,
        test-browser,
      ]
    permissions:
      packages: read
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.setup.outputs.integration-image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    env:
      NODE_ENV: production
      NODE_OPTIONS: '--max_old_space_size=4096'
      SLS_STAGE: ${{ needs.setup.outputs.pr-number }}
      SQUIDEX_APP_NAME: ${{ needs.setup.outputs.pr-number }}
      SQUIDEX_CLIENT_ID: ${{ secrets.SQUIDEX_TEST_CLIENT_ID }}
      SQUIDEX_CLIENT_SECRET: ${{ secrets.SQUIDEX_TEST_CLIENT_SECRET }}
      SQUIDEX_SHARED_SECRET: ${{ secrets.SQUIDEX_SHARED_SECRET_TEST }}
      ASAP_API_URL: 'https://api-${{ needs.setup.outputs.pr-number }}.hub.asap.science'
      ASAP_APP_URL: 'https://${{ needs.setup.outputs.pr-number }}.hub.asap.science'
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACM_CERTIFICATE_ARN: ${{ secrets.AWS_ACM_CERTIFICATE_ARN }}
      ALGOLIA_INDEX: 'asap-hub_CI-${{ needs.setup.outputs.pr-number }}'
      AWS_REGION: ${{ secrets.AWS_REGION }}
      LIGHTSTEP_TOKEN: ${{ secrets.LIGHTSTEP_TOKEN }}
      SQUIDEX_BASE_URL: ${{ secrets.SQUIDEX_BASE_URL }}
      CURRENT_REVISION: ${{ github.sha }}
      SENTRY_DSN_API: ${{ secrets.SENTRY_DSN_API }}
      SENTRY_DSN_CALENDAR: ${{ secrets.SENTRY_DSN_CALENDAR }}
      SENTRY_DSN_USER_INVITE: ${{ secrets.SENTRY_DSN_USER_INVITE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache build output
        uses: actions/cache@v2
        id: restore-build
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: build-frontend-output-${{ github.sha }}
      - name: Cache rebuild output
        uses: actions/cache@v2
        with:
          path: |
            .yarn/unplugged/
          key: rebuild-output-${{ github.sha }}
      - uses: actions/download-artifact@v2
        with:
          name: sls-package
          path: 'sls-package'
      - name: Deploy
        run: |
          yarn sls deploy --package sls-package --verbose

  verify-sls:
    needs: [setup, deploy-sls]
    permissions:
      packages: read
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.setup.outputs.integration-image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    env:
      ASAP_API_URL: 'https://api-${{ needs.setup.outputs.pr-number }}.hub.asap.science'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Test
        run: |
          yarn test:e2e

  e2e-test:
    needs: [setup, deploy-sls]
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:focal
    env:
      ASAP_APP_URL: 'https://${{ needs.setup.outputs.pr-number }}.hub.asap.science'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache build output
        uses: actions/cache@v2
        id: restore-rebuild
        with:
          path: |
            .yarn/unplugged/
          key: rebuild-output-${{ github.sha }}
      - name: Install Playwright
        run: |
          yarn workspace @asap-hub/e2e-tests run playwright install
      - name: Test
        run: |
          yarn workspace @asap-hub/e2e-tests run playwright test

  # notify_failure:
  #   runs-on: ubuntu-latest
  #   needs:
  #     [
  #       setup,
  #       test-unit,
  #       test-integration,
  #       build,
  #       build-typecheck,
  #       transpile,
  #       typecheck,
  #       check,
  #       bundlewatch,
  #       test-build-output,
  #       test-browser,
  #       prepare-squidex,
  #       verify-schema,
  #       deploy-sls,
  #       verify-sls,
  #       e2e-test,
  #     ]
  #   if: ${{ failure() }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - uses: ./.github/actions/slack/
  #       with:
  #         message: 'Build Failed on GitHub: ${{ needs.setup.outputs.pr-number || github.head_ref }}'
  #         webhook: ${{ secrets.SLACK_WEBHOOK }}
  #         status: failure

  build-pipeline-success:
    runs-on: ubuntu-latest
    needs:
      [
        setup,
        test-unit,
        test-integration,
        build,
        check,
        bundlewatch,
        test-build-output,
        test-browser,
        prepare-squidex,
        verify-schema,
        deploy-sls,
        verify-sls,
        e2e-test,
      ]
    if: ${{ success() }}
    steps:
      - name: Print success
        run: |
          echo "Build Successful."
