name: Setup

on:
  workflow_call:
    inputs:
      algolia-app-name:
        description: 'Algolia App Name'
        required: true
        type: string
      algolia-index:
        description: 'Algolia Index'
        required: true
        type: string
      app-release:
        description: 'App Release'
        required: true
        type: string
      asap-api-url:
        description: 'ASAP API Url'
        required: true
        type: string
      asap-app-url:
        description: 'ASAP APP Url'
        required: true
        type: string
      image-name:
        description: 'Image name'
        required: true
        type: string
      sentry-dsn:
        description: 'Sentry DSN'
        required: true
        type: string
      sls-stage:
        description: 'SLS Stage'
        required: true
        type: string
      squidex-app-name:
        description: 'Squidex App Name'
        required: true
        type: string

jobs:
  build-typecheck:
    permissions:
      packages: read
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Typecheck
        run: |
          yarn build:typecheck
      - name: Cache build typecheck output
        uses: actions/cache@v2
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: build-typecheck-output-${{ github.sha }}

  transpile:
    permissions:
      packages: read
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build
        run: |
          yarn build:babel
      - name: Cache transpile output
        uses: actions/cache@v2
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: transpile-output-${{ github.sha }}

  rebuild:
    permissions:
      packages: read
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Re-Build
        run: |
          yarn rebuild
      - name: Cache build output
        uses: actions/cache@v2
        with:
          path: |
            .yarn/unplugged/
          key: rebuild-output-${{ github.sha }}

  build-frontend:
    permissions:
      packages: read
    needs: [build-typecheck, transpile]
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Get Algolia app Id
        id: get-algolia-app-id
        run: |
          REACT_APP_ALGOLIA_APP_ID=$(aws ssm get-parameter --name "${{ inputs.aloglia-app-name }}" --query Parameter.Value --output text)
          echo "::set-output name=id::$REACT_APP_ALGOLIA_APP_ID"
      - name: Cache transpile output
        uses: actions/cache@v2
        id: restore-transpile
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: transpile-output-${{ github.sha }}
      - name: Cache build typecheck output
        uses: actions/cache@v2
        id: restore-build-typecheck
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: build-typecheck-output-${{ github.sha }}
      - name: Build
        env:
          REACT_APP_ALGOLIA_APP_ID: ${{ steps.get-algolia-app-id.outputs.id }}
          REACT_APP_ALGOLIA_INDEX: ${{ inputs.algolia-index }}
          REACT_APP_API_BASE_URL: ${{ inputs.asap-api-url }}
          REACT_APP_ENVIRONMENT: 'development'
          REACT_APP_RELEASE: ${{ inputs.app-release }}
          REACT_APP_SENTRY_DSN: ${{ inputs.sentry-dsn }}
          REACT_APP_GTM_CONTAINER_ID: ${{ secrets.REACT_APP_GTM_CONTAINER_ID}}
        run: |
          yarn build:frontend
      - name: Cache build output
        uses: actions/cache@v2
        id: restore-build
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: build-frontend-output-${{ github.sha }}

  typecheck:
    permissions:
      packages: read
    needs: [build-typecheck]
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache build typecheck output
        uses: actions/cache@v2
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: build-typecheck-output-${{ github.sha }}
      - name: TypeCheck
        run: |
          yarn typecheck

  build-sls-package:
    permissions:
      packages: read
    needs: [build-typecheck, transpile, rebuild]
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    env:
      SLS_STAGE: ${{ inputs.sls-stage}}
      NODE_ENV: 'production'
      ASAP_API_URL: ${{ inputs.asap-api-url }}
      ASAP_APP_URL: ${{ inputs.asap-app-url }}
      ALGOLIA_INDEX: ${{ inputs.algolia-index }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACM_CERTIFICATE_ARN: ${{ secrets.AWS_ACM_CERTIFICATE_ARN }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      SQUIDEX_APP_NAME: '${{ inputs.squidex-app-name }}'
      SQUIDEX_CLIENT_ID: ${{ secrets.SQUIDEX_CLIENT_ID_TEST }}
      SQUIDEX_CLIENT_SECRET: ${{ secrets.SQUIDEX_CLIENT_SECRET_TEST }}
      SQUIDEX_SHARED_SECRET: ${{ secrets.SQUIDEX_SHARED_SECRET_TEST }}
      LIGHTSTEP_TOKEN: ${{ secrets.LIGHTSTEP_TOKEN }}
      SQUIDEX_BASE_URL: ${{ secrets.SQUIDEX_BASE_URL }}
      CURRENT_REVISION: ${{ github.sha }}
      SENTRY_DSN_API: ${{ secrets.SENTRY_DSN_API }}
      SENTRY_DSN_CALENDAR: ${{ secrets.SENTRY_DSN_CALENDAR }}
      SENTRY_DSN_USER_INVITE: ${{ secrets.SENTRY_DSN_USER_INVITE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache build output
        uses: actions/cache@v2
        id: restore-rebuild
        with:
          path: |
            .yarn/unplugged/
          key: rebuild-output-${{ github.sha }}
      - name: Cache build typecheck output
        uses: actions/cache@v2
        id: restore-build-typecheck
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: build-typecheck-output-${{ github.sha }}
      - name: Cache transpile output
        uses: actions/cache@v2
        id: restore-transpile
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: transpile-output-${{ github.sha }}
      - name: Generate package
        run: |
          yarn sls package --package sls-package
      - uses: actions/upload-artifact@v2
        with:
          name: sls-package
          path: 'sls-package'
          retention-days: 1
