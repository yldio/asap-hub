name: Pipeline branch

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - master
jobs:
  test:
    uses: ./.github/workflows/reusable-test.yml
    with:
      environment-name: Branch
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      CRN_SQUIDEX_CI_CLIENT_SECRET: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}

  build:
    uses: ./.github/workflows/reusable-build.yml
    with:
      environment-name: Branch
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      LIGHTSTEP_TOKEN: ${{ secrets.LIGHTSTEP_TOKEN }}
      CRN_SQUIDEX_API_CLIENT_SECRET: ${{ secrets.CRN_SQUIDEX_API_CLIENT_SECRET }}
      CRN_SQUIDEX_SHARED_SECRET: ${{ secrets.CRN_SQUIDEX_SHARED_SECRET }}
      GP2_SQUIDEX_API_CLIENT_SECRET: ${{ secrets.GP2_SQUIDEX_API_CLIENT_SECRET }}
      GP2_SQUIDEX_SHARED_SECRET: ${{ secrets.GP2_SQUIDEX_SHARED_SECRET }}
      GP2_AUTH0_SHARED_SECRET: ${{ secrets.GP2_AUTH0_SHARED_SECRET }}

  build-analysis:
    needs: [build]
    uses: ./.github/workflows/reusable-build-analysis.yml
    with:
      environment-name: Branch
    secrets:
      BUNDLEWATCH_GITHUB_TOKEN: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}

  create-environment:
    uses: ./.github/workflows/reusable-create-environment.yml
    with:
      environment-name: Branch
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      CRN_SQUIDEX_CI_CLIENT_SECRET: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}
      CRN_SQUIDEX_SHARED_SECRET: ${{ secrets.CRN_SQUIDEX_SHARED_SECRET }}
      GP2_SQUIDEX_CI_CLIENT_SECRET: ${{ secrets.GP2_SQUIDEX_CI_CLIENT_SECRET }}
      GP2_SQUIDEX_SHARED_SECRET: ${{ secrets.GP2_SQUIDEX_SHARED_SECRET }}
      CONTENTFUL_MANAGEMENT_TOKEN: ${{ secrets.CONTENTFUL_MANAGEMENT_TOKEN }}

  deployment:
    needs: [test, build-analysis, create-environment]
    uses: ./.github/workflows/reusable-deployment.yml
    with:
      environment-name: Branch
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      LIGHTSTEP_TOKEN: ${{ secrets.LIGHTSTEP_TOKEN }}
      CONTENTFUL_MANAGEMENT_TOKEN: ${{ secrets.CONTENTFUL_MANAGEMENT_TOKEN }}
      CRN_SQUIDEX_API_CLIENT_SECRET: ${{ secrets.CRN_SQUIDEX_API_CLIENT_SECRET }}
      CRN_SQUIDEX_CI_CLIENT_SECRET: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}
      CRN_SQUIDEX_SHARED_SECRET: ${{ secrets.CRN_SQUIDEX_SHARED_SECRET }}
      GP2_SQUIDEX_API_CLIENT_SECRET: ${{ secrets.GP2_SQUIDEX_API_CLIENT_SECRET }}
      GP2_SQUIDEX_CI_CLIENT_SECRET: ${{ secrets.GP2_SQUIDEX_CI_CLIENT_SECRET }}
      GP2_SQUIDEX_SHARED_SECRET: ${{ secrets.GP2_SQUIDEX_SHARED_SECRET }}
      GP2_AUTH0_SHARED_SECRET: ${{ secrets.GP2_AUTH0_SHARED_SECRET }}

  verify:
    needs: [deployment]
    uses: ./.github/workflows/reusable-verify.yml
    with:
      environment-name: Branch
    secrets:
      CRN_SQUIDEX_CI_CLIENT_SECRET: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}
      GP2_SQUIDEX_CI_CLIENT_SECRET: ${{ secrets.GP2_SQUIDEX_CI_CLIENT_SECRET }}

  unit:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:be0ebbcbd0ff209d56070f09590c5d9622e8a6dc
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache Jest cache
        uses: actions/cache@v3
        with:
          path: |
            .jest-cache/
          key: jest-cache
      - name: Debug
        run: |
          ls -la
          ls .jest-cache
      - name: Test
        run: |
          yarn test --coverage --maxWorkers=2 --changedSince ${{ github.event.pull_request.base.sha }}
      - uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          directory: coverage
          verbose: true

  branch-pipeline-success:
    runs-on: ubuntu-latest
    environment:
      name: Branch
      url: ${{ steps.setup.outputs.crn-app-url }}
    needs:
      [
        test,
        build,
        build-analysis,
        create-environment,
        deployment,
        verify,
        unit,
      ]
    if: ${{ always() }}
    steps:
      - name: Checkout
        if: ${{ success() }}
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: Branch
      - name: Print status
        run: |
          function statusIcon () {
            if [ "$1" == "success" ]; then
              echo ":tada:"
            else
              echo ":warning:"
            fi
          }
          echo "# Pipeline branch CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Summary" >> $GITHUB_STEP_SUMMARY
          echo "| stage | status |" >> $GITHUB_STEP_SUMMARY
          echo "| ----- | ------ |" >> $GITHUB_STEP_SUMMARY
          echo "| test | $(statusIcon ${{  needs.test.result }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| build |  $(statusIcon ${{ needs.build.result }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| build-analysis | $(statusIcon ${{ needs.build-analysis.result }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| create-environment | $(statusIcon ${{ needs.create-environment.result }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| deployment | $(statusIcon ${{ needs.deployment.result }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| verify | $(statusIcon ${{ needs.verify.result }}) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
      - name: On failure
        if: ${{ !contains(needs.verify.result, 'success')}}
        run: |
          echo "Build Failed! :fire:" >> $GITHUB_STEP_SUMMARY
          exit 1
      - name: On success
        run: |
          echo "Build Success! :rocket:" >> $GITHUB_STEP_SUMMARY
