name: Pipeline branch

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - master
jobs:
  test:
    uses: ./.github/workflows/reusable-test.yml
    with:
      environment-name: Branch
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      SQUIDEX_CLIENT_SECRET: ${{ secrets.SQUIDEX_CLIENT_SECRET }}

  build:
    uses: ./.github/workflows/reusable-build.yml
    with:
      environment-name: Branch
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      LIGHTSTEP_TOKEN: ${{ secrets.LIGHTSTEP_TOKEN }}
      SQUIDEX_CLIENT_SECRET: ${{ secrets.SQUIDEX_CLIENT_SECRET }}
      SQUIDEX_SHARED_SECRET: ${{ secrets.SQUIDEX_SHARED_SECRET }}

  build-analysis:
    needs: [build]
    uses: ./.github/workflows/reusable-build-analysis.yml
    secrets:
      BUNDLEWATCH_GITHUB_TOKEN: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}

  prepare-squidex:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:1de8c60b2214fbca2e0959aa7f473c55bbc2e014
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    environment: Branch
    env:
      SQUIDEX_CLIENT_ID: ${{ secrets.SQUIDEX_CLIENT_ID }}
      SQUIDEX_CLIENT_SECRET: ${{ secrets.SQUIDEX_CLIENT_SECRET }}
      SQUIDEX_BASE_URL: ${{ secrets.SQUIDEX_BASE_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        uses: ./.github/actions/setup
        with:
          environment-name: ${{ secrets.ENVIRONMENT_NAME }}
      - name: Prepare
        uses: ./.github/actions/prepare-squidex
        if: ${{ github.event.action == 'opened' }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ env.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          squidex-app-name: ${{ env.SQUIDEX_APP_NAME }}
          squidex-base-url: ${{ env.SQUIDEX_BASE_URL }}
          squidex-client-id: ${{ env.SQUIDEX_CLIENT_ID }}
          squidex-client-secret: ${{ secrets.SQUIDEX_CLIENT_SECRET }}

  create_algolia_indice:
    runs-on: ubuntu-18.04
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup
        uses: ./.github/actions/setup
        with:
          environment-name: ${{ secrets.ENVIRONMENT_NAME }}
      - name: Fetch the Algolia keys
        if: ${{ github.event.action == 'opened' }}
        run: |
          echo "ALGOLIA_APP_ID=$(aws ssm get-parameter --name 'algolia-app-id-dev' --query Parameter.Value --output text)" >> $GITHUB_ENV
          echo "ALGOLIA_API_KEY=$(aws ssm get-parameter --name 'algolia-api-key-ci-dev' --query Parameter.Value --output text)" >> $GITHUB_ENV
      - name: Get the latest backup directory name
        if: ${{ github.event.action == 'opened' }}
        run: echo "MOST_RECENT_BACKUP_DIR=$(aws s3api list-objects-v2 --bucket $BUCKET_NAME --query 'sort_by(Contents, &LastModified)[-1].Key' --output=text | cut -d'/' -f 1)" >> $GITHUB_ENV
      - name: Download the files and restore the index
        if: ${{ github.event.action == 'opened' }}
        run: |
          aws s3 cp s3://$BUCKET_NAME/$MOST_RECENT_BACKUP_DIR $MOST_RECENT_BACKUP_DIR --recursive
          export ALGOLIA_BACKUP=$(readlink -f $MOST_RECENT_BACKUP_DIR)
          export ALGOLIA_INDEX=asap-hub_CI-${{ github.event.number }}
          yarn workspace @asap-hub/crn-server run algolia import -s $ALGOLIA_BACKUP -a $ALGOLIA_APP_ID -k $ALGOLIA_API_KEY -n $ALGOLIA_INDEX

  deployment:
    needs: [test, build-analysis, prepare-squidex]
    uses: ./.github/workflows/reusable-deployment.yml
    with:
      environment-name: Branch
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      LIGHTSTEP_TOKEN: ${{ secrets.LIGHTSTEP_TOKEN }}
      SQUIDEX_CLIENT_SECRET: ${{ secrets.SQUIDEX_CLIENT_SECRET }}
      SQUIDEX_SHARED_SECRET: ${{ secrets.SQUIDEX_SHARED_SECRET }}

  verify:
    needs: [deployment]
    uses: ./.github/workflows/reusable-verify.yml
    with:
      environment-name: Branch
    secrets:
      SQUIDEX_CLIENT_SECRET: ${{ secrets.SQUIDEX_CLIENT_SECRET }}

  build-pipeline-success:
    runs-on: ubuntu-latest
    needs: [verify]
    if: ${{ success() }}
    steps:
      - name: Print success
        run: |
          echo "Pipeline branch successful."
