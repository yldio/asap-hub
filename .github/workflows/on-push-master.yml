name: Pipeline development and production

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  test:
    uses: ./.github/workflows/reusable-test.yml
    with:
      environment-name: Development
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      CRN_SQUIDEX_CI_CLIENT_SECRET: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}

  build-images:
    uses: ./.github/workflows/reusable-build-images.yml

  build-development:
    uses: ./.github/workflows/reusable-build.yml
    with:
      environment-name: Development
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      LIGHTSTEP_TOKEN: ${{ secrets.LIGHTSTEP_TOKEN }}
      CRN_SQUIDEX_API_CLIENT_SECRET: ${{ secrets.CRN_SQUIDEX_API_CLIENT_SECRET }}
      CRN_SQUIDEX_SHARED_SECRET: ${{ secrets.CRN_SQUIDEX_SHARED_SECRET }}
      GP2_SQUIDEX_API_CLIENT_SECRET: ${{ secrets.GP2_SQUIDEX_API_CLIENT_SECRET }}
      GP2_SQUIDEX_SHARED_SECRET: ${{ secrets.GP2_SQUIDEX_SHARED_SECRET }}
      GP2_AUTH0_SHARED_SECRET: ${{ secrets.GP2_AUTH0_SHARED_SECRET }}

  build-analysis-development:
    needs: [build-development]
    uses: ./.github/workflows/reusable-build-analysis.yml
    with:
      environment-name: Development
    secrets:
      BUNDLEWATCH_GITHUB_TOKEN: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}

  build-production:
    uses: ./.github/workflows/reusable-build.yml
    with:
      environment-name: Production
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      LIGHTSTEP_TOKEN: ${{ secrets.LIGHTSTEP_TOKEN }}
      CRN_SQUIDEX_API_CLIENT_SECRET: ${{ secrets.CRN_SQUIDEX_API_CLIENT_SECRET }}
      CRN_SQUIDEX_SHARED_SECRET: ${{ secrets.CRN_SQUIDEX_SHARED_SECRET }}
      GP2_SQUIDEX_API_CLIENT_SECRET: ${{ secrets.GP2_SQUIDEX_API_CLIENT_SECRET }}
      GP2_SQUIDEX_SHARED_SECRET: ${{ secrets.GP2_SQUIDEX_SHARED_SECRET }}
      GP2_AUTH0_SHARED_SECRET: ${{ secrets.GP2_AUTH0_SHARED_SECRET }}

  build-analysis-production:
    needs: [build-production]
    uses: ./.github/workflows/reusable-build-analysis.yml
    with:
      environment-name: Production
    secrets:
      BUNDLEWATCH_GITHUB_TOKEN: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}

  deployment-development:
    needs: [test, build-analysis-development]
    uses: ./.github/workflows/reusable-deployment.yml
    with:
      environment-name: Development
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      LIGHTSTEP_TOKEN: ${{ secrets.LIGHTSTEP_TOKEN }}
      CRN_SQUIDEX_API_CLIENT_SECRET: ${{ secrets.CRN_SQUIDEX_API_CLIENT_SECRET }}
      CRN_SQUIDEX_CI_CLIENT_SECRET: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}
      CRN_SQUIDEX_SHARED_SECRET: ${{ secrets.CRN_SQUIDEX_SHARED_SECRET }}
      GP2_SQUIDEX_API_CLIENT_SECRET: ${{ secrets.GP2_SQUIDEX_API_CLIENT_SECRET }}
      GP2_SQUIDEX_CI_CLIENT_SECRET: ${{ secrets.GP2_SQUIDEX_CI_CLIENT_SECRET }}
      GP2_SQUIDEX_SHARED_SECRET: ${{ secrets.GP2_SQUIDEX_SHARED_SECRET }}
      GP2_AUTH0_SHARED_SECRET: ${{ secrets.GP2_AUTH0_SHARED_SECRET }}

  algolia-sync-development:
    needs: [deployment-development]
    uses: ./.github/workflows/reusable-algolia-sync.yml
    with:
      environment-name: Development
      entity: all
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      CRN_SQUIDEX_CI_CLIENT_SECRET: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}

  verify-development:
    needs: [deployment-development, algolia-sync-development]
    uses: ./.github/workflows/reusable-verify.yml
    with:
      environment-name: Development
    secrets:
      CRN_SQUIDEX_CI_CLIENT_SECRET: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}
      FRONTEND_SENTRY_RELEASE_AUTH_TOKEN: ${{ secrets.FRONTEND_SENTRY_RELEASE_AUTH_TOKEN }}

  deployment-production:
    needs: [build-analysis-production, verify-development]
    uses: ./.github/workflows/reusable-deployment.yml
    with:
      environment-name: Production
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      LIGHTSTEP_TOKEN: ${{ secrets.LIGHTSTEP_TOKEN }}
      CRN_SQUIDEX_API_CLIENT_SECRET: ${{ secrets.CRN_SQUIDEX_API_CLIENT_SECRET }}
      CRN_SQUIDEX_CI_CLIENT_SECRET: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}
      CRN_SQUIDEX_SHARED_SECRET: ${{ secrets.CRN_SQUIDEX_SHARED_SECRET }}
      GP2_AUTH0_SHARED_SECRET: ${{ secrets.GP2_AUTH0_SHARED_SECRET }}
      GP2_SQUIDEX_API_CLIENT_SECRET: ${{ secrets.GP2_SQUIDEX_API_CLIENT_SECRET }}
      GP2_SQUIDEX_CI_CLIENT_SECRET: ${{ secrets.GP2_SQUIDEX_CI_CLIENT_SECRET }}
      GP2_SQUIDEX_SHARED_SECRET: ${{ secrets.GP2_SQUIDEX_SHARED_SECRET }}

  algolia-sync-production:
    needs: [deployment-production]
    uses: ./.github/workflows/reusable-algolia-sync.yml
    with:
      environment-name: Production
      entity: all
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      CRN_SQUIDEX_CI_CLIENT_SECRET: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}

  verify-production:
    needs: [deployment-production, algolia-sync-production]
    uses: ./.github/workflows/reusable-verify.yml
    with:
      environment-name: Production
    secrets:
      CRN_SQUIDEX_CI_CLIENT_SECRET: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}
      FRONTEND_SENTRY_RELEASE_AUTH_TOKEN: ${{ secrets.FRONTEND_SENTRY_RELEASE_AUTH_TOKEN }}

  notify_failure:
    runs-on: ubuntu-latest
    needs:
      [
        test,
        build-images,
        build-development,
        build-analysis-development,
        build-production,
        build-analysis-production,
        deployment-development,
        verify-development,
        deployment-production,
        verify-production,
      ]
    if: failure()
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: ./.github/actions/slack/
        with:
          message: 'Build failed on master branch!'
          webhook: ${{ secrets.SLACK_WEBHOOK }}
          status: failure

  master-pipeline-success:
    runs-on: ubuntu-latest
    needs: [verify-production, build-images]
    if: success()
    environment:
      name: Development
      url: ${{ steps.setup.outputs.crn-app-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: Production
      - name: Print success
        run: |
          echo "Pipeline development and production successful."
