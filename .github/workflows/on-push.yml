name: Continuous Integration

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - master

jobs:
  setup:
    uses: ./.github/workflows/setup.yml

  test:
    needs: [setup]
    uses: ./.github/workflows/reusable-test.yml
    with:
      environment-name: Branch
      image-name: ${{ needs.setup.outputs.integration-image-name }}
    secrets:
      codecov-token: ${{ secrets.CODECOV_TOKEN }}
      squidex-client-secret: ${{ secrets.SQUIDEX_CLIENT_SECRET }}
      squidex-shared-secret: ${{ secrets.SQUIDEX_SHARED_SECRET }}

  build:
    needs: [setup]
    uses: ./.github/workflows/reusable-build.yml
    with:
      environment-name: Branch
      image-name: ${{ needs.setup.outputs.integration-image-name }}
      sentry-dsn: ''
      app-release: '${{ github.run_id }}-dev'
      algolia-app-name: 'algolia-app-id-dev'
    secrets:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-default-region: ${{ secrets.AWS_DEFAULT_REGION }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      lightstep-token: ${{ secrets.LIGHTSTEP_TOKEN }}
      react-app-gtm-container-id: ${{ secrets.REACT_APP_GTM_CONTAINER_ID }}
      squidex-client-secret: ${{ secrets.SQUIDEX_CLIENT_SECRET }}
      squidex-shared-secret: ${{ secrets.SQUIDEX_SHARED_SECRET }}

  build-analysis:
    needs: [setup, build]
    uses: ./.github/workflows/reusable-build-analysis.yml
    with:
      image-name: ${{ needs.setup.outputs.integration-image-name }}
    secrets:
      bundlewatch-github-token: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}

  prepare-squidex:
    permissions:
      packages: read
    needs: setup
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    container:
      image: ${{ needs.setup.outputs.integration-image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    environment: Branch
    env:
      SQUIDEX_APP_NAME: ${{ needs.setup.outputs.pr-number }}
      SQUIDEX_CLIENT_ID: ${{ secrets.SQUIDEX_CLIENT_ID }}
      SQUIDEX_CLIENT_SECRET: ${{ secrets.SQUIDEX_CLIENT_SECRET }}
      SQUIDEX_BASE_URL: ${{ secrets.SQUIDEX_BASE_URL }}
      SQUIDEX_SHARED_SECRET: ${{ secrets.SQUIDEX_SHARED_SECRET }}
      ASAP_API_URL: 'https://api-${{ needs.setup.outputs.pr-number }}.hub.asap.science'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        uses: ./.github/actions/setup
        with:
          environment-name: ${{ secrets.ENVIRONMENT_NAME }}
      - name: Setup app
        if: ${{ github.event.action == 'opened' }}
        run: python .github/scripts/squidex/create-app.py
      - name: Configure AWS credentials
        if: ${{ github.event.action == 'opened' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Import data
        if: ${{ github.event.action == 'opened' }}
        run: |
          MOST_RECENT_BACKUP=$(aws s3api list-objects-v2 --bucket "asap-hub-dev-data-backup" --query 'sort_by(Contents, &LastModified)[-1].Key' --output=text)
          aws s3api get-object --bucket "asap-hub-dev-data-backup" --key $MOST_RECENT_BACKUP  $MOST_RECENT_BACKUP
          tar -xf $MOST_RECENT_BACKUP
          FIRST_RUN="true" .github/scripts/prepare-squidex/import-data.sh

  deployment:
    needs: [setup, test, build-analysis, prepare-squidex]
    uses: ./.github/workflows/reusable-deploy.yml
    with:
      environment-name: Branch
      image-name: ${{ needs.setup.outputs.integration-image-name }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      LIGHTSTEP_TOKEN: ${{ secrets.LIGHTSTEP_TOKEN }}
      SQUIDEX_CLIENT_SECRET: ${{ secrets.SQUIDEX_CLIENT_SECRET }}
      SQUIDEX_SHARED_SECRET: ${{ secrets.SQUIDEX_SHARED_SECRET }}

  verify:
    needs: [setup, deployment, prepare-squidex]
    uses: ./.github/workflows/reusable-verify.yml
    with:
      environment-name: Branch
      image-name: ${{ needs.setup.outputs.integration-image-name }}
    secrets:
      squidex-client-secret: ${{ secrets.SQUIDEX_CLIENT_SECRET }}

  # notify_failure:
  #   runs-on: ubuntu-latest
  #   needs:
  #     [
  #       setup,
  #       test,
  #       build,
  #       deploy-sls,
  #       verify,
  #     ]
  #   if: ${{ failure() }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - uses: ./.github/actions/slack/
  #       with:
  #         message: 'Build Failed on GitHub: ${{ needs.setup.outputs.pr-number || github.head_ref }}'
  #         webhook: ${{ secrets.SLACK_WEBHOOK }}
  #         status: failure

  build-pipeline-success:
    runs-on: ubuntu-latest
    needs: [verify]
    if: ${{ success() }}
    steps:
      - name: Print success
        run: |
          echo "Build Successful."
