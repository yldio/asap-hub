name: Reusable Algolia data sync

on:
  workflow_call:
    inputs:
      entity:
        required: false
        type: string
        description: Choose which entity to sync
        default: all
      environment-name:
        required: true
        type: string
        description: Choose which environment to sync
        default: Branch
      pr-number:
        required: false
        type: string
        description: The PR number to run for
      contentful-environment-id:
        description: 'CRN Contentful environment name'
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'AWS Access Key ID'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS Secret Access Key'
        required: true
      CRN_SQUIDEX_CI_CLIENT_SECRET:
        description: 'CRN Squidex Client Secret'
        required: true
      CRN_CONTENTFUL_ACCESS_TOKEN:
        description: 'CRN Contentful Access Token'
        required: true
      CONTENTFUL_MANAGEMENT_TOKEN:
        description: 'Contentful Management Token'
        required: true
jobs:
  sync_index:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-name }}
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:be0ebbcbd0ff209d56070f09590c5d9622e8a6dc
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Algolia CLI
        uses: algolia/setup-algolia-cli@master
        with:
          version: 1.2.1
      - name: Check PR Number
        if: ${{ inputs.environment-name=='Branch' }}
        uses: ./.github/actions/is-number
        with:
          number: ${{ inputs.pr-number }}
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
          pr-number: ${{ inputs.pr-number }}
      - name: Get Algolia Keys
        id: algolia-keys
        uses: ./.github/actions/algolia-keys
        with:
          algolia-api-key-name: ${{ steps.setup.outputs.crn-algolia-api-key-name }}
          algolia-app-id-name: ${{ steps.setup.outputs.crn-algolia-app-id-name }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-default-region: ${{ steps.setup.outputs.aws-default-region }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Build
        run: yarn exec "yarn workspaces foreach -vptR --from '{@asap-hub/asap-cli,@asap-hub/crn-server}' run build:babel"
      - name: Copy index to a temporary index (ALL)
        run: algolia indices copy -y -w $SCOPE $ALGOLIA_INDEX $ALGOLIA_INDEX_TEMP
        env:
          ALGOLIA_APPLICATION_ID: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          ALGOLIA_ADMIN_API_KEY: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          ALGOLIA_INDEX: ${{ steps.setup.outputs.crn-algolia-index }}
          ALGOLIA_INDEX_TEMP: '${{ steps.setup.outputs.crn-algolia-index }}_temp'
          # Do not copy the records if all entities are being synced
          SCOPE: ${{ inputs.entity == 'all' && '-s settings' || '' }}
      - name: Remove the entity data (ENTITY)
        if: ${{ inputs.entity != 'all'}}
        run: yarn algolia:remove-records -a $ALGOLIA_APP_ID -k $ALGOLIA_API_KEY -n $ALGOLIA_INDEX_TEMP -e $ENTITY_TYPE
        env:
          ALGOLIA_API_KEY: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          ALGOLIA_APP_ID: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          ALGOLIA_INDEX_TEMP: '${{ steps.setup.outputs.crn-algolia-index }}_temp'
          ENTITY_TYPE: ${{ (inputs.entity == 'users' && 'user') || (inputs.entity == 'research-outputs' && 'research-output') || (inputs.entity == 'external-authors' && 'external-author') || (inputs.entity == 'events' && 'event') }}
      - name: Import Research Outputs (ROs | ALL)
        if: ${{ inputs.entity == 'research-outputs' || inputs.entity == 'all'}}
        uses: ./.github/actions/algolia-import-entity
        with:
          algolia-api-key: ${{ steps.algolia-keys.outputs.crn-algolia-api-key }}
          algolia-app-id: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          algolia-index: '${{ steps.setup.outputs.crn-algolia-index }}_temp'
          entity-type: 'research-output'
          squidex-app-name: ${{ steps.setup.outputs.crn-squidex-app-name }}
          squidex-base-url: ${{ steps.setup.outputs.squidex-base-url }}
          squidex-ci-client-id: ${{ steps.setup.outputs.crn-squidex-ci-client-id }}
          squidex-ci-client-secret: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}
      - name: Import Users (USERs | ALL)
        if: ${{ inputs.entity == 'users' || inputs.entity == 'all'}}
        uses: ./.github/actions/algolia-import-entity
        with:
          algolia-api-key: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          algolia-app-id: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          algolia-index: '${{ steps.setup.outputs.crn-algolia-index }}_temp'
          entity-type: 'user'
          squidex-app-name: ${{ steps.setup.outputs.crn-squidex-app-name }}
          squidex-base-url: ${{ steps.setup.outputs.squidex-base-url }}
          squidex-ci-client-id: ${{ steps.setup.outputs.crn-squidex-ci-client-id }}
          squidex-ci-client-secret: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}
      - name: Import External Authors (EXTERNAL_AUTHORS | ALL)
        if: ${{ inputs.entity == 'external-authors' || inputs.entity == 'all'}}
        uses: ./.github/actions/algolia-import-entity
        with:
          algolia-api-key: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          algolia-app-id: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          algolia-index: '${{ steps.setup.outputs.crn-algolia-index }}_temp'
          entity-type: 'external-author'
          contentful-env: ${{ inputs.contentful-environment-id }}
          contentful-access-token: ${{ secrets.CRN_CONTENTFUL_ACCESS_TOKEN }}
          contentful-management-token: ${{ secrets.CONTENTFUL_MANAGEMENT_TOKEN }}
          contentful-space-id: ${{ steps.setup.outputs.contentful-space-id }}
          squidex-app-name: ${{ steps.setup.outputs.crn-squidex-app-name }}
          squidex-base-url: ${{ steps.setup.outputs.squidex-base-url }}
          squidex-ci-client-id: ${{ steps.setup.outputs.crn-squidex-ci-client-id }}
          squidex-ci-client-secret: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}
      - name: Import Events (EVENTS | ALL)
        if: ${{ inputs.entity == 'events' || inputs.entity == 'all'}}
        uses: ./.github/actions/algolia-import-entity
        with:
          algolia-api-key: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          algolia-app-id: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          algolia-index: '${{ steps.setup.outputs.crn-algolia-index }}_temp'
          entity-type: 'event'
          squidex-app-name: ${{ steps.setup.outputs.crn-squidex-app-name }}
          squidex-base-url: ${{ steps.setup.outputs.squidex-base-url }}
          squidex-ci-client-id: ${{ steps.setup.outputs.crn-squidex-ci-client-id }}
          squidex-ci-client-secret: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}
          contentful-env: 'n-a'
          contentful-access-token: 'n-a'
          contentful-space-id: 'n-a'
      - name: Override index with the temp one
        run: yarn algolia:move-index -a $ALGOLIA_APP_ID -k $ALGOLIA_API_KEY -n $ALGOLIA_INDEX_TEMP -i $ALGOLIA_INDEX
        env:
          ALGOLIA_API_KEY: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          ALGOLIA_APP_ID: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          ALGOLIA_INDEX: ${{ steps.setup.outputs.crn-algolia-index }}
          ALGOLIA_INDEX_TEMP: '${{ steps.setup.outputs.crn-algolia-index }}_temp'
      # TODO: CRN-1329: Remove this step once the migration is complete
      - name: Copy index to a temporary index (ALL)
        run: algolia indices copy -y -w $SCOPE $ALGOLIA_INDEX-contentful $ALGOLIA_INDEX_TEMP
        env:
          ALGOLIA_APPLICATION_ID: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          ALGOLIA_ADMIN_API_KEY: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          ALGOLIA_INDEX: ${{ steps.setup.outputs.crn-algolia-index }}
          ALGOLIA_INDEX_TEMP: '${{ steps.setup.outputs.crn-algolia-index }}_temp'
          # Do not copy the records if all entities are being synced
          SCOPE: ${{ inputs.entity == 'all' && '-s settings' || '' }}
      - name: Remove the entity data (ENTITY)
        if: ${{ inputs.entity != 'all'}}
        run: yarn algolia:remove-records -a $ALGOLIA_APP_ID -k $ALGOLIA_API_KEY -n $ALGOLIA_INDEX_TEMP -e $ENTITY_TYPE
        env:
          ALGOLIA_API_KEY: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          ALGOLIA_APP_ID: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          ALGOLIA_INDEX_TEMP: '${{ steps.setup.outputs.crn-algolia-index }}_temp'
          ENTITY_TYPE: ${{ (inputs.entity == 'users' && 'user') || (inputs.entity == 'research-outputs' && 'research-output') || (inputs.entity == 'external-authors' && 'external-author') || (inputs.entity == 'events' && 'event') }}
      - name: Import Research Outputs (ROs | ALL)
        if: ${{ inputs.entity == 'research-outputs' || inputs.entity == 'all'}}
        uses: ./.github/actions/algolia-import-entity
        with:
          algolia-api-key: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          algolia-app-id: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          algolia-index: '${{ steps.setup.outputs.crn-algolia-index }}_temp'
          entity-type: 'research-output'
          squidex-app-name: ${{ steps.setup.outputs.crn-squidex-app-name }}
          squidex-base-url: ${{ steps.setup.outputs.squidex-base-url }}
          squidex-ci-client-id: ${{ steps.setup.outputs.crn-squidex-ci-client-id }}
          squidex-ci-client-secret: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}
          contentful-env: ${{ inputs.contentful-environment-id }}
          contentful-access-token: ${{ secrets.CRN_CONTENTFUL_ACCESS_TOKEN }}
          contentful-management-token: ${{ secrets.CONTENTFUL_MANAGEMENT_TOKEN }}
          contentful-space-id: ${{ steps.setup.outputs.contentful-space-id }}
          data-store: 'contentful'
      - name: Import Users (USERs | ALL)
        if: ${{ inputs.entity == 'users' || inputs.entity == 'all'}}
        uses: ./.github/actions/algolia-import-entity
        with:
          algolia-api-key: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          algolia-app-id: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          algolia-index: '${{ steps.setup.outputs.crn-algolia-index }}_temp'
          entity-type: 'user'
          squidex-app-name: ${{ steps.setup.outputs.crn-squidex-app-name }}
          squidex-base-url: ${{ steps.setup.outputs.squidex-base-url }}
          squidex-ci-client-id: ${{ steps.setup.outputs.crn-squidex-ci-client-id }}
          squidex-ci-client-secret: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}
          contentful-env: ${{ inputs.contentful-environment-id }}
          contentful-access-token: ${{ secrets.CRN_CONTENTFUL_ACCESS_TOKEN }}
          contentful-management-token: ${{ secrets.CONTENTFUL_MANAGEMENT_TOKEN }}
          contentful-space-id: ${{ steps.setup.outputs.contentful-space-id }}
          data-store: 'contentful'
      - name: Import External Authors (EXTERNAL_AUTHORS | ALL)
        if: ${{ inputs.entity == 'external-authors' || inputs.entity == 'all'}}
        uses: ./.github/actions/algolia-import-entity
        with:
          algolia-api-key: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          algolia-app-id: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          algolia-index: '${{ steps.setup.outputs.crn-algolia-index }}_temp'
          entity-type: 'external-author'
          squidex-app-name: ${{ steps.setup.outputs.crn-squidex-app-name }}
          squidex-base-url: ${{ steps.setup.outputs.squidex-base-url }}
          squidex-ci-client-id: ${{ steps.setup.outputs.crn-squidex-ci-client-id }}
          squidex-ci-client-secret: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}
          contentful-env: ${{ inputs.contentful-environment-id }}
          contentful-access-token: ${{ secrets.CRN_CONTENTFUL_ACCESS_TOKEN }}
          contentful-management-token: ${{ secrets.CONTENTFUL_MANAGEMENT_TOKEN }}
          contentful-space-id: ${{ steps.setup.outputs.contentful-space-id }}
          data-store: 'contentful'
      - name: Import Events (EVENTS | ALL)
        if: ${{ inputs.entity == 'events' || inputs.entity == 'all'}}
        uses: ./.github/actions/algolia-import-entity
        with:
          algolia-api-key: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          algolia-app-id: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          algolia-index: '${{ steps.setup.outputs.crn-algolia-index }}_temp'
          entity-type: 'event'
          squidex-app-name: ${{ steps.setup.outputs.crn-squidex-app-name }}
          squidex-base-url: ${{ steps.setup.outputs.squidex-base-url }}
          squidex-ci-client-id: ${{ steps.setup.outputs.crn-squidex-ci-client-id }}
          squidex-ci-client-secret: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}
          contentful-env: ${{ inputs.contentful-environment-id }}
          contentful-access-token: ${{ secrets.CRN_CONTENTFUL_ACCESS_TOKEN }}
          contentful-management-token: ${{ secrets.CONTENTFUL_MANAGEMENT_TOKEN }}
          contentful-space-id: ${{ steps.setup.outputs.contentful-space-id }}
          data-store: 'contentful'
      - name: Override index with the temp one
        run: yarn algolia:move-index -a $ALGOLIA_APP_ID -k $ALGOLIA_API_KEY -n $ALGOLIA_INDEX_TEMP -i $ALGOLIA_INDEX-contentful
        env:
          ALGOLIA_API_KEY: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          ALGOLIA_APP_ID: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          ALGOLIA_INDEX: ${{ steps.setup.outputs.crn-algolia-index }}
          ALGOLIA_INDEX_TEMP: '${{ steps.setup.outputs.crn-algolia-index }}_temp'
