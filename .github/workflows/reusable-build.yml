name: Reusable build

on:
  workflow_call:
    inputs:
      environment-name:
        description: 'The environment name'
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'AWS Access Key ID'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS Secret Access Key'
        required: true
      LIGHTSTEP_TOKEN:
        description: 'Lightstep Token'
        required: true
      SQUIDEX_CLIENT_SECRET:
        description: 'Squidex Client Secret'
        required: true
      SQUIDEX_SHARED_SECRET:
        description: 'Squidex Shared Secret'
        required: true

jobs:
  definitions:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:1de8c60b2214fbca2e0959aa7f473c55bbc2e014
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build
        run: |
          yarn build:typecheck
      - name: Cache build applications
        uses: actions/cache@v2
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: definitions-output-${{ inputs.environment-name }}-${{ github.sha }}

  transpile:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:1de8c60b2214fbca2e0959aa7f473c55bbc2e014
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Build
        run: |
          yarn build:babel
        env:
          AUTH0_CLIENT_ID: ${{ steps.setup.outputs.auth0-client-id }}
          AUTH0_DOMAIN: ${{ steps.setup.outputs.auth0-domain }}
      - name: Cache transpile output
        uses: actions/cache@v2
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: transpile-output-${{ inputs.environment-name }}-${{ github.sha }}

  rebuild:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:1de8c60b2214fbca2e0959aa7f473c55bbc2e014
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Re-Build
        uses: ./.github/actions/build-rebuild
      - name: Cache build output
        uses: actions/cache@v2
        with:
          path: |
            .yarn/unplugged/
          key: rebuild-output-${{ inputs.environment-name }}-${{ github.sha }}

  frontend:
    needs: [definitions, transpile]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:1de8c60b2214fbca2e0959aa7f473c55bbc2e014
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Build
        uses: ./.github/actions/build-frontend
        with:
          algolia-app-id-name: ${{ steps.setup.outputs.algolia-app-id-name }}
          algolia-api-key-name: ${{ steps.setup.outputs.algolia-api-key-name }}
          algolia-index: ${{ steps.setup.outputs.algolia-index }}
          app-release: ${{ steps.setup.outputs.app-release }}
          asap-api-url: ${{ steps.setup.outputs.asap-api-url }}
          auth0-client-id: ${{ steps.setup.outputs.auth0-client-id }}
          auth0-domain: ${{ steps.setup.outputs.auth0-domain }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-default-region: ${{ steps.setup.outputs.aws-default-region }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          environment-name: ${{ inputs.environment-name }}
          react-app-environment: ${{ steps.setup.outputs.react-app-environment }}
          react-app-gtm-container-id: ${{ steps.setup.outputs.react-app-gtm-container-id }}
          react-app-sentry-dsn: ${{ steps.setup.outputs.react-app-sentry-dsn }}

  typecheck:
    needs: [definitions]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:1de8c60b2214fbca2e0959aa7f473c55bbc2e014
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache build typecheck output
        uses: actions/cache@v2
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: definitions-output-${{ inputs.environment-name }}-${{ github.sha }}
      - name: TypeCheck
        run: |
          yarn typecheck

  sls-package:
    needs: [definitions, transpile, rebuild]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:1de8c60b2214fbca2e0959aa7f473c55bbc2e014
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    environment: ${{ inputs.environment-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Build
        uses: ./.github/actions/build-sls-package
        with:
          algolia-index: ${{ steps.setup.outputs.algolia-index }}
          asap-api-url: ${{ steps.setup.outputs.asap-api-url }}
          asap-app-url: ${{ steps.setup.outputs.asap-app-url }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-acm-certificate-arn: ${{ steps.setup.outputs.aws-acm-certificate-arn }}
          aws-region: ${{ steps.setup.outputs.aws-region }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          environment-name: ${{ inputs.environment-name }}
          lightstep-token: ${{ secrets.LIGHTSTEP_TOKEN }}
          sentry-dsn-api: ${{ steps.setup.outputs.sentry-dsn-api }}
          sentry-dsn-calendar: ${{ steps.setup.outputs.sentry-dsn-calendar }}
          sentry-dsn-user-invite: ${{ steps.setup.outputs.sentry-dsn-user-invite }}
          sls-stage: ${{ steps.setup.outputs.sls-stage }}
          squidex-app-name: ${{ steps.setup.outputs.squidex-app-name }}
          squidex-base-url: ${{ steps.setup.outputs.squidex-base-url }}
          squidex-client-id: ${{ steps.setup.outputs.squidex-client-id }}
          squidex-client-secret: ${{ secrets.SQUIDEX_CLIENT_SECRET }}
          squidex-shared-secret: ${{ secrets.SQUIDEX_SHARED_SECRET }}
