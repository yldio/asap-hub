name: Reusable build

on:
  workflow_call:
    inputs:
      environment-name:
        required: true
        type: string
      image-name:
        description: 'Image name'
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'AWS Access Key ID'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS Secret Access Key'
        required: true
      LIGHTSTEP_TOKEN:
        description: 'Lightstep Token'
        required: true
      SQUIDEX_CLIENT_SECRET:
        description: 'Squidex Client Secret'
        required: true
      SQUIDEX_SHARED_SECRET:
        description: 'Squidex Shared Secret'
        required: true

jobs:
  build-typecheck:
    permissions:
      packages: read
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Typecheck
        run: |
          yarn build:typecheck
      - name: Cache build typecheck output
        uses: actions/cache@v2
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: build-typecheck-output-${{ github.sha }}

  transpile:
    permissions:
      packages: read
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build
        run: |
          yarn build:babel
      - name: Cache transpile output
        uses: actions/cache@v2
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: transpile-output-${{ github.sha }}

  rebuild:
    permissions:
      packages: read
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Re-Build
        uses: ./.github/actions/rebuild
      - name: Cache build output
        uses: actions/cache@v2
        with:
          path: |
            .yarn/unplugged/
          key: rebuild-output-${{ github.sha }}

  build-frontend:
    permissions:
      packages: read
    needs: [build-typecheck, transpile]
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        uses: ./.github/actions/setup
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Build
        uses: ./.github/actions/build-frontend
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          algolia-app-name: ${{ env.ALGOLIA_APP_NAME }}
          algolia-index: ${{ env.ALGOLIA_INDEX }}
          app-release: ${{ env.APP_RELEASE }}
          asap-api-url: ${{ env.ASAP_API_URL }}
          asap-hostname: ${{ env.ASAP_HOSTNAME }}
          aws-region: ${{ env.AWS_REGION }}
          react-app-gtm-container-id: ${{ env.REACT_APP_GTM_CONTAINER_ID }}
          react-app-sentry-dsn: ${{ env.REACT_APP_SENTRY_DSN }}
          react-app-environment: ${{ env.REACT_APP_ENVIRONMENT }}

  typecheck:
    permissions:
      packages: read
    needs: [build-typecheck]
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache build typecheck output
        uses: actions/cache@v2
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: build-typecheck-output-${{ github.sha }}
      - name: TypeCheck
        run: |
          yarn typecheck

  build-sls-package:
    permissions:
      packages: read
    needs: [build-typecheck, transpile, rebuild]
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.image-name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    environment: ${{ inputs.environment-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        uses: ./.github/actions/setup
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Build
        uses: ./.github/actions/build-sls-package
        with:
          algolia-index: ${{ env.ALGOLIA_INDEX }}
          asap-api-url: ${{ env.ASAP_API_URL }}
          asap-app-url: ${{ env.ASAP_APP_URL }}
          aws-acm-certificate-arn: ${{ env.AWS_ACM_CERTIFICATE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          sls-stage: '${{ env.SLS_STAGE }}'
          squidex-app-name: '${{ env.SQUIDEX_APP_NAME }}'
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          lightstep-token: ${{ secrets.LIGHTSTEP_TOKEN }}
          sentry-dsn-api: ${{ env.SENTRY_DSN_API }}
          sentry-dsn-calendar: ${{ env.SENTRY_DSN_CALENDAR }}
          sentry-dsn-user-invite: ${{ env.SENTRY_DSN_USER_INVITE }}
          squidex-base-url: ${{ env.SQUIDEX_BASE_URL }}
          squidex-client-id: ${{ env.SQUIDEX_CLIENT_ID }}
          squidex-client-secret: ${{ secrets.SQUIDEX_CLIENT_SECRET }}
          squidex-shared-secret: ${{ secrets.SQUIDEX_SHARED_SECRET }}
