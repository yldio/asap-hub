name: Reusable build

on:
  workflow_call:
    inputs:
      environment-name:
        description: 'The environment name'
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'AWS Access Key ID'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS Secret Access Key'
        required: true
      LIGHTSTEP_TOKEN:
        description: 'Lightstep Token'
        required: true
      SQUIDEX_CLIENT_SECRET:
        description: 'Squidex Client Secret'
        required: true
      SQUIDEX_SHARED_SECRET:
        description: 'Squidex Shared Secret'
        required: true

jobs:
  definitions:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:1de8c60b2214fbca2e0959aa7f473c55bbc2e014
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build
        run: |
          yarn build:typecheck
      - name: Cache build applications
        uses: actions/cache@v2
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: definitions-output-${{ inputs.environment-name }}-${{ github.sha }}

  transpile:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:1de8c60b2214fbca2e0959aa7f473c55bbc2e014
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Build
        run: |
          yarn build:babel
        env:
          AUTH0_CLIENT_ID: ${{ steps.setup.outputs.auth0-client-id }}
          AUTH0_DOMAIN: ${{ steps.setup.outputs.auth0-domain }}
      - name: Cache transpile output
        uses: actions/cache@v2
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: transpile-output-${{ inputs.environment-name }}-${{ github.sha }}

  rebuild:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:1de8c60b2214fbca2e0959aa7f473c55bbc2e014
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Re-Build
        uses: ./.github/actions/build-rebuild
      - name: Cache build output
        uses: actions/cache@v2
        with:
          path: |
            .yarn/unplugged/
          key: rebuild-output-${{ inputs.environment-name }}-${{ github.sha }}

  frontend:
    needs: [definitions, transpile]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:1de8c60b2214fbca2e0959aa7f473c55bbc2e014
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Get Algolia Keys
        id: algolia-keys
        uses: ./.github/actions/algolia-keys
        with:
          algolia-app-id-name: ${{ steps.setup.outputs.algolia-app-id-name }}
          algolia-api-key-name: ${{ steps.setup.outputs.algolia-api-key-name }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-default-region: ${{ steps.setup.outputs.aws-default-region }}
      - name: Cache transpile output
        uses: actions/cache@v2
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: transpile-output-${{ inputs.environment-name }}-${{ github.sha }}
      - name: Cache build typecheck output
        uses: actions/cache@v2
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: definitions-output-${{ inputs.environment-name }}-${{ github.sha }}
      - name: Build
        shell: bash
        env:
          AUTH0_CLIENT_ID: ${{ steps.setup.outputs.auth0-client-id }}
          AUTH0_DOMAIN: ${{ steps.setup.outputs.auth0-domain }}
          REACT_APP_ALGOLIA_APP_ID: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          REACT_APP_ALGOLIA_INDEX: ${{ steps.setup.outputs.algolia-index }}
          REACT_APP_API_BASE_URL: ${{ steps.setup.outputs.asap-api-url }}
          REACT_APP_ENVIRONMENT: ${{ steps.setup.outputs.react-app-environment }}
          REACT_APP_GTM_CONTAINER_ID: ${{ steps.setup.outputs.react-app-gtm-container-id }}
          REACT_APP_RELEASE: ${{ steps.setup.outputs.app-release }}
          REACT_APP_SENTRY_DSN: ${{ steps.setup.outputs.react-app-sentry-dsn }}
        run: |
          yarn build:frontend
      - name: Cache build output
        uses: actions/cache@v2
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: build-frontend-output-${{ inputs.environment-name }}-${{ github.sha }}

  typecheck:
    needs: [definitions]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:1de8c60b2214fbca2e0959aa7f473c55bbc2e014
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache build typecheck output
        uses: actions/cache@v2
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: definitions-output-${{ inputs.environment-name }}-${{ github.sha }}
      - name: TypeCheck
        run: |
          yarn typecheck

  sls-package:
    needs: [definitions, transpile, rebuild]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:1de8c60b2214fbca2e0959aa7f473c55bbc2e014
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    environment: ${{ inputs.environment-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Cache build output
        uses: actions/cache@v2
        with:
          path: |
            .yarn/unplugged/
          key: rebuild-output-${{ inputs.environment-name }}-${{ github.sha }}
      - name: Cache build typecheck output
        uses: actions/cache@v2
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: build-definitions-${{ inputs.environment-name }}-${{ github.sha }}
      - name: Cache transpile output
        uses: actions/cache@v2
        with:
          path: |
            apps/**/build*
            packages/**/build*
          key: transpile-output-${{ inputs.environment-name }}-${{ github.sha }}
      - name: Generate package
        shell: bash
        run: |
          yarn sls package --package sls-package
        env:
          ALGOLIA_INDEX: ${{ steps.setup.outputs.algolia-index }}
          ASAP_API_URL: ${{ steps.setup.outputs.asap-api-url }}
          ASAP_APP_URL: ${{ steps.setup.outputs.asap-app-url }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_ACM_CERTIFICATE_ARN: ${{ steps.setup.outputs.aws-acm-certificate-arn }}
          AWS_REGION: ${{ steps.setup.outputs.aws-region }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CURRENT_REVISION: ${{ github.sha }}
          LIGHTSTEP_TOKEN: ${{ secrets.LIGHTSTEP_TOKEN }}
          NODE_ENV: 'production'
          SENTRY_DSN_API: ${{ steps.setup.outputs.sentry-dsn-api }}
          SENTRY_DSN_CALENDAR: ${{ steps.setup.outputs.sentry-dsn-calendar }}
          SENTRY_DSN_USER_INVITE: ${{ steps.setup.outputs.sentry-dsn-user-invite }}
          SLS_STAGE: ${{ steps.setup.outputs.sls-stage }}
          SQUIDEX_APP_NAME: ${{ steps.setup.outputs.squidex-app-name }}
          SQUIDEX_BASE_URL: ${{ steps.setup.outputs.squidex-base-url }}
          SQUIDEX_CLIENT_ID: ${{ steps.setup.outputs.squidex-client-id }}
          SQUIDEX_CLIENT_SECRET: ${{ secrets.SQUIDEX_CLIENT_SECRET }}
          SQUIDEX_SHARED_SECRET: ${{ secrets.SQUIDEX_SHARED_SECRET }}
      - uses: actions/upload-artifact@v2
        with:
          name: sls-package-${{ inputs.environment-name }}
          path: 'sls-package'
          retention-days: 1
