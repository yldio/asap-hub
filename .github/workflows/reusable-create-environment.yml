name: Reusable prepare

on:
  workflow_call:
    inputs:
      environment-name:
        description: 'The environment name'
        required: true
        type: string
      crn-contentful-env:
        description: 'CRN Contentful environment name'
        type: string
      on-branch-env:
        description: 'Is branch environment required'
        required: true
        type: string
      contentful-env-exists:
        description: 'Does contentful environment already exist'
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'AWS Access Key ID'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS Secret Access Key'
        required: true
      CRN_SQUIDEX_CI_CLIENT_SECRET:
        description: 'Squidex Client Secret'
        required: true
      CRN_SQUIDEX_SHARED_SECRET:
        description: 'Squidex Shared Secret'
        required: true
      GP2_SQUIDEX_CI_CLIENT_SECRET:
        description: 'Squidex Client Secret'
        required: true
      GP2_SQUIDEX_SHARED_SECRET:
        description: 'Squidex Shared Secret'
        required: true
      CONTENTFUL_MANAGEMENT_TOKEN:
        description: 'Contentful Management Token'
        required: true
      CRN_CONTENTFUL_ACCESS_TOKEN:
        description: 'CRN Contentful Access Token'
        required: true

jobs:
  algolia-index:
    runs-on: ubuntu-latest
    environment: Branch
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:be0ebbcbd0ff209d56070f09590c5d9622e8a6dc
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Get Algolia Keys
        id: algolia-keys
        if: ${{ inputs.environment-name=='Branch' }}
        uses: ./.github/actions/algolia-keys
        with:
          algolia-app-id-name: ${{ steps.setup.outputs.algolia-app-id-name }}
          algolia-api-key-name: ${{ steps.setup.outputs.algolia-api-key-name }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-default-region: ${{ steps.setup.outputs.aws-default-region }}
      - uses: actions/checkout@v2
      - uses: algolia/setup-algolia-cli@master
      - name: Test Index exists
        if: ${{ inputs.environment-name=='Branch' }}
        id: index-exists
        shell: bash
        run: |
          OUTPUT=$(algolia settings get $ALGOLIA_INDEX) || true
          echo "$OUTPUT"
          if [[ "$OUTPUT" == *"Index does not exist"*  ]]; then
            echo "::set-output name=index-exists::false"
            echo "Index does not exist"
          else
            echo "::set-output name=index-exists::true"
            echo "Index exists"
          fi
        env:
          ALGOLIA_ADMIN_API_KEY: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          ALGOLIA_APPLICATION_ID: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          ALGOLIA_INDEX: ${{ steps.setup.outputs.algolia-index }}
      - name: Get the latest backup directory name
        if: ${{ inputs.environment-name=='Branch' &&  steps.index-exists.outputs.index-exists == 'false' }}
        run: echo "MOST_RECENT_BACKUP_DIR=$(aws s3api list-objects-v2 --bucket $BUCKET_NAME --query 'sort_by(Contents, &LastModified)[-1].Key' --output=text | cut -d'/' -f 1)" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: ${{ steps.setup.outputs.aws-default-region }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUCKET_NAME: ${{ steps.setup.outputs.algolia-backup-bucket-name }}
      - name: Download the files and restore the index
        if: ${{ inputs.environment-name=='Branch' &&  steps.index-exists.outputs.index-exists == 'false' }}
        run: |
          aws s3 cp s3://$BUCKET_NAME/$MOST_RECENT_BACKUP_DIR $MOST_RECENT_BACKUP_DIR --recursive
          export ALGOLIA_BACKUP=$(readlink -f $MOST_RECENT_BACKUP_DIR)
          yarn workspace @asap-hub/crn-server run algolia import -s $ALGOLIA_BACKUP -a $ALGOLIA_APP_ID -k $ALGOLIA_API_KEY -n $ALGOLIA_INDEX -b 100
        env:
          ALGOLIA_API_KEY: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          ALGOLIA_APP_ID: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          ALGOLIA_INDEX: ${{ steps.setup.outputs.algolia-index }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: ${{ steps.setup.outputs.aws-default-region }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUCKET_NAME: ${{ steps.setup.outputs.algolia-backup-bucket-name }}
