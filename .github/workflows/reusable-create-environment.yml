name: Reusable prepare

on:
  workflow_call:
    inputs:
      environment-name:
        description: 'The environment name'
        required: true
        type: string
      crn-contentful-env:
        description: 'CRN Contentful environment name'
        type: string
      on-branch-env:
        description: 'Is branch environment required'
        required: true
        type: string
      contentful-env-exists:
        description: 'Does contentful environment already exist'
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'AWS Access Key ID'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS Secret Access Key'
        required: true
      CRN_SQUIDEX_CI_CLIENT_SECRET:
        description: 'Squidex Client Secret'
        required: true
      CRN_SQUIDEX_SHARED_SECRET:
        description: 'Squidex Shared Secret'
        required: true
      GP2_SQUIDEX_CI_CLIENT_SECRET:
        description: 'Squidex Client Secret'
        required: true
      GP2_SQUIDEX_SHARED_SECRET:
        description: 'Squidex Shared Secret'
        required: true
      CONTENTFUL_MANAGEMENT_TOKEN:
        description: 'Contentful Management Token'
        required: true
      CRN_CONTENTFUL_ACCESS_TOKEN:
        description: 'CRN Contentful Access Token'
        required: true

jobs:
  crn-contentful:
    if: ${{ inputs.environment-name=='Branch' && inputs.on-branch-env == 'true' && inputs.contentful-env-exists == 'false'}}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-name }}
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:be0ebbcbd0ff209d56070f09590c5d9622e8a6dc
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Determine whether we have reached the environment limit for our Contentful space
        shell: bash
        run: |
          ENVIRONMENTS=$(curl --silent \
                              --request GET \
                              --header "Authorization: Bearer ${CONTENTFUL_MANAGEMENT_ACCESS_TOKEN}" \
                              https://api.contentful.com/spaces/${CONTENTFUL_SPACE_ID}/environments \
                              | jq '.total' -r)

          if [[ "$ENVIRONMENTS" == "$MAX_CONTENTFUL_ENVIRONMENTS" ]]; then
            echo "Max Contentful environments reached. Cannot create more."
            exit 1;
          fi
        env:
          CONTENTFUL_SPACE_ID: ${{ steps.setup.outputs.contentful-space-id }}
          CONTENTFUL_MANAGEMENT_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_MANAGEMENT_TOKEN }}
          MAX_CONTENTFUL_ENVIRONMENTS: ${{ steps.setup.outputs.max-contentful-envs }}
      - name: Create Contentful environment
        run: yarn workspace @asap-hub/contentful space:create-environment:crn
        env:
          CONTENTFUL_SPACE_ID: ${{ steps.setup.outputs.contentful-space-id }}
          CONTENTFUL_MANAGEMENT_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_MANAGEMENT_TOKEN }}
          CONTENTFUL_ENV_ID: ${{ inputs.crn-contentful-env }}
          CONTENTFUL_SOURCE_ENV: ${{ steps.setup.outputs.contentful-environment }}
          CONTENTFUL_ACCESS_TOKEN: ${{ secrets.CRN_CONTENTFUL_ACCESS_TOKEN }}

  crn-squidex:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:be0ebbcbd0ff209d56070f09590c5d9622e8a6dc
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    environment: Branch
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Create Squidex App
        if: ${{ inputs.environment-name=='Branch' }}
        uses: ./.github/actions/squidex-create
        with:
          environment-name: ${{ inputs.environment-name }}
          app: crn
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ steps.setup.outputs.aws-region }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          bucket-name: ${{ steps.setup.outputs.crn-squidex-backup-bucket-name }}
          squidex-app-name: ${{ steps.setup.outputs.crn-squidex-app-name }}
          squidex-ci-client-id: ${{ steps.setup.outputs.crn-squidex-ci-client-id }}
          squidex-ci-client-secret: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}
          squidex-base-url: ${{ steps.setup.outputs.squidex-base-url }}

  gp2-squidex:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:be0ebbcbd0ff209d56070f09590c5d9622e8a6dc
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    environment: Branch
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Create Squidex App
        if: ${{ inputs.environment-name=='Branch' }}
        uses: ./.github/actions/squidex-create
        with:
          environment-name: ${{ inputs.environment-name }}
          app: gp2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ steps.setup.outputs.aws-region }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          bucket-name: ${{ steps.setup.outputs.gp2-squidex-backup-bucket-name }}
          squidex-app-name: ${{ steps.setup.outputs.gp2-squidex-app-name }}
          squidex-ci-client-id: ${{ steps.setup.outputs.gp2-squidex-ci-client-id }}
          squidex-ci-client-secret: ${{ secrets.GP2_SQUIDEX_CI_CLIENT_SECRET }}
          squidex-base-url: ${{ steps.setup.outputs.squidex-base-url }}

  algolia-index:
    runs-on: ubuntu-latest
    environment: Branch
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:be0ebbcbd0ff209d56070f09590c5d9622e8a6dc
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Algolia CLI
        uses: algolia/setup-algolia-cli@master
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Setup Dev Environment
        id: setup-dev
        uses: ./.github/actions/setup-environment
        with:
          environment-name: Development
      - name: Get Algolia Keys
        id: algolia-keys
        if: ${{ inputs.environment-name=='Branch' }}
        uses: ./.github/actions/algolia-keys
        with:
          algolia-app-id-name: ${{ steps.setup.outputs.algolia-app-id-name }}
          algolia-api-key-name: ${{ steps.setup.outputs.algolia-api-key-name }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-default-region: ${{ steps.setup.outputs.aws-default-region }}
      - name: Test Index exists
        if: ${{ inputs.environment-name=='Branch' }}
        id: index-exists
        shell: bash
        run: |
          OUTPUT=$(algolia settings get $ALGOLIA_INDEX 2>&1) || true
          if [[ "$OUTPUT" == *"Index does not exist"*  ]]; then
            echo "::set-output name=index-exists::false"
            echo "Index does not exist"
          else
            echo "::set-output name=index-exists::true"
            echo "Index exists"
          fi
        env:
          ALGOLIA_APPLICATION_ID: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          ALGOLIA_ADMIN_API_KEY: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          ALGOLIA_INDEX: ${{ steps.setup.outputs.algolia-index }}
      - name: Copy index from Dev
        if: ${{ inputs.environment-name=='Branch' && steps.index-exists.outputs.index-exists == 'false' }}
        shell: bash
        run: |
          algolia indices copy -y -w $ALGOLIA_INDEX_DEV $ALGOLIA_INDEX
          algolia indices copy -y -w $ALGOLIA_INDEX_DEV-reverse-timestamp $ALGOLIA_INDEX-reverse-timestamp
        env:
          ALGOLIA_APPLICATION_ID: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          ALGOLIA_ADMIN_API_KEY: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          ALGOLIA_INDEX_DEV: ${{ steps.setup-dev.outputs.algolia-index }}
          ALGOLIA_INDEX: ${{ steps.setup.outputs.algolia-index }}
