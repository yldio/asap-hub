name: Reusable prepare

on:
  workflow_call:
    inputs:
      environment-name:
        description: 'The environment name'
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'AWS Access Key ID'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS Secret Access Key'
        required: true
      SQUIDEX_CLIENT_SECRET:
        description: 'Squidex Client Secret'
        required: true
      SQUIDEX_SHARED_SECRET:
        description: 'Squidex Shared Secret'
        required: true

jobs:
  squidex:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:5b32d6f578fa819b09d2833c0e9a3bbc8f4eec61
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    environment: Branch
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Setup app
        if: ${{ inputs.environment-name=='Branch' && github.event.action == 'opened' }}
        run: python .github/scripts/squidex/create-app.py
        env:
          SQUIDEX_APP_NAME: ${{ steps.setup.outputs.squidex-app-name }}
          SQUIDEX_BASE_URL: ${{ steps.setup.outputs.squidex-base-url }}
          SQUIDEX_CLIENT_ID: ${{ steps.setup.outputs.squidex-client-id }}
          SQUIDEX_CLIENT_SECRET: ${{ secrets.SQUIDEX_CLIENT_SECRET }}
      - name: Configure AWS credentials
        if: ${{ inputs.environment-name=='Branch' && github.event.action == 'opened' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ steps.setup.outputs.aws-region }}
      - name: Import data
        if: ${{ inputs.environment-name=='Branch' && github.event.action == 'opened' }}
        run: |
          MOST_RECENT_BACKUP=$(aws s3api list-objects-v2 --bucket "asap-hub-dev-data-backup" --query 'sort_by(Contents, &LastModified)[-1].Key' --output=text)
          aws s3api get-object --bucket "asap-hub-dev-data-backup" --key $MOST_RECENT_BACKUP  $MOST_RECENT_BACKUP
          tar -xf $MOST_RECENT_BACKUP
          FIRST_RUN="true" .github/scripts/prepare-squidex/import-data.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_REGION: ${{ steps.setup.outputs.aws-region }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SQUIDEX_APP_NAME: ${{ steps.setup.outputs.squidex-app-name }}
          SQUIDEX_BASE_URL: ${{ steps.setup.outputs.squidex-base-url }}
          SQUIDEX_CLIENT_ID: ${{ steps.setup.outputs.squidex-client-id }}
          SQUIDEX_CLIENT_SECRET: ${{ secrets.SQUIDEX_CLIENT_SECRET }}

  algolia-index:
    runs-on: ubuntu-latest
    environment: Branch
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:5b32d6f578fa819b09d2833c0e9a3bbc8f4eec61
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Get Algolia Keys
        id: algolia-keys
        if: ${{ inputs.environment-name=='Branch' && github.event.action == 'opened' }}
        uses: ./.github/actions/algolia-keys
        with:
          algolia-app-id-name: ${{ steps.setup.outputs.algolia-app-id-name }}
          algolia-api-key-name: ${{ steps.setup.outputs.algolia-api-key-name }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-default-region: ${{ steps.setup.outputs.aws-default-region }}
      - name: Get the latest backup directory name
        if: ${{ inputs.environment-name=='Branch' && github.event.action == 'opened' }}
        run: echo "MOST_RECENT_BACKUP_DIR=$(aws s3api list-objects-v2 --bucket $BUCKET_NAME --query 'sort_by(Contents, &LastModified)[-1].Key' --output=text | cut -d'/' -f 1)" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: ${{ steps.setup.outputs.aws-default-region }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUCKET_NAME: ${{ steps.setup.outputs.algolia-backup-bucket-name }}
      - name: Download the files and restore the index
        if: ${{ inputs.environment-name=='Branch' && github.event.action == 'opened' }}
        run: |
          aws s3 cp s3://$BUCKET_NAME/$MOST_RECENT_BACKUP_DIR $MOST_RECENT_BACKUP_DIR --recursive
          export ALGOLIA_BACKUP=$(readlink -f $MOST_RECENT_BACKUP_DIR)
          yarn workspace @asap-hub/crn-server run algolia import -s $ALGOLIA_BACKUP -a $ALGOLIA_APP_ID -k $ALGOLIA_API_KEY -n $ALGOLIA_INDEX
        env:
          ALGOLIA_API_KEY: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          ALGOLIA_APP_ID: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          ALGOLIA_INDEX: ${{ steps.setup.outputs.algolia-index }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: ${{ steps.setup.outputs.aws-default-region }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUCKET_NAME: ${{ steps.setup.outputs.algolia-backup-bucket-name }}
