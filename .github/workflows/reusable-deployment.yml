name: Reusable deployment

on:
  workflow_call:
    inputs:
      environment-name:
        description: 'The environment name'
        required: true
        type: string
      crn-contentful-env:
        description: 'CRN Contentful environment name'
        required: true
        type: string
      gp2-contentful-env:
        description: 'GP2 Contentful environment name'
        required: true
        type: string

    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'AWS Access Key ID'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS Secret Access Key'
        required: true
      CRN_CI_AUTH0_CLIENT_SECRET:
        description: 'CRN CI Auth0 Client Secret'
        required: true
      CRN_AUTH0_SHARED_SECRET:
        description: 'CRN Auth0 Shared Secret'
        required: true
      CRN_CONTENTFUL_ACCESS_TOKEN:
        description: 'CRN Contentful Access Token'
        required: true
      CRN_CONTENTFUL_PREVIEW_ACCESS_TOKEN:
        description: 'CRN Contentful Preview Access Token'
        required: true
      CRN_CONTENTFUL_WEBHOOK_AUTHENTICATION_TOKEN:
        description: 'CRN Contentful Webhook Authentication Token'
        required: true
      CRN_SQUIDEX_API_CLIENT_SECRET:
        description: 'CRN API Squidex Client Secret'
        required: true
      CRN_SQUIDEX_CI_CLIENT_SECRET:
        description: 'CRN CI Squidex Client Secret'
        required: true
      CRN_SQUIDEX_SHARED_SECRET:
        description: 'CRN Squidex Shared Secret'
        required: true
      GP2_CI_AUTH0_CLIENT_SECRET:
        description: 'GP2 CI Auth0 Client Secret'
        required: true
      GP2_CONTENTFUL_ACCESS_TOKEN:
        description: 'GP2 Contentful Access Token'
        required: true
      GP2_CONTENTFUL_PREVIEW_ACCESS_TOKEN:
        description: 'GP2 Contentful Preview Access Token'
        required: true
      GP2_CONTENTFUL_WEBHOOK_AUTHENTICATION_TOKEN:
        description: 'GP2 Contentful Webhook Authentication Token'
        required: true
      GP2_AUTH0_SHARED_SECRET:
        description: 'GP2 Auth0 Shared Secret'
        required: false
      CONTENTFUL_MANAGEMENT_TOKEN:
        description: 'Contentful Management Token'
        required: true

jobs:
  crn-sls-deploy:
    concurrency:
      group: crn-${{ github.head_ref || inputs.environment-name }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:f93db8bae8be7528565c2510dbc8e3eece97983d
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    environment:
      name: ${{ inputs.environment-name }}
      url: ${{ steps.deploy.outputs.crn-app-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Deploy sls for crn
        id: deploy
        uses: ./.github/actions/sls-deployment
        with:
          app: crn-server
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          crn-contentful-access-token: ${{ secrets.CRN_CONTENTFUL_ACCESS_TOKEN }}
          crn-contentful-preview-access-token: ${{ secrets.CRN_CONTENTFUL_PREVIEW_ACCESS_TOKEN }}
          crn-contentful-env: ${{ inputs.crn-contentful-env }}
          crn-contentful-management-access-token: ${{ secrets.CONTENTFUL_MANAGEMENT_TOKEN }}
          crn-contentful-webhook-authentication-token: ${{ secrets.CRN_CONTENTFUL_WEBHOOK_AUTHENTICATION_TOKEN }}
          crn-squidex-api-client-secret: ${{ secrets.CRN_SQUIDEX_API_CLIENT_SECRET }}
          crn-squidex-shared-secret: ${{ secrets.CRN_SQUIDEX_SHARED_SECRET }}
          environment-name: ${{ inputs.environment-name }}

  gp2-sls-deploy:
    concurrency:
      group: gp2-${{ github.head_ref || inputs.environment-name }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:f93db8bae8be7528565c2510dbc8e3eece97983d
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    environment:
      name: ${{ inputs.environment-name }}
      url: ${{ steps.deploy.outputs.gp2-app-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Deploy sls for gp2
        id: deploy
        uses: ./.github/actions/sls-deployment
        with:
          app: gp2-server
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          environment-name: ${{ inputs.environment-name }}
          gp2-auth0-shared-secret: ${{ secrets.GP2_AUTH0_SHARED_SECRET }}
          gp2-contentful-access-token: ${{ secrets.GP2_CONTENTFUL_ACCESS_TOKEN }}
          gp2-contentful-preview-access-token: ${{ secrets.GP2_CONTENTFUL_PREVIEW_ACCESS_TOKEN }}
          gp2-contentful-env: ${{ inputs.gp2-contentful-env }}
          gp2-contentful-management-access-token: ${{ secrets.CONTENTFUL_MANAGEMENT_TOKEN }}
          gp2-contentful-webhook-authentication-token: ${{ secrets.GP2_CONTENTFUL_WEBHOOK_AUTHENTICATION_TOKEN }}

  crn-algolia-settings:
    needs: [crn-sls-deploy]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-name }}
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:f93db8bae8be7528565c2510dbc8e3eece97983d
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Cache transpile output
        uses: ./.github/actions/cache-build
        with:
          cache-prefix: ${{ steps.setup.outputs.cache-prefix-transpile }}
          environment-name: ${{ inputs.environment-name }}
      - name: Get Algolia Keys
        id: algolia-keys
        uses: ./.github/actions/algolia-keys
        with:
          algolia-api-key-name: ${{ steps.setup.outputs.crn-algolia-api-key-name }}
          algolia-app-id-name: ${{ steps.setup.outputs.crn-algolia-app-id-name }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-default-region: ${{ steps.setup.outputs.aws-default-region }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Synchronize Schema
        run: |
          yarn algolia:set-settings -a $ALGOLIA_APP_ID -k $ALGOLIA_API_KEY -n $ALGOLIA_INDEX -p crn
        env:
          ALGOLIA_API_KEY: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          ALGOLIA_APP_ID: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          ALGOLIA_INDEX: ${{ steps.setup.outputs.crn-algolia-index }}
      # TODO: CRN-1329 Remove this step once the migration is complete
      - name: Synchronize Schema for Contentful
        run: |
          yarn algolia:set-settings -a $ALGOLIA_APP_ID -k $ALGOLIA_API_KEY -n $ALGOLIA_INDEX-contentful -p crn
        env:
          ALGOLIA_API_KEY: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          ALGOLIA_APP_ID: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          ALGOLIA_INDEX: ${{ steps.setup.outputs.crn-algolia-index }}

  gp2-algolia-settings:
    needs: [gp2-sls-deploy]
    if: ${{ inputs.environment-name != 'Branch' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-name }}
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:f93db8bae8be7528565c2510dbc8e3eece97983d
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Cache transpile output
        uses: ./.github/actions/cache-build
        with:
          cache-prefix: ${{ steps.setup.outputs.cache-prefix-transpile }}
          environment-name: ${{ inputs.environment-name }}
      - name: Get Algolia Keys
        id: algolia-keys
        uses: ./.github/actions/algolia-keys
        with:
          algolia-api-key-name: ${{ steps.setup.outputs.gp2-algolia-api-key-name }}
          algolia-app-id-name: ${{ steps.setup.outputs.gp2-algolia-app-id-name }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-default-region: ${{ steps.setup.outputs.aws-default-region }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Synchronize Schema
        run: |
          yarn algolia:set-settings -a $ALGOLIA_APP_ID -k $ALGOLIA_API_KEY -n $ALGOLIA_INDEX -p gp2
        env:
          ALGOLIA_API_KEY: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          ALGOLIA_APP_ID: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          ALGOLIA_INDEX: ${{ steps.setup.outputs.gp2-algolia-index }}

  crn-squidex-schema:
    needs: [crn-sls-deploy]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-name }}
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:f93db8bae8be7528565c2510dbc8e3eece97983d
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Synchronize Squidex
        uses: ./.github/actions/squidex-sync
        with:
          environment-name: ${{ inputs.environment-name }}
          app: crn
          squidex-app-name: ${{ steps.setup.outputs.crn-squidex-app-name }}
          squidex-ci-client-id: ${{ steps.setup.outputs.crn-squidex-ci-client-id }}
          squidex-ci-client-secret: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}
          squidex-shared-secret: ${{ secrets.CRN_SQUIDEX_SHARED_SECRET }}

  crn-contentful-setup:
    needs: [crn-sls-deploy]
    # Run for dev and prod, also run for branch-workflow but only when it has a dedicated environment
    if: ${{ (inputs.environment-name == 'Branch' && inputs.crn-contentful-env != 'Development' &&  inputs.crn-contentful-env !='Production') || inputs.environment-name != 'Branch' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-name }}
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:f93db8bae8be7528565c2510dbc8e3eece97983d
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Setup Contentful Environment
        uses: ./.github/actions/contentful-setup
        with:
          api-url: ${{ steps.setup.outputs.crn-api-url }}
          contentful-environment: ${{ inputs.crn-contentful-env }}
          contentful-space-id: ${{ steps.setup.outputs.crn-contentful-space-id }}
          contentful-token: ${{ secrets.CONTENTFUL_MANAGEMENT_TOKEN }}
          contentful-webhook-authentication-token: ${{ secrets.CRN_CONTENTFUL_WEBHOOK_AUTHENTICATION_TOKEN }}
          environment-name: ${{ inputs.environment-name }}
          pr-contentful-env-id: ${{ steps.setup.outputs.crn-contentful-env-id }}

  crn-contentful-migrate:
    needs: [crn-sls-deploy]
    # Run for dev and prod, also run for branch-workflow but only when it has a dedicated environment
    if: ${{ (inputs.environment-name == 'Branch' && inputs.crn-contentful-env != 'Development' &&  inputs.crn-contentful-env !='Production') || inputs.environment-name != 'Branch' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-name }}
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:7b77d99657ab3718ed548ba366ffbcbb15315fd8
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Run Contentful migrations
        run: |
          yarn contentful:migration:run:crn
        env:
          CONTENTFUL_ENV_ID: ${{ inputs.crn-contentful-env }}
          CONTENTFUL_MANAGEMENT_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_MANAGEMENT_TOKEN }}
          CONTENTFUL_SPACE_ID: ${{ steps.setup.outputs.crn-contentful-space-id }}

  gp2-contentful-setup:
    needs: [gp2-sls-deploy]
    # Run for dev and prod, also run for branch-workflow but only when it has a dedicated environment
    if: ${{ (inputs.environment-name == 'Branch' && inputs.gp2-contentful-env != 'Development' &&  inputs.gp2-contentful-env !='Production') || inputs.environment-name != 'Branch' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-name }}
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:f93db8bae8be7528565c2510dbc8e3eece97983d
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Setup Contentful Environment
        uses: ./.github/actions/contentful-setup
        with:
          api-url: ${{ steps.setup.outputs.gp2-api-url }}
          contentful-environment: ${{ inputs.gp2-contentful-env }}
          contentful-space-id: ${{ steps.setup.outputs.gp2-contentful-space-id }}
          contentful-token: ${{ secrets.CONTENTFUL_MANAGEMENT_TOKEN }}
          contentful-webhook-authentication-token: ${{ secrets.GP2_CONTENTFUL_WEBHOOK_AUTHENTICATION_TOKEN }}
          environment-name: ${{ inputs.environment-name }}
          pr-contentful-env-id: ${{ steps.setup.outputs.gp2-contentful-env-id }}

  gp2-contentful-migrate:
    needs: [gp2-sls-deploy]
    # Run for dev and prod, also run for branch-workflow but only when it has a dedicated environment
    if: ${{ (inputs.environment-name == 'Branch' && inputs.gp2-contentful-env != 'Development' &&  inputs.gp2-contentful-env !='Production') || inputs.environment-name != 'Branch' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-name }}
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:7b77d99657ab3718ed548ba366ffbcbb15315fd8
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Run Contentful migrations
        run: |
          yarn contentful:migration:run:gp2
        env:
          CONTENTFUL_ENV_ID: ${{ inputs.gp2-contentful-env }}
          CONTENTFUL_MANAGEMENT_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_MANAGEMENT_TOKEN }}
          CONTENTFUL_SPACE_ID: ${{ steps.setup.outputs.gp2-contentful-space-id }}

  ses:
    needs: [crn-sls-deploy]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-name }}
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:f93db8bae8be7528565c2510dbc8e3eece97983d
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Cache build output
        uses: ./.github/actions/cache-build
        with:
          cache-prefix: ${{ steps.setup.outputs.cache-prefix-frontend }}
          environment-name: ${{ inputs.environment-name }}
      - name: Cache build typecheck output
        uses: ./.github/actions/cache-unplugged
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Deploy
        if: ${{ inputs.environment-name=='Development' || inputs.environment-name=='Production' }}
        run: |
          yarn workspace @asap-hub/crn-messages deploy $CRN_SES_REGION
          yarn workspace @asap-hub/gp2-messages deploy $GP2_SES_REGION
        env:
          APP_ORIGIN: ${{ steps.setup.outputs.crn-app-url }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CRN_SES_REGION: ${{ steps.setup.outputs.crn-ses-region }}
          GP2_SES_REGION: ${{ steps.setup.outputs.gp2-ses-region }}

  auth0:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-name }}
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:f93db8bae8be7528565c2510dbc8e3eece97983d
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Cache build output
        uses: ./.github/actions/cache-build
        with:
          cache-prefix: ${{ steps.setup.outputs.cache-prefix-frontend }}
          environment-name: ${{ inputs.environment-name }}
      - name: Cache build typecheck output
        uses: ./.github/actions/cache-unplugged
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Deploy CRN
        if: ${{ inputs.environment-name=='Development' || inputs.environment-name=='Production' }}
        run: yarn workspace @asap-hub/auth0 deploy --debug
        env:
          AUTH0_CLIENT_ID: ${{ steps.setup.outputs.crn-ci-auth0-client-id }}
          AUTH0_CLIENT_SECRET: ${{ secrets.CRN_CI_AUTH0_CLIENT_SECRET }}
          AUTH0_DOMAIN: ${{ steps.setup.outputs.crn-auth0-domain }}
          APPLICATION_NAME: crn
          BASE_PR_APP_DOMAIN: ${{ steps.setup.outputs.crn-base-pr-app-domain }}
          API_URL: ${{ steps.setup.outputs.crn-api-url }}
          AUTH0_ADDITIONAL_CLAIM_DOMAIN: ${{ steps.setup.outputs.crn-auth0-additional-claim-domain }}
          AUTH0_SHARED_SECRET: ${{ secrets.CRN_AUTH0_SHARED_SECRET }}
      - name: Deploy GP2
        if: ${{ inputs.environment-name=='Development' || inputs.environment-name=='Production' }}
        run: yarn workspace @asap-hub/auth0 deploy --debug
        env:
          AUTH0_CLIENT_ID: ${{ steps.setup.outputs.gp2-ci-auth0-client-id }}
          AUTH0_CLIENT_SECRET: ${{ secrets.GP2_CI_AUTH0_CLIENT_SECRET }}
          AUTH0_DOMAIN: ${{ steps.setup.outputs.gp2-auth0-domain }}
          APPLICATION_NAME: gp2
          BASE_PR_APP_DOMAIN: ${{ steps.setup.outputs.gp2-base-pr-app-domain }}
          API_URL: ${{ steps.setup.outputs.gp2-api-url }}
          AUTH0_ADDITIONAL_CLAIM_DOMAIN: ${{ steps.setup.outputs.gp2-auth0-additional-claim-domain }}
          AUTH0_SHARED_SECRET: ${{ secrets.GP2_AUTH0_SHARED_SECRET }}
