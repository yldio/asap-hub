name: Reusable deployment

on:
  workflow_call:
    inputs:
      environment-name:
        description: 'The environment name'
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'AWS Access Key ID'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS Secret Access Key'
        required: true
      LIGHTSTEP_TOKEN:
        description: 'Lightstep Token'
        required: true
      CRN_SQUIDEX_API_CLIENT_SECRET:
        description: 'CRN API Squidex Client Secret'
        required: true
      CRN_SQUIDEX_CI_CLIENT_SECRET:
        description: 'CRN CI Squidex Client Secret'
        required: true
      CRN_SQUIDEX_SHARED_SECRET:
        description: 'CRN Squidex Shared Secret'
        required: true
      GP2_SQUIDEX_API_CLIENT_SECRET:
        description: 'GP2 API Squidex Client Secret'
        required: true
      GP2_SQUIDEX_CI_CLIENT_SECRET:
        description: 'GP2 CI Squidex Client Secret'
        required: true
      GP2_SQUIDEX_SHARED_SECRET:
        description: 'GP2 Squidex Shared Secret'
        required: true
      GP2_AUTH0_SHARED_SECRET:
        description: 'GP2 Auth0 Shared Secret'
        required: false

jobs:
  crn-sls-deploy:
    concurrency:
      group: crn-${{ github.head_ref || inputs.environment-name }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:0f5eee65db0ad426fd10ff52113aeeb0ab5d1ec1
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    environment:
      name: ${{ inputs.environment-name }}
      url: ${{ steps.deploy.outputs.crn-app-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Deploy sls for crn
        id: deploy
        uses: ./.github/actions/sls-deployment
        with:
          app: crn-server
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          crn-squidex-api-client-secret: ${{ secrets.CRN_SQUIDEX_API_CLIENT_SECRET }}
          crn-squidex-shared-secret: ${{ secrets.CRN_SQUIDEX_SHARED_SECRET }}
          environment-name: ${{ inputs.environment-name }}
          lightstep-token: ${{ secrets.LIGHTSTEP_TOKEN }}

  gp2-sls-deploy:
    concurrency:
      group: gp2-${{ github.head_ref || inputs.environment-name }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:0f5eee65db0ad426fd10ff52113aeeb0ab5d1ec1
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    environment:
      name: ${{ inputs.environment-name }}
      url: ${{ steps.deploy.outputs.gp2-app-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Deploy sls for gp2
        id: deploy
        uses: ./.github/actions/sls-deployment
        with:
          app: gp2-server
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          environment-name: ${{ inputs.environment-name }}
          gp2-auth0-shared-secret: ${{ secrets.GP2_AUTH0_SHARED_SECRET }}
          gp2-squidex-api-client-secret: ${{ secrets.GP2_SQUIDEX_API_CLIENT_SECRET }}
          gp2-squidex-shared-secret: ${{ secrets.GP2_SQUIDEX_SHARED_SECRET }}
          lightstep-token: ${{ secrets.LIGHTSTEP_TOKEN }}

  algolia-settings:
    needs: [crn-sls-deploy]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-name }}
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:0f5eee65db0ad426fd10ff52113aeeb0ab5d1ec1
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Cache transpile output
        uses: ./.github/actions/cache-build
        with:
          cache-prefix: ${{ steps.setup.outputs.cache-prefix-transpile }}
          environment-name: ${{ inputs.environment-name }}
      - name: Get Algolia Keys
        id: algolia-keys
        uses: ./.github/actions/algolia-keys
        with:
          algolia-api-key-name: ${{ steps.setup.outputs.algolia-api-key-name }}
          algolia-app-id-name: ${{ steps.setup.outputs.algolia-app-id-name }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-default-region: ${{ steps.setup.outputs.aws-default-region }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Synchronize Schema
        run: |
          yarn algolia:set-settings -a $ALGOLIA_APP_ID -k $ALGOLIA_API_KEY -n $ALGOLIA_INDEX
        env:
          ALGOLIA_API_KEY: ${{ steps.algolia-keys.outputs.algolia-api-key }}
          ALGOLIA_APP_ID: ${{ steps.algolia-keys.outputs.algolia-app-id }}
          ALGOLIA_INDEX: ${{ steps.setup.outputs.algolia-index }}

  crn-squidex-schema:
    needs: [crn-sls-deploy]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-name }}
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:0f5eee65db0ad426fd10ff52113aeeb0ab5d1ec1
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Synchronize Squidex
        uses: ./.github/actions/squidex-sync
        with:
          environment-name: ${{ inputs.environment-name }}
          app: crn
          squidex-app-name: ${{ steps.setup.outputs.crn-squidex-app-name }}
          squidex-ci-client-id: ${{ steps.setup.outputs.crn-squidex-ci-client-id }}
          squidex-ci-client-secret: ${{ secrets.CRN_SQUIDEX_CI_CLIENT_SECRET }}
          squidex-shared-secret: ${{ secrets.CRN_SQUIDEX_SHARED_SECRET }}

  gp2-squidex-schema:
    needs: [gp2-sls-deploy]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-name }}
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:0f5eee65db0ad426fd10ff52113aeeb0ab5d1ec1
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Synchronize Squidex
        if: ${{ inputs.environment-name=='Development' || inputs.environment-name=='Production' }}
        uses: ./.github/actions/squidex-sync
        with:
          environment-name: ${{ inputs.environment-name }}
          app: gp2
          squidex-app-name: ${{ steps.setup.outputs.gp2-squidex-app-name }}
          squidex-ci-client-id: ${{ steps.setup.outputs.gp2-squidex-ci-client-id }}
          squidex-ci-client-secret: ${{ secrets.GP2_SQUIDEX_CI_CLIENT_SECRET }}
          squidex-shared-secret: ${{ secrets.GP2_SQUIDEX_SHARED_SECRET }}
      - name: Synchronize Squidex
        if: ${{  inputs.environment-name=='Branch' }}
        run: |
          echo "App name: " $SQUIDEX_APP_NAME " Client Id: " $SQUIDEX_CI_CLIENT_ID
        env:
          SQUIDEX_APP_NAME: ${{ steps.setup.outputs.gp2-squidex-app-name }}
          SQUIDEX_CI_CLIENT_ID: ${{ steps.setup.outputs.gp2-squidex-ci-client-id }}

  ses:
    needs: [crn-sls-deploy]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-name }}
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:0f5eee65db0ad426fd10ff52113aeeb0ab5d1ec1
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Cache build output
        uses: ./.github/actions/cache-build
        with:
          cache-prefix: ${{ steps.setup.outputs.cache-prefix-frontend }}
          environment-name: ${{ inputs.environment-name }}
      - name: Cache build typecheck output
        uses: ./.github/actions/cache-unplugged
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Deploy
        if: ${{ inputs.environment-name=='Development' || inputs.environment-name=='Production' }}
        run: |
          yarn workspace @asap-hub/crn-messages deploy $SES_REGION
          yarn workspace @asap-hub/gp2-messages deploy $SES_REGION
        env:
          APP_ORIGIN: ${{ steps.setup.outputs.crn-app-url }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SES_REGION: ${{ steps.setup.outputs.ses-region }}
