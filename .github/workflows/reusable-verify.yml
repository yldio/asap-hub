name: Reusable verify

on:
  workflow_call:
    inputs:
      environment-name:
        description: 'The environment name'
        required: true
        type: string
    secrets:
      SQUIDEX_CLIENT_SECRET:
        description: 'Squidex Client Secret'
        required: true

jobs:
  sls:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:0f5eee65db0ad426fd10ff52113aeeb0ab5d1ec1
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Test
        run: |
          yarn test:e2e
        env:
          CRN_API_URL: ${{ steps.setup.outputs.crn-api-url }}

  test-e2e:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:focal
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Cache build output
        uses: ./.github/actions/cache-unplugged
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Install Playwright
        if: ${{ inputs.environment-name=='Branch' }}
        run: |
          yarn workspace @asap-hub/e2e-tests run playwright install
      - name: Test
        if: ${{ inputs.environment-name=='Branch' }}
        run: |
          yarn workspace @asap-hub/e2e-tests run playwright test
        env:
          CRN_APP_URL: ${{ steps.setup.outputs.crn-app-url }}

  schema:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-name }}
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:0f5eee65db0ad426fd10ff52113aeeb0ab5d1ec1
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Verify
        if: ${{ inputs.environment-name=='Branch' }}
        run: |
          yarn schema:update
          git diff --exit-code ./apps/crn-server/src/autogenerated-gql/
        env:
          SQUIDEX_APP_NAME: ${{ steps.setup.outputs.squidex-app-name }}
          SQUIDEX_BASE_URL: ${{ steps.setup.outputs.squidex-base-url }}
          SQUIDEX_CLIENT_ID: ${{ steps.setup.outputs.squidex-client-id }}
          SQUIDEX_CLIENT_SECRET: ${{ secrets.SQUIDEX_CLIENT_SECRET }}

  register-release:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-name }}
    container:
      image: ghcr.io/yldio/asap-hub/node-python-sq:0f5eee65db0ad426fd10ff52113aeeb0ab5d1ec1
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        id: setup
        uses: ./.github/actions/setup-environment
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Cache rebuild output
        uses: ./.github/actions/cache-unplugged
        with:
          environment-name: ${{ inputs.environment-name }}
      - name: Register Sentry
        if: ${{ inputs.environment-name=='Development' || inputs.environment-name=='Production' }}
        run: |
          yarn run release:frontend
        env:
          FRONTEND_SENTRY_RELEASE_AUTH_TOKEN: ${{ secrets.FRONTEND_SENTRY_RELEASE_AUTH_TOKEN }}
          REACT_APP_RELEASE: ${{ steps.setup.outputs.app-release }}
