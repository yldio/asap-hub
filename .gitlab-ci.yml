.tmpl:master_rules: &tmpl_master_rules
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'
      when: always
  stage: deploy
  variables:
    SLS_STAGE: production

.tmpl:branch_rules: &tmpl_branch_rules
  rules:
    - if: $CI_EXTERNAL_PULL_REQUEST_IID
      when: always
  stage: deploy
  variables:
    SLS_STAGE: $CI_COMMIT_REF_SLUG

.tmpl:branch_remove_rules: &tmpl_branch_remove_rules
  rules:
    - if: $CI_EXTERNAL_PULL_REQUEST_IID
      when: manual
      allow_failure: true
  stage: deploy
  variables:
    GIT_CHECKOUT: 0
    SLS_STAGE: $CI_COMMIT_REF_SLUG

.tmpl:deploy: &tmpl_deploy
  artifacts:
    reports:
      dotenv: deploy.env
  script:
    - yarn pnpify serverless deploy --verbose
    - echo "APP_URL=$(yarn pnpify serverless info --verbose | grep -w "CloudFrontDistributionDomain" | cut -d ' ' -f2)" >> deploy.env
  dependencies:
    - build
    - build:native-deps

image: node:12

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_EXTERNAL_PULL_REQUEST_IID

stages:
  - build
  - test
  - deploy

# stage test

check:packages:
  script:
    - yarn install --immutable --immutable-cache
  needs: []
  stage: test

check:constraints:
  script:
    - yarn constraints
  needs: []
  stage: test

check:format:
  script:
    - yarn run lint:format
  needs: []
  stage: test

test:
  script:
    - yarn run test --coverage
  artifacts:
    paths:
      - coverage
  needs:
    - build
  stage: test

# stage build

build:
  script:
    - yarn run build
  artifacts:
    paths:
      - 'packages/*/build'
      - 'apps/*/build'
  needs: []
  stage: build

build:native-deps:
  script:
    - yarn rebuild
  artifacts:
    paths:
      - .yarn/unplugged
  needs: []
  stage: build

# stage deploy

deploy:sls:master:
  <<: *tmpl_master_rules
  <<: *tmpl_deploy
  environment:
    name: production
    url: https://$APP_URL

deploy:sls:branch:
  <<: *tmpl_branch_rules
  <<: *tmpl_deploy
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: https://$APP_URL
    on_stop: deploy:sls:branch_remove
  needs:
    - build
    - build:native-deps

deploy:sls:branch_remove:
  <<: *tmpl_branch_remove_rules
  dependencies:
    - build:native-deps
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  script:
    - git checkout $CI_COMMIT_SHA # the branch may not exist
    - yarn pnpify serverless remove --verbose
