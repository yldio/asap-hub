# https://gitlab.com/yldio/asap-hub/-/ci/lint
include:
  - 'ci/.gitlab-ci.ses.yml'
  - 'ci/.gitlab-ci.integration.yml'

.tmpl:master: &tmpl_master
  rules: &tmpl_master_rules
    - if: $CI_COMMIT_BRANCH == 'master'
  variables: &tmpl_master_variables
    SLS_STAGE: production

.tmpl:branch: &tmpl_branch
  rules:
    - if: $CI_EXTERNAL_PULL_REQUEST_IID
  variables: &tmpl_branch_variables
    SLS_STAGE: $CI_EXTERNAL_PULL_REQUEST_IID

.tmpl:deploy: &tmpl_deploy
  script:
    - yarn sls deploy --verbose
  variables: &tmpl_deploy_variables
    NODE_ENV: production
    NODE_OPTIONS: '--max_old_space_size=4096'
  dependencies:
    - build:ts
    - build:native

variables:
  ASAP_HOSTNAME: hub.asap.science
  PLAYWRIGHT_BROWSERS_PATH: 0
  BASE_NODE_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH/node:14.17-alpine

image: $BASE_NODE_IMAGE

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_EXTERNAL_PULL_REQUEST_IID

stages:
  - build
  - test
  - prepare-dev
  - deploy-dev
  - verify-dev
  - prepare-prod
  - deploy-prod
  - verify-prod

###############
# stage build #
###############

build:ts:
  image: $INTEGRATION_DOCKER_IMAGE
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'
      variables:
        REACT_APP_SENTRY_DSN: ${REACT_APP_SENTRY_DSN_DEV}
    - if: $CI_COMMIT_BRANCH != 'master'
      variables:
        REACT_APP_SENTRY_DSN: ''
  artifacts:
    expire_in: 2 weeks
    paths:
      - 'packages/*/build*'
      - 'apps/*/build*'
  script:
    - source ci/env-setup.sh
    - export REACT_APP_API_BASE_URL=$ASAP_API_URL
    - export REACT_APP_ALGOLIA_INDEX=$ALGOLIA_INDEX
    - export REACT_APP_ALGOLIA_APP_ID=$(aws ssm get-parameter --name "algolia-app-id-dev" --query Parameter.Value --output text)
    - export REACT_APP_RELEASE=${CI_PIPELINE_ID}-dev
    - export REACT_APP_SENTRY_DSN=$REACT_APP_SENTRY_DSN
    - export REACT_APP_ENVIRONMENT="development"
    - yarn run build
    - export CI_REPO_OWNER="$CI_PROJECT_NAMESPACE"
    - export CI_REPO_NAME="$CI_PROJECT_NAME"
    - export CI_BRANCH="$CI_COMMIT_BRANCH"
    - yarn bundlewatch
  needs: []
  stage: build

build:native:
  artifacts:
    expire_in: 2 weeks
    paths:
      - '.yarn/unplugged'
  script:
    - yarn rebuild
  needs: []
  stage: build

##############
# stage test #
##############

.tmpl:test: &tmpl_test
  script:
    - echo "no script property found"
  needs: []
  stage: test

check:packages:
  <<: *tmpl_test
  script:
    - yarn install --immutable --immutable-cache

check:constraints:
  <<: *tmpl_test
  script:
    - yarn constraints

check:format:
  <<: *tmpl_test
  script:
    - yarn run lint:format

test:unit:
  <<: *tmpl_test
  artifacts:
    expire_in: 5 day
    paths:
      - coverage
  script:
    - yarn run test --coverage
    - yarn codecov

test:browser:
  <<: *tmpl_test
  image: mcr.microsoft.com/playwright:bionic
  script:
    - yarn run test:browser
  needs:
    - build:native

test:build-output:
  <<: *tmpl_test
  script:
    - yarn run test:build-output
  needs:
    - build:ts

####################
# stage deploy-dev #
####################
deploy:squidex:branch:
  <<: *tmpl_branch
  image: $INTEGRATION_DOCKER_IMAGE
  stage: deploy-dev
  environment:
    name: review/$CI_EXTERNAL_PULL_REQUEST_IID
    url: https://$CI_EXTERNAL_PULL_REQUEST_IID.$ASAP_HOSTNAME
    auto_stop_in: 3 days
  variables:
    <<: *tmpl_branch_variables
  script:
    - export SQUIDEX_APP_NAME=${CI_EXTERNAL_PULL_REQUEST_IID}
    - export SQUIDEX_CLIENT_ID=$SQUIDEX_TEST_CLIENT_ID
    - export SQUIDEX_CLIENT_SECRET=$SQUIDEX_TEST_CLIENT_SECRET
    - python ci/integration/scripts/create-app.py
    - export MOST_RECENT_BACKUP=$(aws s3api list-objects-v2 --bucket "asap-hub-dev-data-backup" --query 'sort_by(Contents, &LastModified)[-1].Key' --output=text)
    - aws s3api get-object --bucket "asap-hub-dev-data-backup" --key $MOST_RECENT_BACKUP  $MOST_RECENT_BACKUP
    - tar -xf $MOST_RECENT_BACKUP
    - ./ci/config-squidex-rules.sh ./backup/rules
    - ./ci/import-squidex-data.sh

deploy:sls:branch:
  <<: *tmpl_branch
  <<: *tmpl_deploy
  image: $INTEGRATION_DOCKER_IMAGE
  stage: deploy-dev
  variables:
    <<: *tmpl_branch_variables
    <<: *tmpl_deploy_variables
  script:
    - export SQUIDEX_APP_NAME=${CI_EXTERNAL_PULL_REQUEST_IID}
    - export SQUIDEX_CLIENT_ID=$SQUIDEX_TEST_CLIENT_ID
    - export SQUIDEX_CLIENT_SECRET=$SQUIDEX_TEST_CLIENT_SECRET
    - source ci/env-setup.sh
    - yarn sls deploy --verbose

deploy:sls:development:
  <<: *tmpl_master
  <<: *tmpl_deploy
  environment:
    name: dev
    url: $ASAP_APP_URL
  variables:
    <<: *tmpl_master_variables
    <<: *tmpl_deploy_variables
    SLS_STAGE: 'dev'
  stage: deploy-dev
  needs:
    - build:ts
    - build:native
    - sync:squidex:dev

####################
# stage verify-dev #
####################

verify:branch:
  <<: *tmpl_branch
  stage: verify-dev
  variables:
    API_URL: https://api-$CI_EXTERNAL_PULL_REQUEST_IID.$ASAP_HOSTNAME
  needs:
    - build:ts
    - build:native
    - deploy:squidex:branch
    - deploy:sls:branch
  script:
    - ASAP_API_URL=$API_URL yarn test:e2e

report:frontend:release:dev:
  <<: *tmpl_master
  stage: verify-dev
  needs:
    - build:ts
    - build:native
    - deploy:sls:development
  script:
    - yarn install --immutable --immutable-cache
    - export FRONTEND_SENTRY_RELEASE_AUTH_TOKEN=$FRONTEND_SENTRY_RELEASE_AUTH_TOKEN
    - export REACT_APP_RELEASE=${CI_PIPELINE_ID}-dev
    - yarn run release:frontend

verify:development:
  <<: *tmpl_master
  stage: verify-dev
  environment:
    name: dev
    url: $ASAP_APP_URL
  needs:
    - build:ts
    - build:native
    - deploy:sls:development
  script:
    - yarn test:e2e

#####################
# stage deploy-prod #
#####################

deploy:sls:production:
  <<: *tmpl_master
  <<: *tmpl_deploy
  artifacts:
    paths:
      - 'apps/*/build*'
      - 'packages/*/build*'
  before_script:
    - export AUTH_FRONTEND_BASE_URL=$ASAP_APP_URL/.auth/
    - export REACT_APP_API_BASE_URL=$ASAP_API_URL
    - export REACT_APP_RELEASE=${CI_PIPELINE_ID}-production
    - export REACT_APP_ENVIRONMENT="production"
    - export REACT_APP_ALGOLIA_INDEX="asap-hub_research_outputs_prod"
    - export REACT_APP_ALGOLIA_APP_ID=$(aws ssm get-parameter --name "algolia-app-id-prod" --query Parameter.Value --output text)
    - yarn run build # create production build
  environment:
    name: production
    url: $ASAP_APP_URL
  variables:
    <<: *tmpl_master_variables
    <<: *tmpl_deploy_variables
  stage: deploy-prod
  needs:
    - build:ts
    - build:native
    - test:unit
    - test:browser
    - test:build-output
    - sync:squidex:production
    - verify:development

#####################
# stage verify-prod #
#####################

report:frontend:release:production:
  <<: *tmpl_master
  stage: verify-prod
  needs:
    - deploy:sls:production
  script:
    - yarn install --immutable --immutable-cache
    - export FRONTEND_SENTRY_RELEASE_AUTH_TOKEN=$FRONTEND_SENTRY_RELEASE_AUTH_TOKEN
    - export REACT_APP_RELEASE=${CI_PIPELINE_ID}-production
    - yarn run release:frontend

verify:production:
  <<: *tmpl_master
  stage: verify-prod
  environment:
    name: production
    url: $ASAP_APP_URL
  needs:
    - build:ts
    - build:native
    - deploy:sls:production
  script:
    - yarn test:e2e
