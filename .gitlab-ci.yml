# https://gitlab.com/yldio/asap-hub/-/ci/lint

.tmpl:master_deploy_rules: &tmpl_master_deploy_rules
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'
  variables: &tmpl_master_deploy_variables
    SLS_STAGE: production

.tmpl:branch_deploy_rules: &tmpl_branch_deploy_rules
  rules:
    - if: $CI_EXTERNAL_PULL_REQUEST_IID
  variables: &tmpl_branch_deploy_variables
    SLS_STAGE: $CI_COMMIT_REF_SLUG

.tmpl:branch_remove_rules: &tmpl_branch_remove_rules
  rules:
    - if: $CI_EXTERNAL_PULL_REQUEST_IID
      when: manual
      allow_failure: true
  variables: &tmpl_branch_remove_variables
    GIT_CHECKOUT: 0
    SLS_STAGE: $CI_COMMIT_REF_SLUG

.tmpl:prepare:cert: &tmpl_prepare_cert
  artifacts:
    paths:
      - .env
  image:
    name: hashicorp/terraform:light
    entrypoint: ['/bin/sh', '-c']
  script:
    - ./ci/tf.sh
  needs: []
  stage: prepare

.tmpl:deploy: &tmpl_deploy
  script:
    - "[ -f .env ] && export $(grep -v '^#' .env | xargs)"
    - yarn sls deploy --verbose
  stage: deploy

.tmpl:prepare: &tmpl_prepare
  image:
    name: amazon/aws-cli
    entrypoint: ['']
  script:
    - exit_code=0
    - stack=$(aws cloudformation describe-stacks --stack-name $SLS_STAGE || exit_code=$?)
    - |
      if [[ "$exit_code" != 0 ]] && echo $stack | grep -nqe "UPDATE_IN_PROGRESS"; then
        aws cloudformation cancel-update-stack --stack-name $SLS_STAGE
        aws cloudformation wait stack-update-rollback-complete --stack-name $SLS_STAGE
      fi;
    - |
      if [[ "$exit_code" != 0 ]] && echo $stack | grep -nqe "CREATE_IN_PROGRESS"; then
        aws cloudformation wait stack-create-complete --stack-name $SLS_STAGE
      fi;
  stage: prepare

.tmpl:node_production_variables: &tmpl_node_production_variables
  NODE_ENV: production

image: node:12

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_EXTERNAL_PULL_REQUEST_IID

variables:
  BASE_URL: asap.yld.io

stages:
  - build
  - test
  - prepare
  - deploy

# stage test

check:packages:
  script:
    - yarn install --immutable --immutable-cache
  needs: []
  stage: test

check:constraints:
  script:
    - yarn constraints
  needs: []
  stage: test

check:format:
  script:
    - yarn run lint:format
  needs: []
  stage: test

test:
  script:
    - yarn run test --coverage
  artifacts:
    paths:
      - coverage
  needs:
    - build
  stage: test

# stage build

build:
  script:
    - yarn run build
  variables:
    <<: *tmpl_node_production_variables
  artifacts:
    paths:
      - 'packages/*/build'
      - 'apps/*/build'
  needs: []
  stage: build

build:native-deps:
  script:
    - yarn rebuild
  artifacts:
    paths:
      - .yarn/unplugged
  needs: []
  stage: build

prepare:sls:master:
  <<: *tmpl_prepare
  <<: *tmpl_master_deploy_rules
  variables:
    <<: *tmpl_master_deploy_variables
  needs:
    - test

prepare:sls:branch:
  <<: *tmpl_prepare
  <<: *tmpl_branch_deploy_rules
  variables:
    <<: *tmpl_branch_deploy_variables
  needs:
    - build
    - build:native-deps

prepare:cert:master:
  <<: *tmpl_master_deploy_rules
  <<: *tmpl_prepare_cert
  variables:
    <<: *tmpl_master_deploy_variables
    TF_VAR_domain: $BASE_URL

prepare:cert:branch:
  <<: *tmpl_branch_deploy_rules
  <<: *tmpl_prepare_cert
  variables:
    <<: *tmpl_branch_deploy_variables
    TF_VAR_domain: $BASE_URL
    TF_VAR_record: $CI_COMMIT_REF_SLUG

# stage deploy

deploy:sls:master:
  <<: *tmpl_deploy
  <<: *tmpl_master_deploy_rules
  variables:
    <<: *tmpl_node_production_variables
    <<: *tmpl_master_deploy_variables
  environment:
    name: production
    url: https://$BASE_URL
  needs:
    - build
    - build:native-deps
    - prepare:sls:master
    - prepare:cert:master
  dependencies:
    - build
    - build:native-deps
    - prepare:cert:master

deploy:sls:branch:
  <<: *tmpl_deploy
  <<: *tmpl_branch_deploy_rules
  variables:
    <<: *tmpl_node_production_variables
    <<: *tmpl_branch_deploy_variables
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: https://$CI_COMMIT_REF_SLUG.$BASE_URL
    on_stop: deploy:sls:branch_remove
  needs:
    - build
    - build:native-deps
    - prepare:sls:branch
    - prepare:cert:branch
  dependencies:
    - build
    - build:native-deps
    - prepare:cert:branch

deploy:sls:branch_remove:
  <<: *tmpl_branch_remove_rules
  dependencies:
    - build:native-deps
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  script:
    - git checkout $CI_COMMIT_SHA # the branch may not exist
    - yarn sls remove --verbose
  stage: deploy
