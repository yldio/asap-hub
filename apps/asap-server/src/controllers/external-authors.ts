import { ListExternalAuthorResponse } from '@asap-hub/model';
import { SquidexGraphqlClient } from '@asap-hub/squidex';
import { parseGraphQLExternalAuthor } from '../entities';
import {
  FetchExternalAuthorsQuery,
  FetchExternalAuthorsQueryVariables,
} from '../autogenerated-gql/graphql';
import { FETCH_EXTERNAL_AUTHORS } from '../queries/external-authors.queries';
import { FetchOptions } from '../utils/types';

export interface ExternalAuthorsController {
  fetch(options: FetchOptions): Promise<ListExternalAuthorResponse>;
}

export default class ExternalAuthors implements ExternalAuthorsController {
  squidexGraphlClient: SquidexGraphqlClient;

  constructor(squidexGraphlClient: SquidexGraphqlClient) {
    this.squidexGraphlClient = squidexGraphlClient;
  }

  async fetch(options: FetchOptions): Promise<ListExternalAuthorResponse> {
    const { take = 8, skip = 0 } = options;

    const { queryExternalAuthorsContentsWithTotal } =
      await this.squidexGraphlClient.request<
        FetchExternalAuthorsQuery,
        FetchExternalAuthorsQueryVariables
      >(FETCH_EXTERNAL_AUTHORS, { top: take, skip });

    if (queryExternalAuthorsContentsWithTotal === null) {
      return {
        total: 0,
        items: [],
      };
    }

    const { total, items } = queryExternalAuthorsContentsWithTotal;

    if (items === null) {
      return {
        total: 0,
        items: [],
      };
    }

    return {
      total,
      items: items.map(parseGraphQLExternalAuthor),
    };
  }
}
