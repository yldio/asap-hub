/* eslint-disable */
import * as graphql from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
  '\n  fragment ResearchOutputContent on ResearchOutputs {\n    id\n    created\n    lastModified\n    flatData {\n      title\n      type\n      subtype\n      description\n      link\n      addedDate\n      publishDate\n      doi\n      labCatalogNumber\n      accession\n      rrid\n      tags\n      lastUpdatedPartial\n      accessInstructions\n      sharingStatus\n      asapFunded\n      usedInAPublication\n      authors {\n        __typename\n        ... on Users {\n          id\n          created\n          lastModified\n          flatData {\n            avatar {\n              id\n            }\n            biography\n            degree\n            email\n            contactEmail\n            firstName\n            institution\n            jobTitle\n            lastModifiedDate\n            lastName\n            country\n            city\n            onboarded\n            orcid\n            orcidLastModifiedDate\n            orcidLastSyncDate\n            orcidWorks {\n              doi\n              id\n              lastModifiedDate\n              publicationDate\n              title\n              type\n            }\n            questions {\n              question\n            }\n            skills\n            skillsDescription\n            teams {\n              role\n              approach\n              responsibilities\n              id {\n                id\n                flatData {\n                  displayName\n                  proposal {\n                    id\n                  }\n                }\n              }\n            }\n            social {\n              github\n              googleScholar\n              linkedIn\n              researcherId\n              researchGate\n              twitter\n              website1\n              website2\n            }\n            role\n            responsibilities\n            reachOut\n            labs {\n              id\n              flatData {\n                name\n              }\n            }\n          }\n        }\n        ... on ExternalAuthors {\n          id\n          created\n          lastModified\n          flatData {\n            name\n            orcid\n          }\n        }\n      }\n      labs {\n        id\n        flatData {\n          name\n        }\n      }\n    }\n    referencingTeamsContents @include(if: $withTeams) {\n      id\n      created\n      lastModified\n      flatData {\n        displayName\n      }\n      referencingUsersContents {\n        flatData {\n          email\n          teams {\n            role\n            id {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n':
    graphql.ResearchOutputContentFragmentDoc,
  '\n  query FetchResearchOutput($id: String!, $withTeams: Boolean!) {\n    findResearchOutputsContent(id: $id) {\n      ...ResearchOutputContent\n    }\n  }\n  \n':
    graphql.FetchResearchOutputDocument,
  '\n  query FetchResearchOutputs(\n    $top: Int\n    $skip: Int\n    $filter: String\n    $withTeams: Boolean!\n  ) {\n    queryResearchOutputsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "created desc"\n    ) {\n      total\n      items {\n        ...ResearchOutputContent\n      }\n    }\n  }\n  \n':
    graphql.FetchResearchOutputsDocument,
};

export function gql(
  source: '\n  fragment ResearchOutputContent on ResearchOutputs {\n    id\n    created\n    lastModified\n    flatData {\n      title\n      type\n      subtype\n      description\n      link\n      addedDate\n      publishDate\n      doi\n      labCatalogNumber\n      accession\n      rrid\n      tags\n      lastUpdatedPartial\n      accessInstructions\n      sharingStatus\n      asapFunded\n      usedInAPublication\n      authors {\n        __typename\n        ... on Users {\n          id\n          created\n          lastModified\n          flatData {\n            avatar {\n              id\n            }\n            biography\n            degree\n            email\n            contactEmail\n            firstName\n            institution\n            jobTitle\n            lastModifiedDate\n            lastName\n            country\n            city\n            onboarded\n            orcid\n            orcidLastModifiedDate\n            orcidLastSyncDate\n            orcidWorks {\n              doi\n              id\n              lastModifiedDate\n              publicationDate\n              title\n              type\n            }\n            questions {\n              question\n            }\n            skills\n            skillsDescription\n            teams {\n              role\n              approach\n              responsibilities\n              id {\n                id\n                flatData {\n                  displayName\n                  proposal {\n                    id\n                  }\n                }\n              }\n            }\n            social {\n              github\n              googleScholar\n              linkedIn\n              researcherId\n              researchGate\n              twitter\n              website1\n              website2\n            }\n            role\n            responsibilities\n            reachOut\n            labs {\n              id\n              flatData {\n                name\n              }\n            }\n          }\n        }\n        ... on ExternalAuthors {\n          id\n          created\n          lastModified\n          flatData {\n            name\n            orcid\n          }\n        }\n      }\n      labs {\n        id\n        flatData {\n          name\n        }\n      }\n    }\n    referencingTeamsContents @include(if: $withTeams) {\n      id\n      created\n      lastModified\n      flatData {\n        displayName\n      }\n      referencingUsersContents {\n        flatData {\n          email\n          teams {\n            role\n            id {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n',
): typeof documents['\n  fragment ResearchOutputContent on ResearchOutputs {\n    id\n    created\n    lastModified\n    flatData {\n      title\n      type\n      subtype\n      description\n      link\n      addedDate\n      publishDate\n      doi\n      labCatalogNumber\n      accession\n      rrid\n      tags\n      lastUpdatedPartial\n      accessInstructions\n      sharingStatus\n      asapFunded\n      usedInAPublication\n      authors {\n        __typename\n        ... on Users {\n          id\n          created\n          lastModified\n          flatData {\n            avatar {\n              id\n            }\n            biography\n            degree\n            email\n            contactEmail\n            firstName\n            institution\n            jobTitle\n            lastModifiedDate\n            lastName\n            country\n            city\n            onboarded\n            orcid\n            orcidLastModifiedDate\n            orcidLastSyncDate\n            orcidWorks {\n              doi\n              id\n              lastModifiedDate\n              publicationDate\n              title\n              type\n            }\n            questions {\n              question\n            }\n            skills\n            skillsDescription\n            teams {\n              role\n              approach\n              responsibilities\n              id {\n                id\n                flatData {\n                  displayName\n                  proposal {\n                    id\n                  }\n                }\n              }\n            }\n            social {\n              github\n              googleScholar\n              linkedIn\n              researcherId\n              researchGate\n              twitter\n              website1\n              website2\n            }\n            role\n            responsibilities\n            reachOut\n            labs {\n              id\n              flatData {\n                name\n              }\n            }\n          }\n        }\n        ... on ExternalAuthors {\n          id\n          created\n          lastModified\n          flatData {\n            name\n            orcid\n          }\n        }\n      }\n      labs {\n        id\n        flatData {\n          name\n        }\n      }\n    }\n    referencingTeamsContents @include(if: $withTeams) {\n      id\n      created\n      lastModified\n      flatData {\n        displayName\n      }\n      referencingUsersContents {\n        flatData {\n          email\n          teams {\n            role\n            id {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchResearchOutput($id: String!, $withTeams: Boolean!) {\n    findResearchOutputsContent(id: $id) {\n      ...ResearchOutputContent\n    }\n  }\n  \n',
): typeof documents['\n  query FetchResearchOutput($id: String!, $withTeams: Boolean!) {\n    findResearchOutputsContent(id: $id) {\n      ...ResearchOutputContent\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchResearchOutputs(\n    $top: Int\n    $skip: Int\n    $filter: String\n    $withTeams: Boolean!\n  ) {\n    queryResearchOutputsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "created desc"\n    ) {\n      total\n      items {\n        ...ResearchOutputContent\n      }\n    }\n  }\n  \n',
): typeof documents['\n  query FetchResearchOutputs(\n    $top: Int\n    $skip: Int\n    $filter: String\n    $withTeams: Boolean!\n  ) {\n    queryResearchOutputsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "created desc"\n    ) {\n      total\n      items {\n        ...ResearchOutputContent\n      }\n    }\n  }\n  \n'];

export function gql(source: string): unknown;
export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
