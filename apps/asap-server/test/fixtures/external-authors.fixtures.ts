import {
  ExternalAuthorResponse,
  ListExternalAuthorResponse,
} from '@asap-hub/model';
import { WebhookPayload, ExternalAuthor } from '@asap-hub/squidex';
import { EventBridgeEvent } from 'aws-lambda';
import {
  FetchExternalAuthorsQuery,
  FetchExternalAuthorQuery,
} from '../../src/autogenerated-gql/graphql';

import {
  ExternalAuthorEventType,
  ExternalAuthorSquidexEventType,
  SquidexWebhookExternalAuthorPayload,
} from '../../src/handlers/webhooks/webhook-external-author';
import { createEventBridgeEventMock } from '../helpers/events';

export const getSquidexExternalAuthorGraphqlResponse =
  (): FetchExternalAuthorQuery => ({
    findExternalAuthorsContent: getGraphQLExternalAuthor(),
  });
export const getSquidexExternalAuthorsGraphqlResponse =
  (): FetchExternalAuthorsQuery =>
    generateGraphqlFetchExternalAuthorsResponse([getGraphQLExternalAuthor()]);

const generateGraphqlFetchExternalAuthorsResponse = (
  items: NonNullable<FetchExternalAuthorQuery['findExternalAuthorsContent']>[],
): FetchExternalAuthorsQuery => ({
  queryExternalAuthorsContentsWithTotal: {
    total: items.length,
    items,
  },
});

export const getGraphqlResponseFetchExternalAuthors =
  (): FetchExternalAuthorsQuery =>
    generateGraphqlFetchExternalAuthorsResponse([getGraphQLExternalAuthor()]);

export const getGraphQLExternalAuthor = (
  externalAuthor: Partial<
    NonNullable<FetchExternalAuthorQuery['findExternalAuthorsContent']>
  > = {},
): NonNullable<FetchExternalAuthorQuery['findExternalAuthorsContent']> => ({
  id: 'external-author-id-1',
  lastModified: '2021-11-26T15:33:18Z',
  version: 45,
  created: '2021-11-23T20:45:22Z',
  ...externalAuthor,
  flatData: {
    name: 'external author one',
    orcid: 'orcid-1',
  },
});

export const getExternalAuthorResponse = (): ExternalAuthorResponse => ({
  id: 'external-author-id-1',
  displayName: 'external author one',
  orcid: 'orcid-1',
});

export const getListExternalAuthorResponse =
  (): ListExternalAuthorResponse => ({
    total: 2,
    items: [
      getExternalAuthorResponse(),
      {
        id: 'external-author-id-2',
        displayName: 'external author two',
        orcid: 'orcid-2',
      },
    ],
  });

export const externalAuthorPublishedEvent: WebhookPayload<ExternalAuthor> = {
  type: 'ExternalAuthorsPublished',
  timestamp: '2021-02-15T13:11:25Z',
  payload: {
    $type: 'EnrichedContentEvent',
    type: 'Published',
    id: 'externalAuthorId',
    created: '2020-07-31T15:52:33Z',
    lastModified: '2020-07-31T15:52:33Z',
    version: 42,
    data: {
      name: { iv: 'External Author' },
      orcid: { iv: 'orcid-1' },
    },
  },
};

export const getUserWebhookPayload = (
  id: string,
  type: ExternalAuthorSquidexEventType,
): SquidexWebhookExternalAuthorPayload => ({
  type,
  timestamp: '2021-02-15T13:11:25Z',
  payload: {
    $type: 'EnrichedContentEvent',
    type: 'Updated',
    id,
    created: '2021-02-15T13:11:25Z',
    lastModified: '2021-02-15T13:11:25Z',
    version: 1,
    data: {},
  },
});

export const getExternalAuthorWebhookPayload = (
  id: string,
  type: ExternalAuthorSquidexEventType,
): SquidexWebhookExternalAuthorPayload => ({
  type,
  timestamp: '2021-02-15T13:11:25Z',
  payload: {
    $type: 'EnrichedContentEvent',
    type: 'Updated',
    id,
    created: '2021-02-15T13:11:25Z',
    lastModified: '2021-02-15T13:11:25Z',
    version: 1,
    data: {},
  },
});

export const getExternalAuthorEvent = (
  id: string,
  squidexEvent: ExternalAuthorSquidexEventType,
  eventType: ExternalAuthorEventType,
): EventBridgeEvent<
  ExternalAuthorEventType,
  SquidexWebhookExternalAuthorPayload
> =>
  createEventBridgeEventMock(
    getExternalAuthorWebhookPayload(id, squidexEvent),
    eventType,
    id,
  );
