import { ListTeamResponse, TeamResponse } from '@asap-hub/model';
import { Team, WebhookPayload } from '@asap-hub/squidex';
import {
  FetchTeamQuery,
  FetchTeamsQuery,
} from '../../src/autogenerated-gql/graphql';
import { TeamsEventType } from '../../src/handlers/webhooks/webhook-teams';
import { getGraphQLUser } from './users.fixtures';
import { createEventBridgeEventMock } from '../helpers/events';

export const getListTeamResponse = (): ListTeamResponse => ({
  total: 1,
  items: [getTeamResponse()],
});

export const getTeamResponse = (): TeamResponse => ({
  id: 'team-id-1',
  displayName: 'Team A',
  lastModifiedDate: '2020-11-26T11:56:04.000Z',
  labCount: 2,
  expertiseAndResourceTags: ['Animal resources'],
  members: [
    {
      id: 'user-id-1',
      email: 'H@rdy.io',
      firstName: 'Tom',
      lastName: 'Hardy',
      displayName: 'Tom Hardy',
      role: 'Lead PI (Core Leadership)',
      avatarUrl: undefined,
      labs: [
        { id: 'cd7be4902', name: 'Brighton' },
        { id: 'cd7be4903', name: 'Liverpool' },
      ],
    },
  ],
  projectTitle:
    'The genome-microbiome axis in the cause of Parkinson disease: Mechanistic insights and therapeutic implications from experimental models and a genetically stratified patient population.',
  proposalURL: '4cfb1b7b-bafe-4fca-b2ab-197e84d98996',
  tools: [],
  outputs: [],
});

export type GraphTeamTool = NonNullable<
  NonNullable<FetchTeamQuery['findTeamsContent']>['flatData']['tools']
>[number];
export type GraphTeamOutputs = NonNullable<
  NonNullable<FetchTeamQuery['findTeamsContent']>['flatData']['outputs']
>;

export const getSquidexGraphqlTeam = ({
  tools = [],
  id = 'team-id-1',
  outputs = [],
}: Partial<{
  tools: GraphTeamTool[];
  id: string;
  outputs: GraphTeamOutputs;
}>): NonNullable<FetchTeamQuery['findTeamsContent']> => {
  const referencingUsersContents = getGraphQLUser();
  referencingUsersContents.flatData.teams![0]!.id![0]!.id = id;

  return {
    id,
    created: '2020-09-23T20:33:36Z',
    lastModified: '2020-11-26T11:56:04Z',
    version: 42,
    flatData: {
      applicationNumber: 'ASAP-000420',
      displayName: 'Team A',
      projectSummary: null,
      projectTitle:
        'The genome-microbiome axis in the cause of Parkinson disease: Mechanistic insights and therapeutic implications from experimental models and a genetically stratified patient population.',
      expertiseAndResourceTags: ['Animal resources'],
      proposal: [
        {
          id: '4cfb1b7b-bafe-4fca-b2ab-197e84d98996',
        },
      ],
      tools,
      outputs,
    },
    referencingUsersContents: [referencingUsersContents],
  };
};

export const getSquidexTeamGraphqlResponse = (
  {
    tools = [],
    outputs = [],
  }: Partial<{ tools: GraphTeamTool[]; outputs: GraphTeamOutputs }> = {
    tools: [],
    outputs: [],
  },
): FetchTeamQuery => ({
  findTeamsContent: getSquidexGraphqlTeam({ tools, outputs }),
});

export const getSquidexTeamsGraphqlResponse = (): FetchTeamsQuery => ({
  queryTeamsContentsWithTotal: {
    total: 1,
    items: [getSquidexGraphqlTeam({})],
  },
});

export const getTeamsEvent = (
  eventType: string,
  eventName: string,
  data = {
    displayName: { iv: 'Team 1' },
    applicationNumber: { iv: '12345' },
    expertiseAndResourceTags: { iv: [] },
    proposal: { iv: [] },
    projectTitle: { iv: 'Team Project' },
    projectSummary: { iv: '' },
    tools: { iv: [] },
  },
  dataOld = {
    displayName: { iv: 'Team 1' },
    applicationNumber: { iv: '12345' },
    expertiseAndResourceTags: { iv: [] },
    proposal: { iv: [] },
    projectTitle: { iv: 'Team Project' },
    projectSummary: { iv: '' },
    tools: { iv: [] },
  },
): WebhookPayload<Team> => ({
  type: eventName,
  timestamp: '2021-10-05T12:49:49Z',
  payload: {
    $type: 'EnrichedContentEvent',
    type: eventType,
    id: 'teamId',
    created: '2021-10-04T16:55:30Z',
    lastModified: '2021-10-05T12:49:49Z',
    version: 42,
    data,
    dataOld,
  },
});

export const getTeamsCreated = getTeamsEvent('Published', 'TeamsPublished');
export const getTeamsUpdated = getTeamsEvent('Updated', 'TeamsUpdated');
export const getTeamsDeleted = getTeamsEvent('Deleted', 'TeamsDeleted');

export const getTeamsEventbridgeEvent = (
  id: string,
  squidexEvent:
    | 'TeamsPublished'
    | 'TeamsUpdated'
    | 'TeamsUnpublished'
    | 'TeamsDeleted',
  eventType: TeamsEventType,
) => createEventBridgeEventMock(getTeamsEvent(id, squidexEvent), eventType, id);
