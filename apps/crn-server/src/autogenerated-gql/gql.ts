/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
  '\n  fragment CalendarsContent on Calendars {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      googleCalendarId\n      name\n      color\n      syncToken\n      resourceId\n      expirationDate\n    }\n    referencingGroupsContents {\n      id\n      flatData {\n        active\n      }\n    }\n    referencingWorkingGroupsContents {\n      id\n      flatData {\n        complete\n      }\n    }\n  }\n':
    types.CalendarsContentFragmentDoc,
  '\n  query FetchCalendar($id: String!) {\n    findCalendarsContent(id: $id) {\n      ...CalendarsContent\n    }\n  }\n  \n':
    types.FetchCalendarDocument,
  '\n  query FetchCalendars($top: Int, $skip: Int, $filter: String, $order: String) {\n    queryCalendarsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: $order\n    ) {\n      total\n      items {\n        ...CalendarsContent\n      }\n    }\n  }\n  \n':
    types.FetchCalendarsDocument,
  '\n  query FetchDiscover {\n    queryDiscoverContents {\n      flatData {\n        aboutUs\n        training {\n          ...TutorialsContent\n        }\n        pages {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            shortText\n            text\n            title\n            link\n            linkText\n          }\n        }\n        members {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            email\n            firstName\n            institution\n            jobTitle\n            lastModifiedDate\n            lastName\n          }\n        }\n        membersTeam {\n          id\n        }\n        scientificAdvisoryBoard {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            email\n            firstName\n            institution\n            jobTitle\n            lastModifiedDate\n            lastName\n          }\n        }\n      }\n    }\n  }\n  \n':
    types.FetchDiscoverDocument,
  '\n  fragment EventContent on Events {\n    id\n    lastModified\n    version\n    created\n    flatData {\n      description\n      endDate\n      endDateTimeZone\n      startDate\n      startDateTimeZone\n      meetingLink\n      hideMeetingLink\n      eventLink\n      status\n      hidden\n      tags\n      title\n      notesPermanentlyUnavailable\n      notes\n      notesUpdatedAt\n      videoRecordingPermanentlyUnavailable\n      videoRecording\n      videoRecordingUpdatedAt\n      presentationPermanentlyUnavailable\n      presentation\n      presentationUpdatedAt\n      meetingMaterialsPermanentlyUnavailable\n      meetingMaterials {\n        url\n        title\n      }\n      calendar {\n        flatData {\n          googleCalendarId\n          color\n          name\n        }\n        referencingGroupsContents {\n          ...GroupsContent\n        }\n        referencingWorkingGroupsContents {\n          ...WorkingGroupContent\n        }\n      }\n      thumbnail {\n        id\n      }\n      speakers {\n        team {\n          id\n          flatData {\n            displayName\n            inactiveSince\n          }\n        }\n        user {\n          __typename\n          ... on Users {\n            id\n            flatData {\n              alumniSinceDate\n              alumniLocation\n              firstName\n              lastName\n              onboarded\n              avatar {\n                id\n              }\n              teams {\n                role\n                id {\n                  id\n                }\n              }\n            }\n          }\n          ... on ExternalAuthors {\n            id\n            flatData {\n              name\n              orcid\n            }\n          }\n        }\n      }\n    }\n    referencingResearchOutputsContents {\n      id\n      flatData {\n        documentType\n        type\n        title\n      }\n      referencesTeamsContents {\n        id\n        flatData {\n          displayName\n        }\n      }\n      referencesWorkingGroupsContents {\n        id\n        flatData {\n          title\n        }\n      }\n    }\n  }\n\n  ,\n  \n':
    types.EventContentFragmentDoc,
  '\n  query FetchEvents($top: Int, $skip: Int, $filter: String, $order: String) {\n    queryEventsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: $order\n    ) {\n      total\n      items {\n        ...EventContent\n      }\n    }\n  }\n  \n':
    types.FetchEventsDocument,
  '\n  query FetchEvent($id: String!) {\n    findEventsContent(id: $id) {\n      ...EventContent\n    }\n  }\n  \n':
    types.FetchEventDocument,
  '\n  query FetchGroupCalendar($id: String!) {\n    findGroupsContent(id: $id) {\n      flatData {\n        calendars {\n          id\n        }\n      }\n    }\n  }\n':
    types.FetchGroupCalendarDocument,
  '\n  query FetchWorkingGroupCalendar($id: String!) {\n    findWorkingGroupsContent(id: $id) {\n      flatData {\n        calendars {\n          id\n        }\n      }\n    }\n  }\n':
    types.FetchWorkingGroupCalendarDocument,
  '\n  fragment ExternalAuthorsContent on ExternalAuthors {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      name\n      orcid\n    }\n  }\n':
    types.ExternalAuthorsContentFragmentDoc,
  '\n  query FetchExternalAuthor($id: String!) {\n    findExternalAuthorsContent(id: $id) {\n      ...ExternalAuthorsContent\n    }\n  }\n  \n':
    types.FetchExternalAuthorDocument,
  '\n  query FetchExternalAuthors($top: Int, $skip: Int) {\n    queryExternalAuthorsContentsWithTotal(\n      top: $top\n      skip: $skip\n      orderby: "data/name/iv"\n    ) {\n      total\n      items {\n        ...ExternalAuthorsContent\n      }\n    }\n  }\n  \n':
    types.FetchExternalAuthorsDocument,
  '\n  fragment GroupsContent on Groups {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      name\n      active\n      description\n      tags\n      tools {\n        slack\n        googleDrive\n      }\n      teams {\n        ...TeamsContent\n      }\n      leaders {\n        role\n        inactiveSinceDate\n        user {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            email\n            firstName\n            lastModifiedDate\n            lastName\n            alumniSinceDate\n            jobTitle\n            institution\n            teams {\n              inactiveSinceDate\n              role\n              id {\n                id\n                flatData {\n                  displayName\n                  inactiveSince\n                  proposal {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      calendars {\n        id\n        flatData {\n          color\n          googleCalendarId\n          name\n        }\n      }\n      thumbnail {\n        id\n      }\n    }\n  }\n  \n':
    types.GroupsContentFragmentDoc,
  '\n  query FetchGroups($top: Int, $skip: Int, $filter: String) {\n    queryGroupsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "data/name/iv"\n    ) {\n      total\n      items {\n        ...GroupsContent\n      }\n    }\n  }\n  \n':
    types.FetchGroupsDocument,
  '\n  query FetchGroup($id: String!) {\n    findGroupsContent(id: $id) {\n      ...GroupsContent\n    }\n  }\n  \n':
    types.FetchGroupDocument,
  '\n  fragment LabsContent on Labs {\n    id\n    flatData {\n      name\n    }\n  }\n':
    types.LabsContentFragmentDoc,
  '\n  query FetchLabs($top: Int, $skip: Int, $filter: String) {\n    queryLabsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "data/name/iv"\n    ) {\n      total\n      items {\n        ...LabsContent\n      }\n    }\n  }\n  \n':
    types.FetchLabsDocument,
  '\n  query FetchReminderData(\n    $userId: String!\n    $researchOutputFilter: String!\n    $researchOutputDraftFilter: String!\n    $researchOutputInReviewFilter: String!\n    $researchOutputSwitchToDraftFilter: String!\n    $eventFilter: String!\n  ) {\n    findUsersContent(id: $userId) {\n      referencingWorkingGroupsContents {\n        id\n        flatData {\n          leaders {\n            user {\n              id\n            }\n            role\n          }\n        }\n      }\n      flatData {\n        role\n        teams {\n          id {\n            id\n          }\n          role\n        }\n      }\n    }\n    queryResearchOutputsContents(filter: $researchOutputFilter) {\n      id\n      created\n      status\n      flatData {\n        addedDate\n        documentType\n        title\n        createdBy {\n          flatData {\n            firstName\n            lastName\n          }\n        }\n        teams {\n          id\n          flatData {\n            displayName\n          }\n        }\n        workingGroups {\n          id\n          flatData {\n            title\n          }\n        }\n        statusChangedBy {\n          id\n          flatData {\n            firstName\n            lastName\n          }\n        }\n      }\n    }\n    draftResearchOutputs: queryResearchOutputsContents(\n      filter: $researchOutputDraftFilter\n    ) {\n      id\n      created\n      status\n      flatData {\n        documentType\n        title\n        createdBy {\n          id\n          flatData {\n            firstName\n            lastName\n          }\n        }\n        teams {\n          id\n          flatData {\n            displayName\n          }\n        }\n        workingGroups {\n          id\n          flatData {\n            title\n          }\n        }\n        statusChangedBy {\n          id\n        }\n      }\n    }\n    inReviewResearchOutputs: queryResearchOutputsContents(\n      filter: $researchOutputInReviewFilter\n    ) {\n      id\n      created\n      status\n      flatData {\n        documentType\n        title\n        teams {\n          id\n          flatData {\n            displayName\n          }\n        }\n        workingGroups {\n          id\n          flatData {\n            title\n          }\n        }\n        statusChangedBy {\n          id\n          flatData {\n            firstName\n            lastName\n          }\n        }\n      }\n    }\n    switchToDraftResearchOutputs: queryResearchOutputsContents(\n      filter: $researchOutputSwitchToDraftFilter\n    ) {\n      id\n      created\n      status\n      flatData {\n        documentType\n        title\n        teams {\n          id\n          flatData {\n            displayName\n          }\n        }\n        workingGroups {\n          id\n          flatData {\n            title\n          }\n        }\n        statusChangedAt\n        statusChangedBy {\n          id\n          flatData {\n            firstName\n            lastName\n          }\n        }\n      }\n    }\n    queryEventsContents(filter: $eventFilter) {\n      id\n      flatData {\n        startDate\n        endDate\n        title\n        speakers {\n          team {\n            ... on Teams {\n              id\n              referencingUsersContents(\n                filter: "data/teams/iv/role eq \'Project Manager\'"\n              ) {\n                id\n                flatData {\n                  teams {\n                    id {\n                      id\n                    }\n                    role\n                  }\n                }\n              }\n            }\n          }\n          user {\n            ... on Users {\n              id\n              flatData {\n                role\n                teams {\n                  id {\n                    id\n                  }\n                  role\n                }\n              }\n            }\n          }\n        }\n        videoRecordingUpdatedAt\n        presentationUpdatedAt\n        notesUpdatedAt\n      }\n    }\n  }\n':
    types.FetchReminderDataDocument,
  '\n  fragment ResearchOutputContent on ResearchOutputs {\n    id\n    created\n    lastModified\n    version\n    status\n    flatData {\n      title\n      documentType\n      type\n      description\n      descriptionMD\n      link\n      addedDate\n      publishDate\n      doi\n      labCatalogNumber\n      accession\n      rrid\n      lastUpdatedPartial\n      usageNotes\n      sharingStatus\n      asapFunded\n      usedInAPublication\n      authors {\n        __typename\n        ... on Users {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            biography\n            degree\n            email\n            contactEmail\n            firstName\n            institution\n            jobTitle\n            lastModifiedDate\n            lastName\n            country\n            city\n            onboarded\n            orcid\n            orcidLastModifiedDate\n            orcidLastSyncDate\n            orcidWorks {\n              doi\n              id\n              lastModifiedDate\n              publicationDate\n              title\n              type\n            }\n            questions {\n              question\n            }\n            expertiseAndResourceTags\n            expertiseAndResourceDescription\n            teams {\n              inactiveSinceDate\n              role\n              id {\n                id\n                flatData {\n                  displayName\n                  proposal {\n                    id\n                  }\n                  inactiveSince\n                }\n              }\n            }\n            social {\n              github\n              googleScholar\n              linkedIn\n              researcherId\n              researchGate\n              twitter\n              website1\n              website2\n            }\n            role\n            responsibilities\n            researchInterests\n            reachOut\n            labs {\n              id\n              flatData {\n                name\n              }\n            }\n            alumniSinceDate\n            alumniLocation\n          }\n        }\n        ... on ExternalAuthors {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            name\n            orcid\n          }\n        }\n      }\n      relatedResearch {\n        id\n        flatData {\n          title\n          type\n          documentType\n          teams {\n            id\n            flatData {\n              displayName\n            }\n          }\n          workingGroups {\n            id\n            flatData {\n              title\n            }\n          }\n        }\n      }\n      relatedEvents {\n        id\n        flatData {\n          title\n          endDate\n        }\n      }\n      labs {\n        id\n        flatData {\n          name\n        }\n      }\n      workingGroups {\n        id\n        flatData {\n          title\n        }\n      }\n      teams @include(if: $withTeams) {\n        id\n        created\n        lastModified\n        version\n        flatData {\n          displayName\n          inactiveSince\n        }\n        referencingUsersContents {\n          flatData {\n            email\n            teams {\n              role\n              id {\n                id\n              }\n            }\n          }\n        }\n      }\n      methods {\n        flatData {\n          name\n        }\n      }\n      organisms {\n        flatData {\n          name\n        }\n      }\n      environments {\n        flatData {\n          name\n        }\n      }\n      subtype {\n        flatData {\n          name\n        }\n      }\n      keywords {\n        flatData {\n          name\n        }\n      }\n      statusChangedBy {\n        id\n        flatData {\n          firstName\n          lastName\n        }\n      }\n      statusChangedAt\n      isInReview\n    }\n    referencingResearchOutputsContents {\n      id\n      flatData {\n        title\n        type\n        documentType\n        teams {\n          id\n          flatData {\n            displayName\n          }\n        }\n        workingGroups {\n          id\n          flatData {\n            title\n          }\n        }\n      }\n    }\n  }\n':
    types.ResearchOutputContentFragmentDoc,
  '\n  query FetchResearchOutput($id: String!, $withTeams: Boolean!) {\n    findResearchOutputsContent(id: $id) {\n      ...ResearchOutputContent\n    }\n  }\n  \n':
    types.FetchResearchOutputDocument,
  '\n  query FetchResearchOutputs(\n    $top: Int\n    $skip: Int\n    $filter: String\n    $withTeams: Boolean!\n  ) {\n    queryResearchOutputsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "created desc"\n    ) {\n      total\n      items {\n        ...ResearchOutputContent\n      }\n    }\n  }\n  \n':
    types.FetchResearchOutputsDocument,
  '\n  fragment ResearchTagContent on ResearchTags {\n    id\n    flatData {\n      name\n      category\n      types\n      entities\n    }\n  }\n':
    types.ResearchTagContentFragmentDoc,
  '\n  query FetchResearchTags($top: Int, $skip: Int, $filter: String) {\n    queryResearchTagsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "data/name/iv"\n    ) {\n      total\n      items {\n        ...ResearchTagContent\n      }\n    }\n  }\n  \n':
    types.FetchResearchTagsDocument,
  '\n  fragment TeamsContent on Teams {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      applicationNumber\n      displayName\n      inactiveSince\n      projectSummary\n      projectTitle\n      expertiseAndResourceTags\n      proposal {\n        id\n      }\n      tools {\n        description\n        name\n        url\n      }\n    }\n    referencingUsersContents(filter: "data/onboarded/iv eq true") {\n      id\n      created\n      lastModified\n      version\n      flatData {\n        avatar {\n          id\n        }\n        biography\n        degree\n        alumniSinceDate\n        email\n        contactEmail\n        firstName\n        institution\n        jobTitle\n        lastModifiedDate\n        lastName\n        country\n        city\n        onboarded\n        orcid\n        orcidLastModifiedDate\n        orcidLastSyncDate\n        orcidWorks {\n          doi\n          id\n          lastModifiedDate\n          publicationDate\n          title\n          type\n        }\n        questions {\n          question\n        }\n        expertiseAndResourceTags\n        expertiseAndResourceDescription\n        teams {\n          inactiveSinceDate\n          role\n          id {\n            id\n            flatData {\n              displayName\n              inactiveSince\n              proposal {\n                id\n              }\n            }\n          }\n        }\n        social {\n          github\n          googleScholar\n          linkedIn\n          researcherId\n          researchGate\n          twitter\n          website1\n          website2\n        }\n        role\n        responsibilities\n        researchInterests\n        reachOut\n        labs {\n          id\n          flatData {\n            name\n          }\n        }\n      }\n    }\n  }\n':
    types.TeamsContentFragmentDoc,
  '\n  query FetchTeam($id: String!) {\n    findTeamsContent(id: $id) {\n      ...TeamsContent\n    }\n  }\n  \n':
    types.FetchTeamDocument,
  '\n  query FetchTeams($top: Int, $skip: Int, $filter: String) {\n    queryTeamsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "data/displayName/iv"\n    ) {\n      total\n      items {\n        ...TeamsContent\n      }\n    }\n  }\n  \n':
    types.FetchTeamsDocument,
  '\n  fragment TutorialsContent on Tutorials {\n    id\n    created\n    flatData {\n      title\n      shortText\n      text\n      thumbnail {\n        id\n      }\n      link\n      linkText\n    }\n  }\n':
    types.TutorialsContentFragmentDoc,
  '\n  query FetchTutorials($id: String!) {\n    findTutorialsContent(id: $id) {\n      ...TutorialsContent\n    }\n  }\n  \n':
    types.FetchTutorialsDocument,
  '\n  fragment UsersContent on Users {\n    id\n    created\n    lastModified\n    version\n    referencingWorkingGroupsContents {\n      id\n      flatData {\n        title\n        complete\n        leaders {\n          inactiveSinceDate\n          role\n          user {\n            id\n          }\n        }\n        members {\n          inactiveSinceDate\n          user {\n            id\n          }\n        }\n      }\n    }\n    referencesTeamsContents {\n      id\n      referencingGroupsContents {\n        id\n        flatData {\n          name\n          active\n        }\n      }\n    }\n    referencingGroupsContents {\n      id\n      flatData {\n        name\n        active\n      }\n    }\n    flatData {\n      alumniSinceDate\n      alumniLocation\n      avatar {\n        id\n      }\n      biography\n      connections {\n        code\n      }\n      degree\n      email\n      contactEmail\n      dismissedGettingStarted\n      firstName\n      institution\n      jobTitle\n      lastModifiedDate\n      lastName\n      country\n      city\n      onboarded\n      orcid\n      orcidLastModifiedDate\n      orcidLastSyncDate\n      orcidWorks {\n        doi\n        id\n        lastModifiedDate\n        publicationDate\n        title\n        type\n      }\n      questions {\n        question\n      }\n      expertiseAndResourceTags\n      expertiseAndResourceDescription\n      teams {\n        inactiveSinceDate\n        role\n        id {\n          id\n          flatData {\n            displayName\n            inactiveSince\n            proposal {\n              id\n            }\n          }\n        }\n      }\n\n      social {\n        github\n        googleScholar\n        linkedIn\n        researcherId\n        researchGate\n        twitter\n        website1\n        website2\n      }\n      role\n      responsibilities\n      researchInterests\n      reachOut\n      labs {\n        id\n        flatData {\n          name\n        }\n      }\n    }\n  }\n':
    types.UsersContentFragmentDoc,
  '\n  query FetchUser($id: String!) {\n    findUsersContent(id: $id) {\n      ...UsersContent\n    }\n  }\n  \n':
    types.FetchUserDocument,
  '\n  query FetchUsers($top: Int, $skip: Int, $filter: String, $orderBy: String) {\n    queryUsersContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: $orderBy\n    ) {\n      total\n      items {\n        ...UsersContent\n      }\n    }\n  }\n  \n':
    types.FetchUsersDocument,
  '\n  fragment WorkingGroupContent on WorkingGroups {\n    id\n    lastModified\n    flatData {\n      title\n      description\n      externalLink\n      shortText\n      complete\n      deliverables {\n        status\n        description\n      }\n      leaders {\n        workstreamRole\n        role\n        inactiveSinceDate\n        user {\n          id\n          flatData {\n            avatar {\n              id\n            }\n            email\n            firstName\n            lastName\n            alumniSinceDate\n          }\n        }\n      }\n      members {\n        inactiveSinceDate\n        user {\n          id\n          flatData {\n            avatar {\n              id\n            }\n            email\n            firstName\n            lastName\n            alumniSinceDate\n          }\n        }\n      }\n      calendars {\n        id\n        flatData {\n          color\n          googleCalendarId\n          name\n        }\n      }\n    }\n  }\n':
    types.WorkingGroupContentFragmentDoc,
  '\n  query FetchWorkingGroup($id: String!) {\n    findWorkingGroupsContent(id: $id) {\n      ...WorkingGroupContent\n    }\n  }\n  \n':
    types.FetchWorkingGroupDocument,
  '\n  query FetchWorkingGroups($top: Int, $skip: Int, $filter: String) {\n    queryWorkingGroupsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "data/title/iv"\n    ) {\n      total\n      items {\n        ...WorkingGroupContent\n      }\n    }\n  }\n  \n':
    types.FetchWorkingGroupsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment CalendarsContent on Calendars {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      googleCalendarId\n      name\n      color\n      syncToken\n      resourceId\n      expirationDate\n    }\n    referencingGroupsContents {\n      id\n      flatData {\n        active\n      }\n    }\n    referencingWorkingGroupsContents {\n      id\n      flatData {\n        complete\n      }\n    }\n  }\n',
): (typeof documents)['\n  fragment CalendarsContent on Calendars {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      googleCalendarId\n      name\n      color\n      syncToken\n      resourceId\n      expirationDate\n    }\n    referencingGroupsContents {\n      id\n      flatData {\n        active\n      }\n    }\n    referencingWorkingGroupsContents {\n      id\n      flatData {\n        complete\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchCalendar($id: String!) {\n    findCalendarsContent(id: $id) {\n      ...CalendarsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchCalendar($id: String!) {\n    findCalendarsContent(id: $id) {\n      ...CalendarsContent\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchCalendars($top: Int, $skip: Int, $filter: String, $order: String) {\n    queryCalendarsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: $order\n    ) {\n      total\n      items {\n        ...CalendarsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchCalendars($top: Int, $skip: Int, $filter: String, $order: String) {\n    queryCalendarsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: $order\n    ) {\n      total\n      items {\n        ...CalendarsContent\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchDiscover {\n    queryDiscoverContents {\n      flatData {\n        aboutUs\n        training {\n          ...TutorialsContent\n        }\n        pages {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            shortText\n            text\n            title\n            link\n            linkText\n          }\n        }\n        members {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            email\n            firstName\n            institution\n            jobTitle\n            lastModifiedDate\n            lastName\n          }\n        }\n        membersTeam {\n          id\n        }\n        scientificAdvisoryBoard {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            email\n            firstName\n            institution\n            jobTitle\n            lastModifiedDate\n            lastName\n          }\n        }\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchDiscover {\n    queryDiscoverContents {\n      flatData {\n        aboutUs\n        training {\n          ...TutorialsContent\n        }\n        pages {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            shortText\n            text\n            title\n            link\n            linkText\n          }\n        }\n        members {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            email\n            firstName\n            institution\n            jobTitle\n            lastModifiedDate\n            lastName\n          }\n        }\n        membersTeam {\n          id\n        }\n        scientificAdvisoryBoard {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            email\n            firstName\n            institution\n            jobTitle\n            lastModifiedDate\n            lastName\n          }\n        }\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment EventContent on Events {\n    id\n    lastModified\n    version\n    created\n    flatData {\n      description\n      endDate\n      endDateTimeZone\n      startDate\n      startDateTimeZone\n      meetingLink\n      hideMeetingLink\n      eventLink\n      status\n      hidden\n      tags\n      title\n      notesPermanentlyUnavailable\n      notes\n      notesUpdatedAt\n      videoRecordingPermanentlyUnavailable\n      videoRecording\n      videoRecordingUpdatedAt\n      presentationPermanentlyUnavailable\n      presentation\n      presentationUpdatedAt\n      meetingMaterialsPermanentlyUnavailable\n      meetingMaterials {\n        url\n        title\n      }\n      calendar {\n        flatData {\n          googleCalendarId\n          color\n          name\n        }\n        referencingGroupsContents {\n          ...GroupsContent\n        }\n        referencingWorkingGroupsContents {\n          ...WorkingGroupContent\n        }\n      }\n      thumbnail {\n        id\n      }\n      speakers {\n        team {\n          id\n          flatData {\n            displayName\n            inactiveSince\n          }\n        }\n        user {\n          __typename\n          ... on Users {\n            id\n            flatData {\n              alumniSinceDate\n              alumniLocation\n              firstName\n              lastName\n              onboarded\n              avatar {\n                id\n              }\n              teams {\n                role\n                id {\n                  id\n                }\n              }\n            }\n          }\n          ... on ExternalAuthors {\n            id\n            flatData {\n              name\n              orcid\n            }\n          }\n        }\n      }\n    }\n    referencingResearchOutputsContents {\n      id\n      flatData {\n        documentType\n        type\n        title\n      }\n      referencesTeamsContents {\n        id\n        flatData {\n          displayName\n        }\n      }\n      referencesWorkingGroupsContents {\n        id\n        flatData {\n          title\n        }\n      }\n    }\n  }\n\n  ,\n  \n',
): (typeof documents)['\n  fragment EventContent on Events {\n    id\n    lastModified\n    version\n    created\n    flatData {\n      description\n      endDate\n      endDateTimeZone\n      startDate\n      startDateTimeZone\n      meetingLink\n      hideMeetingLink\n      eventLink\n      status\n      hidden\n      tags\n      title\n      notesPermanentlyUnavailable\n      notes\n      notesUpdatedAt\n      videoRecordingPermanentlyUnavailable\n      videoRecording\n      videoRecordingUpdatedAt\n      presentationPermanentlyUnavailable\n      presentation\n      presentationUpdatedAt\n      meetingMaterialsPermanentlyUnavailable\n      meetingMaterials {\n        url\n        title\n      }\n      calendar {\n        flatData {\n          googleCalendarId\n          color\n          name\n        }\n        referencingGroupsContents {\n          ...GroupsContent\n        }\n        referencingWorkingGroupsContents {\n          ...WorkingGroupContent\n        }\n      }\n      thumbnail {\n        id\n      }\n      speakers {\n        team {\n          id\n          flatData {\n            displayName\n            inactiveSince\n          }\n        }\n        user {\n          __typename\n          ... on Users {\n            id\n            flatData {\n              alumniSinceDate\n              alumniLocation\n              firstName\n              lastName\n              onboarded\n              avatar {\n                id\n              }\n              teams {\n                role\n                id {\n                  id\n                }\n              }\n            }\n          }\n          ... on ExternalAuthors {\n            id\n            flatData {\n              name\n              orcid\n            }\n          }\n        }\n      }\n    }\n    referencingResearchOutputsContents {\n      id\n      flatData {\n        documentType\n        type\n        title\n      }\n      referencesTeamsContents {\n        id\n        flatData {\n          displayName\n        }\n      }\n      referencesWorkingGroupsContents {\n        id\n        flatData {\n          title\n        }\n      }\n    }\n  }\n\n  ,\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchEvents($top: Int, $skip: Int, $filter: String, $order: String) {\n    queryEventsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: $order\n    ) {\n      total\n      items {\n        ...EventContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchEvents($top: Int, $skip: Int, $filter: String, $order: String) {\n    queryEventsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: $order\n    ) {\n      total\n      items {\n        ...EventContent\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchEvent($id: String!) {\n    findEventsContent(id: $id) {\n      ...EventContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchEvent($id: String!) {\n    findEventsContent(id: $id) {\n      ...EventContent\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchGroupCalendar($id: String!) {\n    findGroupsContent(id: $id) {\n      flatData {\n        calendars {\n          id\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchGroupCalendar($id: String!) {\n    findGroupsContent(id: $id) {\n      flatData {\n        calendars {\n          id\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchWorkingGroupCalendar($id: String!) {\n    findWorkingGroupsContent(id: $id) {\n      flatData {\n        calendars {\n          id\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchWorkingGroupCalendar($id: String!) {\n    findWorkingGroupsContent(id: $id) {\n      flatData {\n        calendars {\n          id\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment ExternalAuthorsContent on ExternalAuthors {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      name\n      orcid\n    }\n  }\n',
): (typeof documents)['\n  fragment ExternalAuthorsContent on ExternalAuthors {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      name\n      orcid\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchExternalAuthor($id: String!) {\n    findExternalAuthorsContent(id: $id) {\n      ...ExternalAuthorsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchExternalAuthor($id: String!) {\n    findExternalAuthorsContent(id: $id) {\n      ...ExternalAuthorsContent\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchExternalAuthors($top: Int, $skip: Int) {\n    queryExternalAuthorsContentsWithTotal(\n      top: $top\n      skip: $skip\n      orderby: "data/name/iv"\n    ) {\n      total\n      items {\n        ...ExternalAuthorsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchExternalAuthors($top: Int, $skip: Int) {\n    queryExternalAuthorsContentsWithTotal(\n      top: $top\n      skip: $skip\n      orderby: "data/name/iv"\n    ) {\n      total\n      items {\n        ...ExternalAuthorsContent\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment GroupsContent on Groups {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      name\n      active\n      description\n      tags\n      tools {\n        slack\n        googleDrive\n      }\n      teams {\n        ...TeamsContent\n      }\n      leaders {\n        role\n        inactiveSinceDate\n        user {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            email\n            firstName\n            lastModifiedDate\n            lastName\n            alumniSinceDate\n            jobTitle\n            institution\n            teams {\n              inactiveSinceDate\n              role\n              id {\n                id\n                flatData {\n                  displayName\n                  inactiveSince\n                  proposal {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      calendars {\n        id\n        flatData {\n          color\n          googleCalendarId\n          name\n        }\n      }\n      thumbnail {\n        id\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  fragment GroupsContent on Groups {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      name\n      active\n      description\n      tags\n      tools {\n        slack\n        googleDrive\n      }\n      teams {\n        ...TeamsContent\n      }\n      leaders {\n        role\n        inactiveSinceDate\n        user {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            email\n            firstName\n            lastModifiedDate\n            lastName\n            alumniSinceDate\n            jobTitle\n            institution\n            teams {\n              inactiveSinceDate\n              role\n              id {\n                id\n                flatData {\n                  displayName\n                  inactiveSince\n                  proposal {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      calendars {\n        id\n        flatData {\n          color\n          googleCalendarId\n          name\n        }\n      }\n      thumbnail {\n        id\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchGroups($top: Int, $skip: Int, $filter: String) {\n    queryGroupsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "data/name/iv"\n    ) {\n      total\n      items {\n        ...GroupsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchGroups($top: Int, $skip: Int, $filter: String) {\n    queryGroupsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "data/name/iv"\n    ) {\n      total\n      items {\n        ...GroupsContent\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchGroup($id: String!) {\n    findGroupsContent(id: $id) {\n      ...GroupsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchGroup($id: String!) {\n    findGroupsContent(id: $id) {\n      ...GroupsContent\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment LabsContent on Labs {\n    id\n    flatData {\n      name\n    }\n  }\n',
): (typeof documents)['\n  fragment LabsContent on Labs {\n    id\n    flatData {\n      name\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchLabs($top: Int, $skip: Int, $filter: String) {\n    queryLabsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "data/name/iv"\n    ) {\n      total\n      items {\n        ...LabsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchLabs($top: Int, $skip: Int, $filter: String) {\n    queryLabsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "data/name/iv"\n    ) {\n      total\n      items {\n        ...LabsContent\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchReminderData(\n    $userId: String!\n    $researchOutputFilter: String!\n    $researchOutputDraftFilter: String!\n    $researchOutputInReviewFilter: String!\n    $researchOutputSwitchToDraftFilter: String!\n    $eventFilter: String!\n  ) {\n    findUsersContent(id: $userId) {\n      referencingWorkingGroupsContents {\n        id\n        flatData {\n          leaders {\n            user {\n              id\n            }\n            role\n          }\n        }\n      }\n      flatData {\n        role\n        teams {\n          id {\n            id\n          }\n          role\n        }\n      }\n    }\n    queryResearchOutputsContents(filter: $researchOutputFilter) {\n      id\n      created\n      status\n      flatData {\n        addedDate\n        documentType\n        title\n        createdBy {\n          flatData {\n            firstName\n            lastName\n          }\n        }\n        teams {\n          id\n          flatData {\n            displayName\n          }\n        }\n        workingGroups {\n          id\n          flatData {\n            title\n          }\n        }\n        statusChangedBy {\n          id\n          flatData {\n            firstName\n            lastName\n          }\n        }\n      }\n    }\n    draftResearchOutputs: queryResearchOutputsContents(\n      filter: $researchOutputDraftFilter\n    ) {\n      id\n      created\n      status\n      flatData {\n        documentType\n        title\n        createdBy {\n          id\n          flatData {\n            firstName\n            lastName\n          }\n        }\n        teams {\n          id\n          flatData {\n            displayName\n          }\n        }\n        workingGroups {\n          id\n          flatData {\n            title\n          }\n        }\n        statusChangedBy {\n          id\n        }\n      }\n    }\n    inReviewResearchOutputs: queryResearchOutputsContents(\n      filter: $researchOutputInReviewFilter\n    ) {\n      id\n      created\n      status\n      flatData {\n        documentType\n        title\n        teams {\n          id\n          flatData {\n            displayName\n          }\n        }\n        workingGroups {\n          id\n          flatData {\n            title\n          }\n        }\n        statusChangedBy {\n          id\n          flatData {\n            firstName\n            lastName\n          }\n        }\n      }\n    }\n    switchToDraftResearchOutputs: queryResearchOutputsContents(\n      filter: $researchOutputSwitchToDraftFilter\n    ) {\n      id\n      created\n      status\n      flatData {\n        documentType\n        title\n        teams {\n          id\n          flatData {\n            displayName\n          }\n        }\n        workingGroups {\n          id\n          flatData {\n            title\n          }\n        }\n        statusChangedAt\n        statusChangedBy {\n          id\n          flatData {\n            firstName\n            lastName\n          }\n        }\n      }\n    }\n    queryEventsContents(filter: $eventFilter) {\n      id\n      flatData {\n        startDate\n        endDate\n        title\n        speakers {\n          team {\n            ... on Teams {\n              id\n              referencingUsersContents(\n                filter: "data/teams/iv/role eq \'Project Manager\'"\n              ) {\n                id\n                flatData {\n                  teams {\n                    id {\n                      id\n                    }\n                    role\n                  }\n                }\n              }\n            }\n          }\n          user {\n            ... on Users {\n              id\n              flatData {\n                role\n                teams {\n                  id {\n                    id\n                  }\n                  role\n                }\n              }\n            }\n          }\n        }\n        videoRecordingUpdatedAt\n        presentationUpdatedAt\n        notesUpdatedAt\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchReminderData(\n    $userId: String!\n    $researchOutputFilter: String!\n    $researchOutputDraftFilter: String!\n    $researchOutputInReviewFilter: String!\n    $researchOutputSwitchToDraftFilter: String!\n    $eventFilter: String!\n  ) {\n    findUsersContent(id: $userId) {\n      referencingWorkingGroupsContents {\n        id\n        flatData {\n          leaders {\n            user {\n              id\n            }\n            role\n          }\n        }\n      }\n      flatData {\n        role\n        teams {\n          id {\n            id\n          }\n          role\n        }\n      }\n    }\n    queryResearchOutputsContents(filter: $researchOutputFilter) {\n      id\n      created\n      status\n      flatData {\n        addedDate\n        documentType\n        title\n        createdBy {\n          flatData {\n            firstName\n            lastName\n          }\n        }\n        teams {\n          id\n          flatData {\n            displayName\n          }\n        }\n        workingGroups {\n          id\n          flatData {\n            title\n          }\n        }\n        statusChangedBy {\n          id\n          flatData {\n            firstName\n            lastName\n          }\n        }\n      }\n    }\n    draftResearchOutputs: queryResearchOutputsContents(\n      filter: $researchOutputDraftFilter\n    ) {\n      id\n      created\n      status\n      flatData {\n        documentType\n        title\n        createdBy {\n          id\n          flatData {\n            firstName\n            lastName\n          }\n        }\n        teams {\n          id\n          flatData {\n            displayName\n          }\n        }\n        workingGroups {\n          id\n          flatData {\n            title\n          }\n        }\n        statusChangedBy {\n          id\n        }\n      }\n    }\n    inReviewResearchOutputs: queryResearchOutputsContents(\n      filter: $researchOutputInReviewFilter\n    ) {\n      id\n      created\n      status\n      flatData {\n        documentType\n        title\n        teams {\n          id\n          flatData {\n            displayName\n          }\n        }\n        workingGroups {\n          id\n          flatData {\n            title\n          }\n        }\n        statusChangedBy {\n          id\n          flatData {\n            firstName\n            lastName\n          }\n        }\n      }\n    }\n    switchToDraftResearchOutputs: queryResearchOutputsContents(\n      filter: $researchOutputSwitchToDraftFilter\n    ) {\n      id\n      created\n      status\n      flatData {\n        documentType\n        title\n        teams {\n          id\n          flatData {\n            displayName\n          }\n        }\n        workingGroups {\n          id\n          flatData {\n            title\n          }\n        }\n        statusChangedAt\n        statusChangedBy {\n          id\n          flatData {\n            firstName\n            lastName\n          }\n        }\n      }\n    }\n    queryEventsContents(filter: $eventFilter) {\n      id\n      flatData {\n        startDate\n        endDate\n        title\n        speakers {\n          team {\n            ... on Teams {\n              id\n              referencingUsersContents(\n                filter: "data/teams/iv/role eq \'Project Manager\'"\n              ) {\n                id\n                flatData {\n                  teams {\n                    id {\n                      id\n                    }\n                    role\n                  }\n                }\n              }\n            }\n          }\n          user {\n            ... on Users {\n              id\n              flatData {\n                role\n                teams {\n                  id {\n                    id\n                  }\n                  role\n                }\n              }\n            }\n          }\n        }\n        videoRecordingUpdatedAt\n        presentationUpdatedAt\n        notesUpdatedAt\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment ResearchOutputContent on ResearchOutputs {\n    id\n    created\n    lastModified\n    version\n    status\n    flatData {\n      title\n      documentType\n      type\n      description\n      descriptionMD\n      link\n      addedDate\n      publishDate\n      doi\n      labCatalogNumber\n      accession\n      rrid\n      lastUpdatedPartial\n      usageNotes\n      sharingStatus\n      asapFunded\n      usedInAPublication\n      authors {\n        __typename\n        ... on Users {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            biography\n            degree\n            email\n            contactEmail\n            firstName\n            institution\n            jobTitle\n            lastModifiedDate\n            lastName\n            country\n            city\n            onboarded\n            orcid\n            orcidLastModifiedDate\n            orcidLastSyncDate\n            orcidWorks {\n              doi\n              id\n              lastModifiedDate\n              publicationDate\n              title\n              type\n            }\n            questions {\n              question\n            }\n            expertiseAndResourceTags\n            expertiseAndResourceDescription\n            teams {\n              inactiveSinceDate\n              role\n              id {\n                id\n                flatData {\n                  displayName\n                  proposal {\n                    id\n                  }\n                  inactiveSince\n                }\n              }\n            }\n            social {\n              github\n              googleScholar\n              linkedIn\n              researcherId\n              researchGate\n              twitter\n              website1\n              website2\n            }\n            role\n            responsibilities\n            researchInterests\n            reachOut\n            labs {\n              id\n              flatData {\n                name\n              }\n            }\n            alumniSinceDate\n            alumniLocation\n          }\n        }\n        ... on ExternalAuthors {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            name\n            orcid\n          }\n        }\n      }\n      relatedResearch {\n        id\n        flatData {\n          title\n          type\n          documentType\n          teams {\n            id\n            flatData {\n              displayName\n            }\n          }\n          workingGroups {\n            id\n            flatData {\n              title\n            }\n          }\n        }\n      }\n      relatedEvents {\n        id\n        flatData {\n          title\n          endDate\n        }\n      }\n      labs {\n        id\n        flatData {\n          name\n        }\n      }\n      workingGroups {\n        id\n        flatData {\n          title\n        }\n      }\n      teams @include(if: $withTeams) {\n        id\n        created\n        lastModified\n        version\n        flatData {\n          displayName\n          inactiveSince\n        }\n        referencingUsersContents {\n          flatData {\n            email\n            teams {\n              role\n              id {\n                id\n              }\n            }\n          }\n        }\n      }\n      methods {\n        flatData {\n          name\n        }\n      }\n      organisms {\n        flatData {\n          name\n        }\n      }\n      environments {\n        flatData {\n          name\n        }\n      }\n      subtype {\n        flatData {\n          name\n        }\n      }\n      keywords {\n        flatData {\n          name\n        }\n      }\n      statusChangedBy {\n        id\n        flatData {\n          firstName\n          lastName\n        }\n      }\n      statusChangedAt\n      isInReview\n    }\n    referencingResearchOutputsContents {\n      id\n      flatData {\n        title\n        type\n        documentType\n        teams {\n          id\n          flatData {\n            displayName\n          }\n        }\n        workingGroups {\n          id\n          flatData {\n            title\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  fragment ResearchOutputContent on ResearchOutputs {\n    id\n    created\n    lastModified\n    version\n    status\n    flatData {\n      title\n      documentType\n      type\n      description\n      descriptionMD\n      link\n      addedDate\n      publishDate\n      doi\n      labCatalogNumber\n      accession\n      rrid\n      lastUpdatedPartial\n      usageNotes\n      sharingStatus\n      asapFunded\n      usedInAPublication\n      authors {\n        __typename\n        ... on Users {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            biography\n            degree\n            email\n            contactEmail\n            firstName\n            institution\n            jobTitle\n            lastModifiedDate\n            lastName\n            country\n            city\n            onboarded\n            orcid\n            orcidLastModifiedDate\n            orcidLastSyncDate\n            orcidWorks {\n              doi\n              id\n              lastModifiedDate\n              publicationDate\n              title\n              type\n            }\n            questions {\n              question\n            }\n            expertiseAndResourceTags\n            expertiseAndResourceDescription\n            teams {\n              inactiveSinceDate\n              role\n              id {\n                id\n                flatData {\n                  displayName\n                  proposal {\n                    id\n                  }\n                  inactiveSince\n                }\n              }\n            }\n            social {\n              github\n              googleScholar\n              linkedIn\n              researcherId\n              researchGate\n              twitter\n              website1\n              website2\n            }\n            role\n            responsibilities\n            researchInterests\n            reachOut\n            labs {\n              id\n              flatData {\n                name\n              }\n            }\n            alumniSinceDate\n            alumniLocation\n          }\n        }\n        ... on ExternalAuthors {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            name\n            orcid\n          }\n        }\n      }\n      relatedResearch {\n        id\n        flatData {\n          title\n          type\n          documentType\n          teams {\n            id\n            flatData {\n              displayName\n            }\n          }\n          workingGroups {\n            id\n            flatData {\n              title\n            }\n          }\n        }\n      }\n      relatedEvents {\n        id\n        flatData {\n          title\n          endDate\n        }\n      }\n      labs {\n        id\n        flatData {\n          name\n        }\n      }\n      workingGroups {\n        id\n        flatData {\n          title\n        }\n      }\n      teams @include(if: $withTeams) {\n        id\n        created\n        lastModified\n        version\n        flatData {\n          displayName\n          inactiveSince\n        }\n        referencingUsersContents {\n          flatData {\n            email\n            teams {\n              role\n              id {\n                id\n              }\n            }\n          }\n        }\n      }\n      methods {\n        flatData {\n          name\n        }\n      }\n      organisms {\n        flatData {\n          name\n        }\n      }\n      environments {\n        flatData {\n          name\n        }\n      }\n      subtype {\n        flatData {\n          name\n        }\n      }\n      keywords {\n        flatData {\n          name\n        }\n      }\n      statusChangedBy {\n        id\n        flatData {\n          firstName\n          lastName\n        }\n      }\n      statusChangedAt\n      isInReview\n    }\n    referencingResearchOutputsContents {\n      id\n      flatData {\n        title\n        type\n        documentType\n        teams {\n          id\n          flatData {\n            displayName\n          }\n        }\n        workingGroups {\n          id\n          flatData {\n            title\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchResearchOutput($id: String!, $withTeams: Boolean!) {\n    findResearchOutputsContent(id: $id) {\n      ...ResearchOutputContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchResearchOutput($id: String!, $withTeams: Boolean!) {\n    findResearchOutputsContent(id: $id) {\n      ...ResearchOutputContent\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchResearchOutputs(\n    $top: Int\n    $skip: Int\n    $filter: String\n    $withTeams: Boolean!\n  ) {\n    queryResearchOutputsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "created desc"\n    ) {\n      total\n      items {\n        ...ResearchOutputContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchResearchOutputs(\n    $top: Int\n    $skip: Int\n    $filter: String\n    $withTeams: Boolean!\n  ) {\n    queryResearchOutputsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "created desc"\n    ) {\n      total\n      items {\n        ...ResearchOutputContent\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment ResearchTagContent on ResearchTags {\n    id\n    flatData {\n      name\n      category\n      types\n      entities\n    }\n  }\n',
): (typeof documents)['\n  fragment ResearchTagContent on ResearchTags {\n    id\n    flatData {\n      name\n      category\n      types\n      entities\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchResearchTags($top: Int, $skip: Int, $filter: String) {\n    queryResearchTagsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "data/name/iv"\n    ) {\n      total\n      items {\n        ...ResearchTagContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchResearchTags($top: Int, $skip: Int, $filter: String) {\n    queryResearchTagsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "data/name/iv"\n    ) {\n      total\n      items {\n        ...ResearchTagContent\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment TeamsContent on Teams {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      applicationNumber\n      displayName\n      inactiveSince\n      projectSummary\n      projectTitle\n      expertiseAndResourceTags\n      proposal {\n        id\n      }\n      tools {\n        description\n        name\n        url\n      }\n    }\n    referencingUsersContents(filter: "data/onboarded/iv eq true") {\n      id\n      created\n      lastModified\n      version\n      flatData {\n        avatar {\n          id\n        }\n        biography\n        degree\n        alumniSinceDate\n        email\n        contactEmail\n        firstName\n        institution\n        jobTitle\n        lastModifiedDate\n        lastName\n        country\n        city\n        onboarded\n        orcid\n        orcidLastModifiedDate\n        orcidLastSyncDate\n        orcidWorks {\n          doi\n          id\n          lastModifiedDate\n          publicationDate\n          title\n          type\n        }\n        questions {\n          question\n        }\n        expertiseAndResourceTags\n        expertiseAndResourceDescription\n        teams {\n          inactiveSinceDate\n          role\n          id {\n            id\n            flatData {\n              displayName\n              inactiveSince\n              proposal {\n                id\n              }\n            }\n          }\n        }\n        social {\n          github\n          googleScholar\n          linkedIn\n          researcherId\n          researchGate\n          twitter\n          website1\n          website2\n        }\n        role\n        responsibilities\n        researchInterests\n        reachOut\n        labs {\n          id\n          flatData {\n            name\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  fragment TeamsContent on Teams {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      applicationNumber\n      displayName\n      inactiveSince\n      projectSummary\n      projectTitle\n      expertiseAndResourceTags\n      proposal {\n        id\n      }\n      tools {\n        description\n        name\n        url\n      }\n    }\n    referencingUsersContents(filter: "data/onboarded/iv eq true") {\n      id\n      created\n      lastModified\n      version\n      flatData {\n        avatar {\n          id\n        }\n        biography\n        degree\n        alumniSinceDate\n        email\n        contactEmail\n        firstName\n        institution\n        jobTitle\n        lastModifiedDate\n        lastName\n        country\n        city\n        onboarded\n        orcid\n        orcidLastModifiedDate\n        orcidLastSyncDate\n        orcidWorks {\n          doi\n          id\n          lastModifiedDate\n          publicationDate\n          title\n          type\n        }\n        questions {\n          question\n        }\n        expertiseAndResourceTags\n        expertiseAndResourceDescription\n        teams {\n          inactiveSinceDate\n          role\n          id {\n            id\n            flatData {\n              displayName\n              inactiveSince\n              proposal {\n                id\n              }\n            }\n          }\n        }\n        social {\n          github\n          googleScholar\n          linkedIn\n          researcherId\n          researchGate\n          twitter\n          website1\n          website2\n        }\n        role\n        responsibilities\n        researchInterests\n        reachOut\n        labs {\n          id\n          flatData {\n            name\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchTeam($id: String!) {\n    findTeamsContent(id: $id) {\n      ...TeamsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchTeam($id: String!) {\n    findTeamsContent(id: $id) {\n      ...TeamsContent\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchTeams($top: Int, $skip: Int, $filter: String) {\n    queryTeamsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "data/displayName/iv"\n    ) {\n      total\n      items {\n        ...TeamsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchTeams($top: Int, $skip: Int, $filter: String) {\n    queryTeamsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "data/displayName/iv"\n    ) {\n      total\n      items {\n        ...TeamsContent\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment TutorialsContent on Tutorials {\n    id\n    created\n    flatData {\n      title\n      shortText\n      text\n      thumbnail {\n        id\n      }\n      link\n      linkText\n    }\n  }\n',
): (typeof documents)['\n  fragment TutorialsContent on Tutorials {\n    id\n    created\n    flatData {\n      title\n      shortText\n      text\n      thumbnail {\n        id\n      }\n      link\n      linkText\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchTutorials($id: String!) {\n    findTutorialsContent(id: $id) {\n      ...TutorialsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchTutorials($id: String!) {\n    findTutorialsContent(id: $id) {\n      ...TutorialsContent\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment UsersContent on Users {\n    id\n    created\n    lastModified\n    version\n    referencingWorkingGroupsContents {\n      id\n      flatData {\n        title\n        complete\n        leaders {\n          inactiveSinceDate\n          role\n          user {\n            id\n          }\n        }\n        members {\n          inactiveSinceDate\n          user {\n            id\n          }\n        }\n      }\n    }\n    referencesTeamsContents {\n      id\n      referencingGroupsContents {\n        id\n        flatData {\n          name\n          active\n        }\n      }\n    }\n    referencingGroupsContents {\n      id\n      flatData {\n        name\n        active\n      }\n    }\n    flatData {\n      alumniSinceDate\n      alumniLocation\n      avatar {\n        id\n      }\n      biography\n      connections {\n        code\n      }\n      degree\n      email\n      contactEmail\n      dismissedGettingStarted\n      firstName\n      institution\n      jobTitle\n      lastModifiedDate\n      lastName\n      country\n      city\n      onboarded\n      orcid\n      orcidLastModifiedDate\n      orcidLastSyncDate\n      orcidWorks {\n        doi\n        id\n        lastModifiedDate\n        publicationDate\n        title\n        type\n      }\n      questions {\n        question\n      }\n      expertiseAndResourceTags\n      expertiseAndResourceDescription\n      teams {\n        inactiveSinceDate\n        role\n        id {\n          id\n          flatData {\n            displayName\n            inactiveSince\n            proposal {\n              id\n            }\n          }\n        }\n      }\n\n      social {\n        github\n        googleScholar\n        linkedIn\n        researcherId\n        researchGate\n        twitter\n        website1\n        website2\n      }\n      role\n      responsibilities\n      researchInterests\n      reachOut\n      labs {\n        id\n        flatData {\n          name\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  fragment UsersContent on Users {\n    id\n    created\n    lastModified\n    version\n    referencingWorkingGroupsContents {\n      id\n      flatData {\n        title\n        complete\n        leaders {\n          inactiveSinceDate\n          role\n          user {\n            id\n          }\n        }\n        members {\n          inactiveSinceDate\n          user {\n            id\n          }\n        }\n      }\n    }\n    referencesTeamsContents {\n      id\n      referencingGroupsContents {\n        id\n        flatData {\n          name\n          active\n        }\n      }\n    }\n    referencingGroupsContents {\n      id\n      flatData {\n        name\n        active\n      }\n    }\n    flatData {\n      alumniSinceDate\n      alumniLocation\n      avatar {\n        id\n      }\n      biography\n      connections {\n        code\n      }\n      degree\n      email\n      contactEmail\n      dismissedGettingStarted\n      firstName\n      institution\n      jobTitle\n      lastModifiedDate\n      lastName\n      country\n      city\n      onboarded\n      orcid\n      orcidLastModifiedDate\n      orcidLastSyncDate\n      orcidWorks {\n        doi\n        id\n        lastModifiedDate\n        publicationDate\n        title\n        type\n      }\n      questions {\n        question\n      }\n      expertiseAndResourceTags\n      expertiseAndResourceDescription\n      teams {\n        inactiveSinceDate\n        role\n        id {\n          id\n          flatData {\n            displayName\n            inactiveSince\n            proposal {\n              id\n            }\n          }\n        }\n      }\n\n      social {\n        github\n        googleScholar\n        linkedIn\n        researcherId\n        researchGate\n        twitter\n        website1\n        website2\n      }\n      role\n      responsibilities\n      researchInterests\n      reachOut\n      labs {\n        id\n        flatData {\n          name\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchUser($id: String!) {\n    findUsersContent(id: $id) {\n      ...UsersContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchUser($id: String!) {\n    findUsersContent(id: $id) {\n      ...UsersContent\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchUsers($top: Int, $skip: Int, $filter: String, $orderBy: String) {\n    queryUsersContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: $orderBy\n    ) {\n      total\n      items {\n        ...UsersContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchUsers($top: Int, $skip: Int, $filter: String, $orderBy: String) {\n    queryUsersContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: $orderBy\n    ) {\n      total\n      items {\n        ...UsersContent\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment WorkingGroupContent on WorkingGroups {\n    id\n    lastModified\n    flatData {\n      title\n      description\n      externalLink\n      shortText\n      complete\n      deliverables {\n        status\n        description\n      }\n      leaders {\n        workstreamRole\n        role\n        inactiveSinceDate\n        user {\n          id\n          flatData {\n            avatar {\n              id\n            }\n            email\n            firstName\n            lastName\n            alumniSinceDate\n          }\n        }\n      }\n      members {\n        inactiveSinceDate\n        user {\n          id\n          flatData {\n            avatar {\n              id\n            }\n            email\n            firstName\n            lastName\n            alumniSinceDate\n          }\n        }\n      }\n      calendars {\n        id\n        flatData {\n          color\n          googleCalendarId\n          name\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  fragment WorkingGroupContent on WorkingGroups {\n    id\n    lastModified\n    flatData {\n      title\n      description\n      externalLink\n      shortText\n      complete\n      deliverables {\n        status\n        description\n      }\n      leaders {\n        workstreamRole\n        role\n        inactiveSinceDate\n        user {\n          id\n          flatData {\n            avatar {\n              id\n            }\n            email\n            firstName\n            lastName\n            alumniSinceDate\n          }\n        }\n      }\n      members {\n        inactiveSinceDate\n        user {\n          id\n          flatData {\n            avatar {\n              id\n            }\n            email\n            firstName\n            lastName\n            alumniSinceDate\n          }\n        }\n      }\n      calendars {\n        id\n        flatData {\n          color\n          googleCalendarId\n          name\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchWorkingGroup($id: String!) {\n    findWorkingGroupsContent(id: $id) {\n      ...WorkingGroupContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchWorkingGroup($id: String!) {\n    findWorkingGroupsContent(id: $id) {\n      ...WorkingGroupContent\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchWorkingGroups($top: Int, $skip: Int, $filter: String) {\n    queryWorkingGroupsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "data/title/iv"\n    ) {\n      total\n      items {\n        ...WorkingGroupContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchWorkingGroups($top: Int, $skip: Int, $filter: String) {\n    queryWorkingGroupsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "data/title/iv"\n    ) {\n      total\n      items {\n        ...WorkingGroupContent\n      }\n    }\n  }\n  \n'];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
