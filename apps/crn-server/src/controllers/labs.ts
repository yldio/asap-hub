import { ListLabsResponse } from '@asap-hub/model';
import { SquidexGraphqlClient } from '@asap-hub/squidex';
import { FetchLabsQuery } from '../autogenerated-gql/graphql';
import { FETCH_LABS } from '../queries/labs.queries';
import { sanitiseForSquidex } from '../utils/squidex';
import { FetchOptions } from '../utils/types';

export default class Labs implements LabsController {
  squidexGraphQlClient: SquidexGraphqlClient;

  constructor(squidexGraphqlClient: SquidexGraphqlClient) {
    this.squidexGraphQlClient = squidexGraphqlClient;
  }
  async fetch(options: FetchOptions): Promise<ListLabsResponse> {
    const { take = 8, skip = 0, search } = options;

    const queryFilter = (search || '')
      .split(' ')
      .filter(Boolean)
      .map(sanitiseForSquidex)
      .reduce(
        (acc: string[], word: string) =>
          acc.concat(`contains(data/name/iv, '${word}')`),
        [],
      )
      .join(' and ');

    const { queryLabsContentsWithTotal } =
      await this.squidexGraphQlClient.request<FetchLabsQuery, unknown>(
        FETCH_LABS,
        { filter: queryFilter, top: take, skip },
      );
    if (queryLabsContentsWithTotal === null) {
      return {
        total: 0,
        items: [],
      };
    }
    const { total, items } = queryLabsContentsWithTotal;

    if (items === null) {
      return {
        total: 0,
        items: [],
      };
    }

    return {
      total,
      items: items.map(({ id, flatData }) => ({
        id,
        name: flatData.name || '',
      })),
    };
  }
}

export interface LabsController {
  fetch: (options: FetchOptions) => Promise<ListLabsResponse>;
}
