import {
  isResearchTagCategory,
  isResearchTagEntity,
  ListResearchTagResponse,
} from '@asap-hub/model';
import { SquidexGraphqlClient } from '@asap-hub/squidex';
import {
  FetchResearchTagsQuery,
  FetchResearchTagsQueryVariables,
} from '../autogenerated-gql/graphql';
import { FETCH_RESEARCH_TAGS } from '../queries/research-tags.queries';
import logger from '../utils/logger';

export interface ResearchTagController {
  fetch: (options: {
    take?: number;
    skip?: number;
  }) => Promise<ListResearchTagResponse>;
}

export default class ResearchTags implements ResearchTagController {
  squidexGraphqlClient: SquidexGraphqlClient;

  constructor(squidexGraphqlClient: SquidexGraphqlClient) {
    this.squidexGraphqlClient = squidexGraphqlClient;
  }

  async fetch(options: {
    take?: number;
    skip?: number;
  }): Promise<ListResearchTagResponse> {
    const { take = 8, skip = 0 } = options;

    const { queryResearchTagsContentsWithTotal } =
      await this.squidexGraphqlClient.request<
        FetchResearchTagsQuery,
        FetchResearchTagsQueryVariables
      >(FETCH_RESEARCH_TAGS, {
        top: take,
        skip,
      });

    if (queryResearchTagsContentsWithTotal === null) {
      logger.warn('queryResearchTagsContentsWithTotal returned null');
      return {
        total: 0,
        items: [],
      };
    }

    const { total, items: researchTags } = queryResearchTagsContentsWithTotal;

    if (researchTags === null) {
      logger.warn('queryResearchTagsContentsWithTotal items returned null');
      return {
        total: 0,
        items: [],
      };
    }

    return {
      total,
      items: researchTags.map((item) => {
        if (
          item.flatData.category !== null &&
          !isResearchTagCategory(item.flatData.category)
        ) {
          throw new TypeError('Invalid category received from Squidex');
        }

        if (
          item.flatData.entities &&
          !item.flatData.entities.every(isResearchTagEntity)
        ) {
          throw new TypeError('Invalid entity received from Squidex');
        }

        return {
          id: item.id,
          name: item.flatData.name || '',
          category: item.flatData.category || undefined,
          types: item.flatData.types || undefined,
          entities: item.flatData.entities || undefined,
        };
      }),
    };
  }
}
