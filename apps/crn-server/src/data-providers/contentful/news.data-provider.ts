import {
  ListNewsDataObject,
  NewsDataObject,
  FetchNewsFilter,
  FetchPaginationOptions,
  NewsFrequency,
} from '@asap-hub/model';

import { GraphQLClient, parseRichText, FETCH_NEWS } from '@asap-hub/contentful';
import {
  FetchNewsQuery,
  FetchNewsQueryVariables,
} from '@asap-hub/contentful/src/crn/autogenerated-gql/graphql';

export interface NewsDataProvider {
  fetchById(id: string): Promise<NewsDataObject | null>;
  fetch: (options?: FetchNewsProviderOptions) => Promise<ListNewsDataObject>;
}

export class NewsContentfulDataProvider {
  constructor(private contentfulClient: GraphQLClient) {}

  async fetch(options?: FetchNewsProviderOptions) {
    try {
      const { newsCollection } = await this.contentfulClient.request<
        FetchNewsQuery,
        FetchNewsQueryVariables
      >(FETCH_NEWS, {
        limit: options?.take!,
      });
      console.log('\n\n\n***', newsCollection?.items, '\n\n\n');

      return {
        total: newsCollection?.items.length,
        items: newsCollection?.items.map((item) => {
          if (item) {
            return parseNews(item);
          }
          return;
        }),
      };
    } catch (error) {
      if (JSON.parse((error as Error).message)?.status === 404) {
        return {
          total: 0,
          items: [],
        };
      }

      throw error;
    }
  }

  async fetchById(id: string) {
    // try {
    //   const entries = await this.contentfulClient.getEntries<News>({
    //     content_type: 'news',
    //     'id': id,
    //   });
    //   return entries.items[0] ? parseNews(entries.items[0]) : null;
    // } catch (error) {
    //   if (JSON.parse((error as Error).message)?.status === 404) {
    //     return null;
    //   }
    //   throw error;
    // }
    return null;
  }
}

export type FetchNewsProviderOptions = FetchPaginationOptions & {
  filter?: FetchNewsFilter & {
    title?: string;
  };
};

const parseNews = (
  item: NonNullable<
    NonNullable<FetchNewsQuery['newsCollection']>['items'][number]
  >,
): NewsDataObject => ({
  id: item.id!,
  title: item.title!,
  type: 'News',
  frequency: (item?.frequency as NewsFrequency) ?? undefined,
  shortText: item?.shortText ?? undefined,
  thumbnail: item.thumbnail?.url ?? undefined,
  link: item?.link ?? undefined,
  linkText: item?.linkText ?? undefined,
  text: item.text ? parseRichText(item?.text.json) : undefined,
  created: item.sys.firstPublishedAt,
});
