import {
  ListNewsDataObject,
  NewsDataObject,
  FetchNewsFilter,
  FetchPaginationOptions,
  NewsFrequency,
} from '@asap-hub/model';

import {
  GraphQLClient,
  parseRichText,
  FETCH_NEWS,
  FETCH_NEWS_BY_ID,
} from '@asap-hub/contentful';
import {
  FetchNewsByIdQuery,
  FetchNewsByIdQueryVariables,
  FetchNewsQuery,
  FetchNewsQueryVariables,
} from '@asap-hub/contentful/src/crn/autogenerated-gql/graphql';

export interface NewsDataProvider {
  fetchById(id: string): Promise<NewsDataObject | null>;
  fetch: (options?: FetchNewsProviderOptions) => Promise<ListNewsDataObject>;
}

export class NewsContentfulDataProvider {
  constructor(private contentfulClient: GraphQLClient) {}

  async fetch(options?: FetchNewsProviderOptions) {
    try {
      const { newsCollection } = await this.contentfulClient.request<
        FetchNewsQuery,
        FetchNewsQueryVariables
      >(FETCH_NEWS, {
        limit: options?.take!,
        skip: options?.skip!,
        frequency: options?.filter?.frequency!,
        title: options?.filter?.title!,
      });

      if (!newsCollection?.items) {
        return {
          total: 0,
          items: [],
        };
      }

      return {
        total: newsCollection?.total,
        items: newsCollection?.items.map((item) => {
          if (item) {
            return parseNews(item);
          }
          return;
        }),
      };
    } catch (error) {
      if (JSON.parse((error as Error).message)?.status === 404) {
        return {
          total: 0,
          items: [],
        };
      }

      throw error;
    }
  }

  async fetchById(id: string) {
    const { newsCollection } = await this.contentfulClient.request<
      FetchNewsByIdQuery,
      FetchNewsByIdQueryVariables
    >(FETCH_NEWS_BY_ID, { id });

    if (!newsCollection?.items) {
      return null;
    }

    return parseNews(newsCollection.items[0]!);
  }
}

export type FetchNewsProviderOptions = FetchPaginationOptions & {
  filter?: FetchNewsFilter & {
    title?: string;
  };
};

const parseNews = (
  item: NonNullable<
    NonNullable<FetchNewsQuery['newsCollection']>['items'][number]
  >,
): NewsDataObject => ({
  id: item.id!,
  title: item.title!,
  type: 'News',
  frequency: (item?.frequency as NewsFrequency) ?? undefined,
  shortText: item?.shortText ?? undefined,
  thumbnail: item.thumbnail?.url ?? undefined,
  link: item?.link ?? undefined,
  linkText: item?.linkText ?? undefined,
  text: item.text ? parseRichText(item?.text.json) : undefined,
  created: item.sys.firstPublishedAt,
});
