import {
  ListNewsDataObject,
  NewsDataObject,
  FetchNewsFilter,
  FetchPaginationOptions,
} from '@asap-hub/model';

import {
  GraphQLClient,
  ContentfulRestNews,
  NewsEntity,
  parseRichText,
  FETCH_NEWS,
} from '@asap-hub/contentful';
import {
  FetchNewsQuery,
  News,
} from '@asap-hub/contentful/src/crn/autogenerated-gql/graphql';

export interface NewsDataProvider {
  fetchById(id: string): Promise<NewsDataObject | null>;
  fetch: (options?: FetchNewsProviderOptions) => Promise<ListNewsDataObject>;
}

export class NewsContentfulDataProvider {
  constructor(private contentfulClient: GraphQLClient) {}

  async fetch(options?: FetchNewsProviderOptions) {
    try {
      const { newsCollection } =
        await this.contentfulClient.request<FetchNewsQuery>(FETCH_NEWS);
      console.log('\n\n\n***', 'items', newsCollection?.items, '\n\n\n');
      return {
        total: newsCollection?.items.length,
        items: newsCollection?.items.map(parseNews),
      };
    } catch (error) {
      if (JSON.parse((error as Error).message)?.status === 404) {
        return {
          total: 0,
          items: [],
        };
      }

      throw error;
    }
  }

  async fetchById(id: string) {
    // try {
    //   const entries = await this.contentfulClient.getEntries<News>({
    //     content_type: 'news',
    //     'id': id,
    //   });
    //   return entries.items[0] ? parseNews(entries.items[0]) : null;
    // } catch (error) {
    //   if (JSON.parse((error as Error).message)?.status === 404) {
    //     return null;
    //   }
    //   throw error;
    // }
    return null;
  }
}

export type FetchNewsProviderOptions = FetchPaginationOptions & {
  filter?: FetchNewsFilter & {
    title?: string;
  };
};

const parseNews = (item: News): NewsDataObject => ({
  id: item.id!,
  title: item.title!,
  type: 'News',
  frequency: item?.frequency ?? undefined,
  shortText: item?.shortText ?? undefined,
  thumbnail: item.thumbnail?.url ?? undefined,
  link: item?.link ?? undefined,
  linkText: item?.linkText ?? undefined,
  text: item.text ? parseRichText(item?.text) : undefined,
  created: item.sys.createdAt,
});
