import { DashboardDataObject } from '@asap-hub/model';
import { SquidexGraphqlClient } from '@asap-hub/squidex';

import { FetchDashboardQuery } from '../autogenerated-gql/graphql';
import { parseGraphQLNews, parseGraphQLPage } from '../entities';
import { FETCH_DASHBOARD } from '../queries/dashboard.queries';

export interface DashboardDataProvider {
  fetch: () => Promise<DashboardDataObject>;
}

export default class DashboardSquidexDataProvider
  implements DashboardDataProvider
{
  constructor(private squidexGraphqlClient: SquidexGraphqlClient) {}

  async fetch(): Promise<DashboardDataObject> {
    const { queryDashboardContents } =
      await this.squidexGraphqlClient.request<FetchDashboardQuery>(
        FETCH_DASHBOARD,
      );
    if (
      !queryDashboardContents ||
      queryDashboardContents.length === 0 ||
      !queryDashboardContents[0]
    ) {
      return {
        news: [],
        pages: [],
      };
    }

    const [{ flatData }] = queryDashboardContents;
    return {
      news: flatData.news?.map(parseGraphQLNews) ?? [],
      pages: flatData.pages?.map(parseGraphQLPage) ?? [],
    };
  }
}
