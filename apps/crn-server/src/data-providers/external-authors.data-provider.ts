import {
  ExternalAuthorCreateDataObject,
  ListExternalAuthorResponse,
  ExternalAuthorResponse,
  FetchOptions,
} from '@asap-hub/model';
import {
  RestExternalAuthor,
  SquidexGraphqlClient,
  SquidexRestClient,
} from '@asap-hub/squidex';
import { parseGraphQLExternalAuthor } from '../entities';
import {
  FetchExternalAuthorQuery,
  FetchExternalAuthorQueryVariables,
  FetchExternalAuthorsQuery,
  FetchExternalAuthorsQueryVariables,
} from '../autogenerated-gql/graphql';
import {
  FETCH_EXTERNAL_AUTHOR,
  FETCH_EXTERNAL_AUTHORS,
} from '../queries/external-authors.queries';

export interface ExternalAuthorDataProvider {
  create(input: ExternalAuthorCreateDataObject): Promise<string>;
  fetch(options: FetchOptions): Promise<ListExternalAuthorResponse>;
  fetchById(id: string): Promise<ExternalAuthorResponse | null>;
}

export class ExternalAuthorSquidexDataProvider
  implements ExternalAuthorDataProvider
{
  constructor(
    private externalAuthorSquidexRestClient: SquidexRestClient<RestExternalAuthor>,
    private squidexGraphqlClient: SquidexGraphqlClient,
  ) {}

  async create(input: ExternalAuthorCreateDataObject): Promise<string> {
    const { id } = await this.externalAuthorSquidexRestClient.create({
      name: { iv: input.name },
      orcid: (input.orcid && { iv: input.orcid }) || undefined,
    });
    return id;
  }

  async fetch(options: FetchOptions): Promise<ListExternalAuthorResponse> {
    const { take = 8, skip = 0 } = options;

    const { queryExternalAuthorsContentsWithTotal } =
      await this.squidexGraphqlClient.request<
        FetchExternalAuthorsQuery,
        FetchExternalAuthorsQueryVariables
      >(FETCH_EXTERNAL_AUTHORS, { top: take, skip });

    if (queryExternalAuthorsContentsWithTotal === null) {
      return {
        total: 0,
        items: [],
      };
    }

    const { total, items } = queryExternalAuthorsContentsWithTotal;

    if (items === null) {
      return {
        total: 0,
        items: [],
      };
    }

    return {
      total,
      items: items.map(parseGraphQLExternalAuthor),
    };
  }

  async fetchById(id: string): Promise<ExternalAuthorResponse | null> {
    const { findExternalAuthorsContent } =
      await this.squidexGraphqlClient.request<
        FetchExternalAuthorQuery,
        FetchExternalAuthorQueryVariables
      >(FETCH_EXTERNAL_AUTHOR, { id });
    if (!findExternalAuthorsContent) {
      return null;
    }

    return parseGraphQLExternalAuthor(findExternalAuthorsContent);
  }
}
