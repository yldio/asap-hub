import {
  FetchGroupOptions,
  GroupDataObject,
  ListGroupDataObject,
} from '@asap-hub/model';
import { sanitiseForSquidex, SquidexGraphqlClient } from '@asap-hub/squidex';
import {
  FetchGroupQuery,
  FetchGroupQueryVariables,
  FetchGroupsQuery,
  FetchGroupsQueryVariables,
} from '../autogenerated-gql/graphql';
import { parseGraphQLGroup } from '../entities';
import { FETCH_GROUP, FETCH_GROUPS } from '../queries/groups.queries';

export interface GroupDataProvider {
  fetchById(id: string): Promise<GroupDataObject | null>;
  fetch(options: FetchGroupOptions): Promise<ListGroupDataObject>;
}

export class GroupSquidexDataProvider implements GroupDataProvider {
  squidexGraphqlClient: SquidexGraphqlClient;

  constructor(squidexGraphqlClient: SquidexGraphqlClient) {
    this.squidexGraphqlClient = squidexGraphqlClient;
  }

  async fetchById(id: string): Promise<GroupDataObject | null> {
    const { findGroupsContent: group } =
      await this.squidexGraphqlClient.request<
        FetchGroupQuery,
        FetchGroupQueryVariables
      >(FETCH_GROUP, { id });

    if (!group) {
      return null;
    }
    return parseGraphQLGroup(group);
  }

  async fetch(options: FetchGroupOptions): Promise<ListGroupDataObject> {
    const { search, take = 50, skip = 0 } = options;
    const filterList = (search || '')
      .split(' ')
      .filter(Boolean) // removes whitespaces
      .map(sanitiseForSquidex)
      .reduce(
        (acc: string[], word: string) =>
          acc.concat(
            `(${[
              [`contains(data/name/iv, '${word}')`],
              [`contains(data/description/iv, '${word}')`],
              [`contains(data/tags/iv, '${word}')`],
            ].join(' or ')})`,
          ),
        [],
      );

    if (options.filter) {
      if (options.filter.teamId) {
        if (options.filter.teamId.length > 1) {
          const teamIds = options.filter.teamId
            .map((teamId) => `'${teamId}'`)
            .join(', ');
          filterList.push(`data/teams/iv in [${teamIds}]`);
        } else {
          filterList.push(`data/teams/iv eq '${options.filter.teamId[0]}'`);
        }
      }

      if (options.filter.userId) {
        filterList.push(`data/leaders/iv/user eq '${options.filter.userId}'`);
      }
    }

    const { queryGroupsContentsWithTotal } =
      await this.squidexGraphqlClient.request<
        FetchGroupsQuery,
        FetchGroupsQueryVariables
      >(FETCH_GROUPS, { filter: filterList.join(' and '), top: take, skip });

    if (queryGroupsContentsWithTotal === null) {
      return {
        total: 0,
        items: [],
      };
    }

    const { total, items } = queryGroupsContentsWithTotal;

    if (items === null) {
      return {
        total: 0,
        items: [],
      };
    }

    return {
      total,
      items: items.map(parseGraphQLGroup),
    };
  }
}
