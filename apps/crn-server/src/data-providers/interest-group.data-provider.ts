import {
  FetchInterestGroupOptions,
  InterestGroupDataObject,
  ListInterestGroupDataObject,
} from '@asap-hub/model';
import { SquidexGraphqlClient } from '@asap-hub/squidex';
import { Filter } from 'odata-query';
import {
  FetchGroupQuery,
  FetchGroupQueryVariables,
  FetchGroupsQuery,
  FetchGroupsQueryVariables,
} from '../autogenerated-gql/graphql';
import { parseGraphQLInterestGroup } from './transformers';
import {
  FETCH_INTEREST_GROUP,
  FETCH_INTEREST_GROUPS,
} from '../queries/interest-groups.queries';
import { buildODataFilter } from '../utils/odata';
import { InterestGroupDataProvider } from './types';

export class InterestGroupSquidexDataProvider
  implements InterestGroupDataProvider
{
  squidexGraphqlClient: SquidexGraphqlClient;

  constructor(squidexGraphqlClient: SquidexGraphqlClient) {
    this.squidexGraphqlClient = squidexGraphqlClient;
  }

  async fetchById(id: string): Promise<InterestGroupDataObject | null> {
    const { findGroupsContent: group } =
      await this.squidexGraphqlClient.request<
        FetchGroupQuery,
        FetchGroupQueryVariables
      >(FETCH_INTEREST_GROUP, { id });

    if (!group) {
      return null;
    }
    return parseGraphQLInterestGroup(group);
  }

  async fetch(
    options: FetchInterestGroupOptions,
  ): Promise<ListInterestGroupDataObject> {
    const { search, take = 50, skip = 0 } = options;
    const filterList = (search || '')
      .split(' ')
      .filter(Boolean) // removes whitespaces
      .reduce(
        (acc: Filter[], word: string) =>
          acc.concat({
            or: [
              { 'data/name/iv': { contains: word } },
              { 'data/description/iv': { contains: word } },
              { 'data/tags/iv': { contains: word } },
            ],
          }),
        [],
      );

    if (options.filter) {
      if (options.filter.teamId) {
        if (options.filter.teamId.length > 1) {
          filterList.push({ 'data/teams/iv': { in: options.filter.teamId } });
        } else {
          filterList.push({ 'data/teams/iv': options.filter.teamId[0] });
        }
      }

      if (options.filter.userId) {
        filterList.push({ 'data/leaders/iv/user': options.filter.userId });
      }

      if ('active' in options.filter) {
        filterList.push({ 'data/active/iv': options.filter.active });
      }
    }

    const { queryGroupsContentsWithTotal } =
      await this.squidexGraphqlClient.request<
        FetchGroupsQuery,
        FetchGroupsQueryVariables
      >(FETCH_INTEREST_GROUPS, {
        filter: buildODataFilter(filterList),
        top: take,
        skip,
      });

    if (queryGroupsContentsWithTotal === null) {
      return {
        total: 0,
        items: [],
      };
    }

    const { total, items } = queryGroupsContentsWithTotal;

    if (items === null) {
      return {
        total: 0,
        items: [],
      };
    }

    return {
      total,
      items: items.map(parseGraphQLInterestGroup),
    };
  }
}
