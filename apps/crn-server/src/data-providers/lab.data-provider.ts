import {
  FetchOptions,
  LabDataObject,
  ListLabDataObject,
} from '@asap-hub/model';
import { sanitiseForSquidex, SquidexGraphqlClient } from '@asap-hub/squidex';
import { FetchLabsQuery } from '../autogenerated-gql/graphql';
import { FETCH_LABS } from '../queries/labs.queries';

import { LabDataProvider } from './types';

export class LabSquidexDataProvider implements LabDataProvider {
  constructor(private squidexGraphqlClient: SquidexGraphqlClient) {}

  async fetchById(): Promise<LabDataObject | null> {
    throw new Error('Method not implemented.');
  }
  async fetch(options: FetchOptions<string[]>): Promise<ListLabDataObject> {
    const { take = 8, skip = 0, search } = options;

    const queryFilter = (search || '')
      .split(' ')
      .filter(Boolean)
      .map(sanitiseForSquidex)
      .reduce(
        (acc: string[], word: string) =>
          acc.concat(`contains(data/name/iv, '${word}')`),
        [],
      )
      .join(' and ');

    const { queryLabsContentsWithTotal } =
      await this.squidexGraphqlClient.request<FetchLabsQuery>(FETCH_LABS, {
        filter: queryFilter,
        top: take,
        skip,
      });
    if (queryLabsContentsWithTotal === null) {
      return {
        total: 0,
        items: [],
      };
    }
    const { total, items } = queryLabsContentsWithTotal;

    if (items === null) {
      return {
        total: 0,
        items: [],
      };
    }

    return {
      total,
      items: items.map(({ id, flatData }) => ({
        id,
        name: flatData.name || '',
      })),
    };
  }
}
