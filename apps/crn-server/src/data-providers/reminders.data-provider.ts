import {
  FetchRemindersOptions,
  isResearchOutputDocumentType,
  ListReminderDataObject,
  ReminderDataObject,
  ResearchOutputPublishedReminder,
} from '@asap-hub/model';
import { SquidexGraphqlClient } from '@asap-hub/squidex';
import {
  FetchUserTeamsAndResearchOutputsQuery,
  FetchUserTeamsAndResearchOutputsQueryVariables,
  Maybe,
  Teams,
} from '../autogenerated-gql/graphql';
import { FETCH_USER_TEAMS_AND_RESEARCH_OUTPUTS } from '../queries/reminders.queries';

export interface ReminderDataProvider {
  fetch: (options: FetchRemindersOptions) => Promise<ListReminderDataObject>;
}

export class ReminderSquidexDataProvider implements ReminderDataProvider {
  constructor(private squidexGraphqlClient: SquidexGraphqlClient) {
    this.squidexGraphqlClient = squidexGraphqlClient;
  }

  async fetch(options: FetchRemindersOptions): Promise<ListReminderDataObject> {
    const filter = getReminderFilter();

    const { findUsersContent, queryResearchOutputsContents } =
      await this.squidexGraphqlClient.request<
        FetchUserTeamsAndResearchOutputsQuery,
        FetchUserTeamsAndResearchOutputsQueryVariables
      >(FETCH_USER_TEAMS_AND_RESEARCH_OUTPUTS, {
        filter,
        userId: options.userId,
      });

    const emptyResult = {
      total: 0,
      items: [],
    };

    if (!findUsersContent || !findUsersContent.flatData.teams) {
      return emptyResult;
    }

    const userTeamIds = getUserTeamIds(findUsersContent.flatData.teams);

    if (!queryResearchOutputsContents) {
      return emptyResult;
    }

    const researchOutputReminders = getResearchOutputRemindersFromQuery(
      queryResearchOutputsContents,
      userTeamIds,
    );

    const researchOutputsSorted = researchOutputReminders.sort(
      (a, b) =>
        new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime(),
    );

    return {
      total: researchOutputsSorted.length,
      items: researchOutputsSorted.map(
        mapResearchOutputReminderToReminderDataObject,
      ),
    };
  }
}

const getReminderFilter = (): string => {
  const date = new Date();
  date.setDate(date.getDate() - 1);
  const date24hAgo = date.toISOString();

  const filter = `data/publishDate/iv ge ${date24hAgo}`;
  return filter;
};

const getUserTeamIds = (
  teams: { id: Maybe<Pick<Teams, 'id'>[]> }[],
): string[] => {
  const teamWithId = (team: {
    id: Maybe<Pick<Teams, 'id'>[]>;
  }): team is { id: [{ id: string }] } => !!team.id && team.id.length > 0;

  const userTeams = teams.filter(teamWithId).map((team) => team.id[0].id);
  return userTeams;
};

const getResearchOutputRemindersFromQuery = (
  query: NonNullable<
    FetchUserTeamsAndResearchOutputsQuery['queryResearchOutputsContents']
  >,
  userTeamIds: string[],
): ResearchOutputReminder[] =>
  query.reduce<
    (ResearchOutputPublishedReminder['data'] & { publishDate: string })[]
  >((researchOutputReminders, researchOutput) => {
    if (!researchOutput.referencingTeamsContents) {
      return researchOutputReminders;
    }

    const researchOutputTeams = researchOutput.referencingTeamsContents.map(
      (team) => team.id,
    );

    const isInTeam = researchOutputTeams.some((team) =>
      userTeamIds.includes(team),
    );

    if (
      !researchOutput.flatData.documentType ||
      !isResearchOutputDocumentType(researchOutput.flatData.documentType) ||
      !researchOutput.flatData.title
    ) {
      return researchOutputReminders;
    }

    if (isInTeam) {
      researchOutputReminders.push({
        researchOutputId: researchOutput.id,
        publishDate: researchOutput.flatData.publishDate,
        documentType: researchOutput.flatData.documentType,
        title: researchOutput.flatData.title,
      });
    }

    return researchOutputReminders;
  }, []);

const mapResearchOutputReminderToReminderDataObject = (
  researchOutputReminder: ResearchOutputReminder,
): ReminderDataObject => ({
  id: `research-output-published-${researchOutputReminder.researchOutputId}`,
  entity: 'Research Output',
  type: 'Published',
  data: {
    researchOutputId: researchOutputReminder.researchOutputId,
    documentType: researchOutputReminder.documentType,
    title: researchOutputReminder.title,
  },
});

type ResearchOutputReminder = {
  researchOutputId: string;
  documentType:
    | 'Grant Document'
    | 'Presentation'
    | 'Dataset'
    | 'Bioinformatics'
    | 'Protocol'
    | 'Lab Resource'
    | 'Article';
  title: string;
} & {
  publishDate: string;
};
