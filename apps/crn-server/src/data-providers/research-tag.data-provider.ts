import {
  isResearchTagCategory,
  isResearchTagEntity,
  ListResearchTagDataObject,
} from '@asap-hub/model';
import { sanitiseForSquidex, SquidexGraphqlClient } from '@asap-hub/squidex';
import {
  FetchResearchTagsQuery,
  FetchResearchTagsQueryVariables,
} from '../autogenerated-gql/graphql';
import { FETCH_RESEARCH_TAGS } from '../queries/research-tags.queries';
import { ResearchTagDataProvider, FetchResearchTagsOptions } from './types';
import logger from '../utils/logger';

export class ResearchTagSquidexDataProvider implements ResearchTagDataProvider {
  squidexGraphqlClient: SquidexGraphqlClient;

  constructor(squidexGraphqlClient: SquidexGraphqlClient) {
    this.squidexGraphqlClient = squidexGraphqlClient;
  }

  async fetchById(): Promise<null> {
    throw new Error('Method not implemented.');
  }

  async fetch(
    options: FetchResearchTagsOptions,
  ): Promise<ListResearchTagDataObject> {
    const { take = 8, skip = 0, filter } = options;

    const typeFilter =
      filter?.type && `data/types/iv eq '${sanitiseForSquidex(filter.type)}'`;
    const entityFilter =
      filter?.entity &&
      `data/entities/iv eq '${sanitiseForSquidex(filter.entity)}'`;

    const graphqlFilter = [
      typeFilter && `(${typeFilter})`,
      entityFilter && `(${entityFilter})`,
    ]
      .filter(Boolean)
      .join(' and ');

    const { queryResearchTagsContentsWithTotal } =
      await this.squidexGraphqlClient.request<
        FetchResearchTagsQuery,
        FetchResearchTagsQueryVariables
      >(FETCH_RESEARCH_TAGS, {
        top: take,
        skip,
        filter: graphqlFilter,
      });

    if (queryResearchTagsContentsWithTotal === null) {
      logger.warn('queryResearchTagsContentsWithTotal returned null');
      return {
        total: 0,
        items: [],
      };
    }

    const { total, items: researchTags } = queryResearchTagsContentsWithTotal;

    if (researchTags === null) {
      logger.warn('queryResearchTagsContentsWithTotal items returned null');
      return {
        total: 0,
        items: [],
      };
    }

    return {
      total,
      items: researchTags.map((item) => {
        if (
          item.flatData.category !== null &&
          !isResearchTagCategory(item.flatData.category)
        ) {
          throw new TypeError('Invalid category received from Squidex');
        }

        if (
          item.flatData.entities &&
          !item.flatData.entities.every(isResearchTagEntity)
        ) {
          throw new TypeError('Invalid entity received from Squidex');
        }

        return {
          id: item.id,
          name: item.flatData.name || '',
          category: item.flatData.category || undefined,
          types: item.flatData.types || undefined,
          entities: item.flatData.entities || undefined,
        };
      }),
    };
  }
}
