import {
  FetchOptions,
  ListTeamDataObject,
  TeamCreateDataObject,
  TeamDataObject,
  TeamTool,
  TeamUpdateDataObject,
} from '@asap-hub/model';
import {
  InputTeam,
  RestTeam,
  sanitiseForSquidex,
  SquidexGraphqlClient,
  SquidexRestClient,
} from '@asap-hub/squidex';
import {
  FetchTeamQuery,
  FetchTeamQueryVariables,
  FetchTeamsQuery,
  FetchTeamsQueryVariables,
} from '../autogenerated-gql/graphql';
import { parseGraphQLTeam } from '../entities';
import { FETCH_TEAM, FETCH_TEAMS } from '../queries/teams.queries';
import logger from '../utils/logger';

export interface TeamDataProvider {
  fetchById(id: string): Promise<TeamDataObject | null>;
  fetch(options: FetchTeamsOptions): Promise<ListTeamDataObject>;
  update(id: string, update: TeamUpdateDataObject): Promise<void>;
  create(input: TeamCreateDataObject): Promise<string>;
}

export class TeamSquidexDataProvider implements TeamDataProvider {
  squidexGraphqlClient: SquidexGraphqlClient;
  teamSquidexRestClient: SquidexRestClient<RestTeam, InputTeam>;

  constructor(
    squidexGraphqlClient: SquidexGraphqlClient,
    teamSquidexRestClient: SquidexRestClient<RestTeam>,
  ) {
    this.squidexGraphqlClient = squidexGraphqlClient;
    this.teamSquidexRestClient = teamSquidexRestClient;
  }

  async fetch(options: FetchTeamsOptions): Promise<ListTeamDataObject> {
    const { take = 8, skip = 0, search, filter } = options;

    const searchQ = (search || '')
      .split(' ')
      .filter(Boolean) // removes whitespaces
      .map(sanitiseForSquidex)
      .reduce(
        (acc: string[], word: string) =>
          acc.concat(
            `(${[
              [`contains(data/displayName/iv, '${word}')`],
              [`contains(data/projectTitle/iv, '${word}')`],
              [`contains(data/expertiseAndResourceTags/iv, '${word}')`],
            ].join(' or ')})`,
          ),
        [],
      )
      .join(' and ');

    const activeQuery =
      filter?.active === true
        ? 'empty(data/inactiveSince/iv)'
        : filter?.active === false
        ? 'exists(data/inactiveSince/iv)'
        : '';

    const { queryTeamsContentsWithTotal } =
      await this.squidexGraphqlClient.request<
        FetchTeamsQuery,
        FetchTeamsQueryVariables
      >(FETCH_TEAMS, {
        filter:
          searchQ && activeQuery
            ? [searchQ, activeQuery].join(' and ')
            : searchQ || activeQuery,
        top: take,
        skip,
      });

    if (queryTeamsContentsWithTotal === null) {
      logger.warn('queryTeamsContentsWithTotal returned null');
      return {
        total: 0,
        items: [],
      };
    }
    const { total, items: teams } = queryTeamsContentsWithTotal;

    if (teams === null) {
      logger.warn('queryTeamsContentsWithTotal items returned null');
      return {
        total: 0,
        items: [],
      };
    }

    return {
      total,
      items: teams.map(parseGraphQLTeam),
    };
  }

  async fetchById(teamId: string): Promise<TeamDataObject | null> {
    const teamResponse = await this.squidexGraphqlClient.request<
      FetchTeamQuery,
      FetchTeamQueryVariables
    >(FETCH_TEAM, { id: teamId });

    const { findTeamsContent: team } = teamResponse;

    if (!team) {
      return null;
    }

    return parseGraphQLTeam(team);
  }

  async update(id: string, update: TeamUpdateDataObject): Promise<void> {
    const cleanTools = update.tools.map((tool) =>
      Object.entries(tool).reduce(
        (acc, [key, value]) =>
          value?.trim && value?.trim() === ''
            ? acc // deleted field
            : { ...acc, [key]: value },
        {} as TeamTool,
      ),
    );

    await this.teamSquidexRestClient.patch(id, { tools: { iv: cleanTools } });
  }

  async create(input: TeamCreateDataObject): Promise<string> {
    const inputTeam: InputTeam['data'] = {
      applicationNumber: { iv: input.applicationNumber },
      displayName: { iv: input.displayName },
      inactiveSince: { iv: input.inactiveSince || null },
      expertiseAndResourceTags: { iv: input.expertiseAndResourceTags },
      projectTitle: { iv: input.projectTitle },
      outputs: { iv: input.researchOutputIds || [] },
      projectSummary: { iv: input.projectSummary || null },
      proposal: { iv: [] },
      tools: { iv: input.tools || null },
    };
    const { id } = await this.teamSquidexRestClient.create(inputTeam);

    return id;
  }
}

type TeamFilter = {
  active?: boolean;
};

export type FetchTeamsOptions = FetchOptions<TeamFilter>;
