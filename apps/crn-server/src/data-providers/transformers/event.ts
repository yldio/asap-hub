import { parseRichText, RichTextFromQuery } from '@asap-hub/contentful';
import {
  EventSpeaker,
  EventSpeakerExternalUserData,
  EventSpeakerUserData,
} from '@asap-hub/model';

import {
  EventContentFragment,
  ExternalAuthors,
  ExternalAuthorsFlatDataDto,
} from '../../autogenerated-gql/graphql';
import { createUrl } from '../../utils/urls';

export const getMeetingMaterial = <T>(
  material: T,
  isPermanentlyUnavailable: boolean,
  isStale: boolean,
  emptyState: T,
): T | null => {
  const isEmpty = !(Array.isArray(material) ? material.length : material);
  if (isPermanentlyUnavailable || (isEmpty && isStale)) {
    return null;
  }
  return isEmpty ? emptyState : material;
};

export type MeetingMaterial = {
  title: string;
  url: string;
};

export const getContentfulEventMaterial = <ReturnType, EmptyStateType>(
  material: MeetingMaterial[] | RichTextFromQuery | null,
  isPermanentlyUnavailable: boolean,
  isStale: boolean,
  emptyState: EmptyStateType,
): ReturnType | EmptyStateType | null => {
  const isEmpty = !(Array.isArray(material) ? material.length : material);

  if (isPermanentlyUnavailable || (isEmpty && isStale)) {
    return null;
  }

  if (isEmpty) {
    return emptyState;
  }

  return Array.isArray(material)
    ? (material as ReturnType)
    : material && (parseRichText(material) as ReturnType);
};

export type GraphqlEventSpeakerUser = Extract<
  NonNullable<
    NonNullable<EventContentFragment['flatData']['speakers']>[number]['user']
  >[number],
  { __typename: 'Users' }
>;

export type GraphqlEventSpeakerExternalUser = {
  __typename: 'ExternalAuthors';
} & Pick<ExternalAuthors, 'id'> & {
    flatData: Pick<ExternalAuthorsFlatDataDto, 'name' | 'orcid'>;
  };

export const parseEventSpeakerUser = (
  user: GraphqlEventSpeakerUser,
): EventSpeakerUserData => {
  const flatAvatar = user.flatData.avatar || [];

  return {
    id: user.id,
    alumniSinceDate: user.flatData.alumniSinceDate ?? undefined,
    firstName: user.flatData.firstName ?? undefined,
    lastName: user.flatData.lastName ?? undefined,
    displayName: `${user.flatData.firstName} ${user.flatData.lastName}`,
    avatarUrl: flatAvatar.length
      ? createUrl(flatAvatar.map((a) => a.id))[0]
      : undefined,
  };
};

export const parseEventSpeakerExternalUser = (
  user: GraphqlEventSpeakerExternalUser,
): EventSpeakerExternalUserData => ({
  name: user.flatData.name || '',
  orcid: user.flatData.orcid || '',
});

export const parseGraphQLSpeakers = (
  speakers: NonNullable<EventContentFragment['flatData']['speakers']>,
): EventSpeaker[] =>
  speakers.reduce((speakerList: EventSpeaker[], speaker) => {
    const team = speaker?.team?.[0];
    const user = speaker?.user?.[0];

    if (user?.__typename === 'ExternalAuthors') {
      speakerList.push({
        externalUser: parseEventSpeakerExternalUser(user),
      });
      return speakerList;
    }

    if (!team) {
      return speakerList;
    }

    const role =
      user?.flatData.teams
        ?.filter((t) => t.id && t.id[0]?.id === team.id)
        .filter((s) => s.role)[0]?.role || undefined;

    if (!user || !role || user.flatData.onboarded !== true) {
      speakerList.push({
        team: {
          id: team.id,
          displayName: team.flatData.displayName ?? '',
          inactiveSince: team.flatData.inactiveSince ?? undefined,
        },
      });
      return speakerList;
    }

    speakerList.push({
      team: {
        id: team.id,
        displayName: team.flatData.displayName ?? '',
        inactiveSince: team.flatData.inactiveSince ?? undefined,
      },
      user: parseEventSpeakerUser(user),
      role,
    });
    return speakerList;
  }, []);
