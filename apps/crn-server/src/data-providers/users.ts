import { GenericError } from '@asap-hub/errors';
import {
  ListUserDataObject,
  UserDataObject,
  UserPatchDataObject,
} from '@asap-hub/model';
import {
  RestUser,
  sanitiseForSquidex,
  SquidexGraphqlClient,
  SquidexRest,
  SquidexRestClient,
} from '@asap-hub/squidex';
import Intercept from 'apr-intercept';
import {
  FetchUserQuery,
  FetchUserQueryVariables,
  FetchUsersQuery,
  FetchUsersQueryVariables,
} from '../autogenerated-gql/graphql';
import { FetchUsersOptions } from '../controllers/users';
import {
  parseGraphQLUserToDataObject,
  parseUserToDataObject,
} from '../entities';
import { FETCH_USER, FETCH_USERS } from '../queries/users.queries';
import { fetchOrcidProfile, transformOrcidWorks } from '../utils/fetch-orcid';

export interface UserDataProvider {
  fetchById(id: string): Promise<UserDataObject | null>;
  update(id: string, update: UserPatchDataObject): Promise<void>;
  fetch(options: FetchUsersOptions): Promise<ListUserDataObject>;
  connectByCode(
    welcomeCode: string,
    userId: string,
  ): Promise<UserDataObject | null>;
  syncOrcidProfile(
    id: string,
    cachedUser?: RestUser | undefined,
  ): Promise<UserDataObject>;
}
export default class Users implements UserDataProvider {
  squidexGraphlClient: SquidexGraphqlClient;
  userSquidexRestClient: SquidexRestClient<RestUser>;

  constructor(squidexGraphlClient: SquidexGraphqlClient) {
    this.squidexGraphlClient = squidexGraphlClient;
    this.userSquidexRestClient = new SquidexRest<RestUser>('users');
  }
  async fetchById(id: string): Promise<UserDataObject | null> {
    const { findUsersContent } = await this.queryFetchByIdData(id);
    if (!findUsersContent) {
      return null;
    }
    return parseGraphQLUserToDataObject(findUsersContent);
  }

  async update(id: string, userToUpdate: UserPatchDataObject): Promise<void> {
    const isFullUpdate = shouldDoFullUpdate(userToUpdate);

    const cleanedUser = cleanUser(userToUpdate);

    if (isFullUpdate) {
      const existingUser = await this.userSquidexRestClient.fetchById(id);
      await this.userSquidexRestClient.put(id, {
        ...existingUser.data,
        ...cleanedUser,
      });
    } else {
      await this.userSquidexRestClient.patch(id, cleanedUser);
    }
  }
  async fetch(options: FetchUsersOptions): Promise<ListUserDataObject> {
    const queryFilter = generateFetchQueryFilter(options);
    const { take = 8, skip = 0 } = options;
    return this.queryForUsers(queryFilter, take, skip);
  }

  async connectByCode(
    welcomeCode: string,
    userId: string,
  ): Promise<UserDataObject | null> {
    const user = await this.queryByCode(welcomeCode);

    if (!user) {
      return null;
    }

    if (user.data.connections.iv?.find(({ code }) => code === userId)) {
      return parseUserToDataObject(user);
    }

    const connections = (user.data.connections.iv || []).concat([
      { code: userId },
    ]);

    const res = await this.userSquidexRestClient.patch(user.id, {
      email: { iv: user.data.email.iv },
      connections: { iv: connections },
    });

    return parseUserToDataObject(res);
  }

  async syncOrcidProfile(
    id: string,
    cachedUser: RestUser | undefined = undefined,
  ): Promise<UserDataObject> {
    let fetchedUser;
    if (!cachedUser) {
      fetchedUser = await this.userSquidexRestClient.fetchById(id);
    }

    const user = cachedUser || (fetchedUser as RestUser);

    const [error, res] = await Intercept(
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      fetchOrcidProfile(user!.data.orcid!.iv),
    );

    const updateToUser: Partial<RestUser['data']> = {
      email: { iv: user.data.email.iv },
      orcidLastSyncDate: { iv: new Date().toISOString() },
    };

    if (!error) {
      const { lastModifiedDate, works } = transformOrcidWorks(res);
      updateToUser.orcidLastModifiedDate = { iv: lastModifiedDate };
      updateToUser.orcidWorks = { iv: works.slice(0, 10) };
    }

    const updatedUser = await this.userSquidexRestClient.patch(
      user.id,
      updateToUser,
    );
    return parseUserToDataObject(updatedUser);
  }
  private async queryForUsers(filter: string, top: number, skip: number) {
    const { queryUsersContentsWithTotal } = await this.queryFetchData(
      filter,
      top,
      skip,
    );
    const { total = 0, items = [] } = queryUsersContentsWithTotal || {};

    return {
      total: items ? total : 0,
      items: (items || []).map(parseGraphQLUserToDataObject),
    };
  }
  private async queryFetchData(filter: string, top: number, skip: number) {
    return this.squidexGraphlClient.request<
      FetchUsersQuery,
      FetchUsersQueryVariables
    >(FETCH_USERS, { filter, top, skip });
  }
  private async queryFetchByIdData(id: string) {
    return this.squidexGraphlClient.request<
      FetchUserQuery,
      FetchUserQueryVariables
    >(FETCH_USER, { id });
  }

  private async queryByCode(code: string): Promise<RestUser | undefined> {
    const [err, res] = await Intercept(
      this.userSquidexRestClient.client
        .get('users', {
          searchParams: {
            $top: 1,
            $filter: `data/connections/iv/code eq '${code}'`,
          },
        })
        .json() as Promise<{ items: RestUser[] }>,
    );

    if (err) {
      throw new GenericError(err.message);
    }

    if (res.items.length === 0 || !res.items[0]) {
      return undefined;
    }

    return res.items[0];
  }
}

const shouldDoFullUpdate = (userToUpdate: UserPatchDataObject) =>
  userToUpdate.teams?.length ||
  Object.values(userToUpdate).some(
    (value) => value.trim && value.trim() === '',
  );
const cleanUser = (userToUpdate: UserPatchDataObject) =>
  Object.entries(userToUpdate).reduce((acc, [key, value]) => {
    const setValue = (item: unknown) => ({ ...acc, [key]: { iv: item } });
    if (value.trim && value.trim() === '') {
      return setValue(null);
    }

    // map flat questions to squidex format
    if (key === 'questions' && value.length) {
      return setValue(value.map((question: string) => ({ question })));
    }

    // we get an object but squidex expects an array of objects
    if (key === 'social') {
      return setValue([value]);
    }

    return setValue(value);
  }, {} as { [key: string]: { iv: unknown } });

const generateFetchQueryFilter = ({ search, filter }: FetchUsersOptions) => {
  const searchFilter = [
    ...(search || '')
      .split(' ')
      .filter(Boolean) // removes whitespaces
      .map(sanitiseForSquidex)
      .reduce(
        (acc: string[], word: string) =>
          acc.concat(
            `(${[
              [`contains(data/firstName/iv, '${word}')`],
              [`contains(data/lastName/iv, '${word}')`],
              [`contains(data/institution/iv, '${word}')`],
              [`contains(data/expertiseAndResourceTags/iv, '${word}')`],
            ].join(' or ')})`,
          ),
        [],
      ),
  ].join(' and ');
  const {
    role,
    labId,
    teamId,
    code,
    onboarded = true,
    hidden = true,
  } = filter || {};
  const filterRoles = (role || [])
    .reduce(
      (acc: string[], word: string) =>
        acc.concat([`data/teams/iv/role eq '${word}'`]),
      [],
    )
    .join(' or ');

  const filterLabs = (labId || [])
    .reduce(
      (acc: string[], id: string) => acc.concat([`data/labs/iv eq '${id}'`]),
      [],
    )
    .join(' or ');

  const filterTeams = (teamId || [])
    .reduce(
      (acc: string[], id: string) =>
        acc.concat([`data/teams/iv/id eq '${id}'`]),
      [],
    )
    .join(' or ');
  const filterCode = code && `data/connections/iv/code eq '${code}'`;

  const filterHidden = hidden && "data/role/iv ne 'Hidden'";
  const filterNonOnboarded = onboarded && 'data/onboarded/iv eq true';

  const queryFilter = [
    filterTeams && `(${filterTeams})`,
    filterRoles && `(${filterRoles})`,
    filterLabs && `(${filterLabs})`,
    filterCode,
    filterNonOnboarded,
    filterHidden,
    searchFilter && `(${searchFilter})`,
  ]
    .filter(Boolean)
    .join(' and ')
    .trim();
  return queryFilter;
};
