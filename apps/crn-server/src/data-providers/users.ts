import { UserDataObject, UserPatchDataObject } from '@asap-hub/model';
import {
  config,
  RestUser,
  sanitiseForSquidex,
  SquidexGraphqlClient,
  SquidexRest,
  SquidexRestClient,
} from '@asap-hub/squidex';
import FormData from 'form-data';
import mime from 'mime-types';
import {
  FetchUserQuery,
  FetchUserQueryVariables,
  FetchUsersQuery,
  FetchUsersQueryVariables,
} from '../autogenerated-gql/graphql';
import { FetchUsersOptions } from '../controllers/users';
import { parseGraphQLUserToDataObject } from '../entities';
import { FETCH_USER, FETCH_USERS } from '../queries/users.queries';

export interface UserDataProvider {
  fetchById(id: string): Promise<UserDataObject | null>;
  update(id: string, update: UserPatchDataObject): Promise<void>;
  fetch(options: FetchUsersOptions): Promise<UserDataObject[]>;
  fetchByCode(code: string): Promise<UserDataObject[]>;
  updateAvatar(id: string, avatar: Buffer, contentType: string): Promise<void>;
}
export default function users(
  squidexGraphlClient: SquidexGraphqlClient,
): UserDataProvider {
  const userSquidexRestClient = new SquidexRest<RestUser>('users');
  const fetchById = async (id: string) => {
    const { findUsersContent } = await queryFetchByIdData(
      squidexGraphlClient,
      id,
    );
    if (!findUsersContent) {
      return null;
    }
    return parseGraphQLUserToDataObject(findUsersContent);
  };
  const update = async (id: string, userToUpdate: UserPatchDataObject) => {
    const isFullUpdate = shouldDoFullUpdate(userToUpdate);

    const cleanedUser = cleanUser(userToUpdate);

    if (isFullUpdate) {
      const existingUser = await userSquidexRestClient.fetchById(id);
      await userSquidexRestClient.put(id, {
        ...existingUser.data,
        ...cleanedUser,
      });
    } else {
      await userSquidexRestClient.patch(id, cleanedUser);
    }
  };
  const fetch = async (options: FetchUsersOptions) => {
    const queryFilter = generateFetchQueryFilter(options);
    const { take = 8, skip = 0 } = options;
    return queryForUsers(squidexGraphlClient, queryFilter, take, skip);
  };
  const fetchByCode = async (code: string) => {
    const filter = `data/connections/iv/code eq '${code}'`;
    return queryForUsers(squidexGraphlClient, filter, 1, 0);
  };
  const updateAvatar = async (
    id: string,
    avatar: Buffer,
    contentType: string,
  ) => {
    const assetId = await uploadAvatar(
      userSquidexRestClient,
      id,
      avatar,
      contentType,
    );

    await userSquidexRestClient.patch(id, { avatar: { iv: [assetId] } });
  };

  return { fetchById, update, fetch, fetchByCode, updateAvatar };
}
const shouldDoFullUpdate = (userToUpdate: UserPatchDataObject) =>
  userToUpdate.teams?.length ||
  Object.values(userToUpdate).some(
    (value) => value.trim && value.trim() === '',
  );

async function queryForUsers(
  squidexGraphlClient: SquidexGraphqlClient,
  filter: string,
  top: number,
  skip: number,
) {
  const { queryUsersContentsWithTotal } = await queryFetchData(
    squidexGraphlClient,
    filter,
    top,
    skip,
  );
  if (!(queryUsersContentsWithTotal && queryUsersContentsWithTotal.items)) {
    return [];
  }
  return queryUsersContentsWithTotal.items.map(parseGraphQLUserToDataObject);
}
const cleanUser = (userToUpdate: UserPatchDataObject) =>
  Object.entries(userToUpdate).reduce((acc, [key, value]) => {
    const setValue = (item: unknown) => ({ ...acc, [key]: { iv: item } });
    if (value.trim && value.trim() === '') {
      return setValue(null);
    }

    // map flat questions to squidex format
    if (key === 'questions' && value.length) {
      return setValue(value.map((question: string) => ({ question })));
    }

    // we get an object but squidex expects an array of objects
    if (key === 'social') {
      return setValue([value]);
    }

    return setValue(value);
  }, {} as { [key: string]: { iv: unknown } });

async function queryFetchByIdData(
  squidexGraphlClient: SquidexGraphqlClient,
  id: string,
) {
  return squidexGraphlClient.request<FetchUserQuery, FetchUserQueryVariables>(
    FETCH_USER,
    { id },
  );
}

async function queryFetchData(
  squidexGraphlClient: SquidexGraphqlClient,
  filter: string,
  top: number,
  skip: number,
) {
  return squidexGraphlClient.request<FetchUsersQuery, FetchUsersQueryVariables>(
    FETCH_USERS,
    { filter, top, skip },
  );
}

function generateFetchQueryFilter(options: FetchUsersOptions) {
  const searchFilter = [
    ...(options.search || '')
      .split(' ')
      .filter(Boolean) // removes whitespaces
      .map(sanitiseForSquidex)
      .reduce(
        (acc: string[], word: string) =>
          acc.concat(
            `(${[
              [`contains(data/firstName/iv, '${word}')`],
              [`contains(data/lastName/iv, '${word}')`],
              [`contains(data/institution/iv, '${word}')`],
              [`contains(data/expertiseAndResourceTags/iv, '${word}')`],
            ].join(' or ')})`,
          ),
        [],
      ),
  ].join(' and ');
  const filterRoles = (options?.filter?.role || [])
    .reduce(
      (acc: string[], word: string) =>
        acc.concat([`data/teams/iv/role eq '${word}'`]),
      [],
    )
    .join(' or ');

  const filterLabs = (options?.filter?.labId || [])
    .reduce(
      (acc: string[], labId: string) =>
        acc.concat([`data/labs/iv eq '${labId}'`]),
      [],
    )
    .join(' or ');

  const filterTeams = (options?.filter?.teamId || [])
    .reduce(
      (acc: string[], teamId: string) =>
        acc.concat([`data/teams/iv/id eq '${teamId}'`]),
      [],
    )
    .join(' or ');
  const filterHidden = "data/role/iv ne 'Hidden'";
  const filterNonOnboarded = 'data/onboarded/iv eq true';

  const queryFilter = [
    filterTeams && `(${filterTeams})`,
    filterRoles && `(${filterRoles})`,
    filterLabs && `(${filterLabs})`,
    filterNonOnboarded,
    filterHidden,
    searchFilter && `(${searchFilter})`,
  ]
    .filter(Boolean)
    .join(' and ')
    .trim();
  return queryFilter;
}

async function uploadAvatar(
  userSquidexRestClient: SquidexRestClient<RestUser>,
  id: string,
  avatar: Buffer,
  contentType: string,
): Promise<string> {
  const form = new FormData();
  form.append('file', avatar, {
    filename: `${id}.${mime.extension(contentType)}`,
    contentType,
  });

  const { id: assetId } = await userSquidexRestClient.client
    .post('assets', {
      prefixUrl: `${config.baseUrl}/api/apps/${config.appName}`,
      headers: form.getHeaders(),
      body: form,
    })
    .json();
  return assetId;
}
