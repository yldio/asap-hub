import {
  FetchOptions,
  WorkingGroupDataObject,
  WorkingGroupLeader,
  WorkingGroupListDataObject,
  WorkingGroupMember,
} from '@asap-hub/model';
import { SquidexGraphqlClient } from '@asap-hub/squidex';
import {
  FetchWorkingGroupQuery,
  FetchWorkingGroupQueryVariables,
  FetchWorkingGroupsQuery,
  FetchWorkingGroupsQueryVariables,
} from '../autogenerated-gql/graphql';
import {
  FETCH_WORKING_GROUP,
  FETCH_WORKING_GROUPS,
} from '../queries/working-groups.queries';

export interface WorkingGroupDataProvider {
  fetchById(id: string): Promise<WorkingGroupDataObject | null>;
  fetch(options: FetchOptions): Promise<WorkingGroupListDataObject>;
}

export class WorkingGroupSquidexDataProvider
  implements WorkingGroupDataProvider
{
  constructor(private squidexGraphqlClient: SquidexGraphqlClient) {}

  async fetchById(id: string): Promise<WorkingGroupDataObject | null> {
    const { findWorkingGroupsContent: workingGroup } =
      await this.squidexGraphqlClient.request<
        FetchWorkingGroupQuery,
        FetchWorkingGroupQueryVariables
      >(FETCH_WORKING_GROUP, { id });

    if (!workingGroup) {
      return null;
    }

    return parseGraphQlWorkingGroup(workingGroup);
  }

  async fetch(options: FetchOptions): Promise<WorkingGroupListDataObject> {
    const { take = 10, skip = 0 } = options;

    const { queryWorkingGroupsContentsWithTotal } =
      await this.squidexGraphqlClient.request<
        FetchWorkingGroupsQuery,
        FetchWorkingGroupsQueryVariables
      >(FETCH_WORKING_GROUPS, {
        filter: '',
        top: take,
        skip,
      });

    if (queryWorkingGroupsContentsWithTotal === null) {
      return {
        total: 0,
        items: [],
      };
    }

    const { items, total } = queryWorkingGroupsContentsWithTotal;

    if (items === null) {
      return {
        total: 0,
        items: [],
      };
    }

    return {
      total,
      items: items.map(parseGraphQlWorkingGroup),
    };
  }
}

export const parseGraphQlWorkingGroup = (
  workingGroupGraphQl: NonNullable<
    FetchWorkingGroupQuery['findWorkingGroupsContent']
  >,
): WorkingGroupDataObject => {
  const workingGroup: WorkingGroupDataObject = {
    id: workingGroupGraphQl.id,
    title: workingGroupGraphQl.flatData.title || '',
    description: workingGroupGraphQl.flatData.description || '',
    shortText: workingGroupGraphQl.flatData.shortText || '',
    members:
      (workingGroupGraphQl.flatData.members?.flatMap((member) =>
        member.user?.[0]
          ? [
              {
                ...member,
                user: {
                  ...member.user[0],
                  displayName: `${member.user[0].flatData.firstName} ${member.user[0].flatData.lastName}`,
                },
              },
            ]
          : [],
      ) as unknown as WorkingGroupMember[]) || [],
    leaders:
      (workingGroupGraphQl.flatData.leaders?.flatMap((leader) =>
        leader.user?.[0]
          ? [
              {
                ...leader,
                user: {
                  ...leader.user[0],
                  displayName: `${leader.user[0].flatData.firstName} ${leader.user[0].flatData.lastName}`,
                },
              },
            ]
          : [],
      ) as unknown as WorkingGroupLeader[]) || [],
    pointOfContact: undefined,
    complete: false,
    deliverables: workingGroupGraphQl.flatData.deliverables
      ? workingGroupGraphQl.flatData.deliverables.map(
          (deliverable) =>
            ({
              status: deliverable.status ?? 'Not Started',
              description: deliverable.description ?? '',
            } as WorkingGroupDataObject['deliverables'][number]),
        )
      : [],
    lastModifiedDate: workingGroupGraphQl.lastModified,
  };

  if (!workingGroupGraphQl.flatData.externalLink) {
    return workingGroup;
  }

  if (!workingGroupGraphQl.flatData.externalLinkText) {
    return {
      ...workingGroup,
      externalLink: workingGroupGraphQl.flatData.externalLink,
    };
  }

  return {
    ...workingGroup,
    externalLink: workingGroupGraphQl.flatData.externalLink,
    externalLinkText: workingGroupGraphQl.flatData.externalLinkText,
  };
};
