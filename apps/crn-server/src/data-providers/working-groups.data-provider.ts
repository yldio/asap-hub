import {
  FetchOptions,
  WorkingGroupDataObject,
  WorkingGroupListDataObject,
} from '@asap-hub/model';
import { SquidexGraphqlClient } from '@asap-hub/squidex';
import {
  FetchWorkingGroupQuery,
  FetchWorkingGroupQueryVariables,
  FetchWorkingGroupsQuery,
  FetchWorkingGroupsQueryVariables,
} from '../autogenerated-gql/graphql';
import { parseGraphQlWorkingGroup } from '../entities/working-group';
import {
  FETCH_WORKING_GROUP,
  FETCH_WORKING_GROUPS,
} from '../queries/working-groups.queries';

export interface WorkingGroupDataProvider {
  fetchById(id: string): Promise<WorkingGroupDataObject | null>;
  fetch(options: FetchOptions): Promise<WorkingGroupListDataObject>;
}

export class WorkingGroupSquidexDataProvider
  implements WorkingGroupDataProvider
{
  constructor(private squidexGraphqlClient: SquidexGraphqlClient) {}

  async fetchById(id: string): Promise<WorkingGroupDataObject | null> {
    const { findWorkingGroupsContent: workingGroup } =
      await this.squidexGraphqlClient.request<
        FetchWorkingGroupQuery,
        FetchWorkingGroupQueryVariables
      >(FETCH_WORKING_GROUP, { id });

    if (!workingGroup) {
      return null;
    }

    return parseGraphQlWorkingGroup(workingGroup);
  }

  async fetch(options: FetchOptions): Promise<WorkingGroupListDataObject> {
    const { take = 10, skip = 0 } = options;

    const { queryWorkingGroupsContentsWithTotal } =
      await this.squidexGraphqlClient.request<
        FetchWorkingGroupsQuery,
        FetchWorkingGroupsQueryVariables
      >(FETCH_WORKING_GROUPS, {
        filter: '',
        top: take,
        skip,
      });

    if (queryWorkingGroupsContentsWithTotal === null) {
      return {
        total: 0,
        items: [],
      };
    }

    const { items, total } = queryWorkingGroupsContentsWithTotal;

    if (items === null) {
      return {
        total: 0,
        items: [],
      };
    }

    return {
      total,
      items: items.map(parseGraphQlWorkingGroup),
    };
  }
}
