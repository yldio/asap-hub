import { WorkingGroupDataObject } from '@asap-hub/model';
import { SquidexGraphqlClient } from '@asap-hub/squidex';
import {
  FetchWorkingGroupQuery,
  FetchWorkingGroupQueryVariables,
} from '../autogenerated-gql/graphql';
import { FETCH_WORKING_GROUP } from '../queries/working-groups.queries';

export interface WorkingGroupDataProvider {
  fetchById(id: string): Promise<WorkingGroupDataObject | null>;
}

export class WorkingGroupSquidexDataProvider
  implements WorkingGroupDataProvider
{
  constructor(private squidexGraphqlClient: SquidexGraphqlClient) {}

  async fetchById(id: string): Promise<WorkingGroupDataObject | null> {
    const { findWorkingGroupsContent: workingGroup } =
      await this.squidexGraphqlClient.request<
        FetchWorkingGroupQuery,
        FetchWorkingGroupQueryVariables
      >(FETCH_WORKING_GROUP, { id });

    if (!workingGroup) {
      return null;
    }

    return parseGraphQlWorkingGroup(workingGroup);
  }
}

export const parseGraphQlWorkingGroup = (
  workingGroupGraphQl: NonNullable<
    FetchWorkingGroupQuery['findWorkingGroupsContent']
  >,
): WorkingGroupDataObject => {
  const workingGroup: WorkingGroupDataObject = {
    id: workingGroupGraphQl.id,
    title: workingGroupGraphQl.flatData.title || '',
    description: workingGroupGraphQl.flatData.description || '',
    complete: !!workingGroupGraphQl.flatData.complete,
    deliverables: [],
    lastModifiedDate: workingGroupGraphQl.lastModified,
  };

  if (!workingGroupGraphQl.flatData.externalLink) {
    return workingGroup;
  }

  if (!workingGroupGraphQl.flatData.externalLinkText) {
    return {
      ...workingGroup,
      externalLink: workingGroupGraphQl.flatData.externalLink,
    };
  }

  return {
    ...workingGroup,
    externalLink: workingGroupGraphQl.flatData.externalLink,
    externalLinkText: workingGroupGraphQl.flatData.externalLinkText,
  };
};
