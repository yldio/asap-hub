/* istanbul ignore file */
import { RestResearchOutput } from '@asap-hub/squidex';
import { Migration } from '@asap-hub/server-common';
import { applyToAllItemsInCollection } from '../utils/migrations';
import { Maybe, Teams } from '../autogenerated-gql/graphql';

type FetchResearchOutputTeamsQuery = {
  findResearchOutputsContent: {
    referencingTeamsContents: Maybe<Array<Pick<Teams, 'id'>>>;
  };
};

export default class MoveResearchOutputTextToDescription extends Migration {
  up = async (): Promise<void> => {
    await applyToAllItemsInCollection<RestResearchOutput>(
      'research-outputs',
      async (researchOutput, squidexRestClient, squidexGraphqlClient) => {
        const researchOutputGraphqlResponse =
          await squidexGraphqlClient.request<FetchResearchOutputTeamsQuery>(
            `
          query {
            findResearchOutputsContent(id: "${researchOutput.id}") {
              referencingTeamsContents {
                id
              }
            }
          }`,
            undefined,
            { includeDrafts: true },
          );

        const { findResearchOutputsContent: researchOutputContent } =
          researchOutputGraphqlResponse;

        if (!researchOutputContent) {
          // eslint-disable-next-line no-console
          console.error(`Research Output ${researchOutput.id} not found`);
          return;
        }

        await squidexRestClient.patch(researchOutput.id, {
          teams: {
            iv:
              researchOutputContent.referencingTeamsContents?.map(
                (team) => team.id,
              ) || [],
          },
        });
      },
    );
  };
  down = async (): Promise<void> => {
    await applyToAllItemsInCollection<RestResearchOutput>(
      'research-outputs',
      async (researchOutput, squidexRestClient) => {
        await squidexRestClient.patch(researchOutput.id, {
          teams: {
            iv: [],
          },
        });
      },
    );
  };
}
