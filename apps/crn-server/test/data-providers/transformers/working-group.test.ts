import { FetchWorkingGroupQuery } from '../../../src/autogenerated-gql/graphql';
import { getSquidexGraphqlWorkingGroup } from '../../fixtures/working-groups.fixtures';
import { parseGraphQlWorkingGroup } from '../../../src/data-providers/transformers';

describe('parseGraphQLWorkingGroup', () => {
  const workingGroup = getSquidexGraphqlWorkingGroup() as NonNullable<
    FetchWorkingGroupQuery['findWorkingGroupsContent']
  >;
  test('should return the correct format', () => {
    const workingGroupWithCalendars = {
      ...workingGroup,
      flatData: {
        ...workingGroup.flatData,
        calendars: [
          {
            id: 'calendar-id-1',
            flatData: {
              color: '#B1365F',
              googleCalendarId: 'hub@asap.science',
              name: 'ASAP Hub',
            },
          },
        ],
      },
    };

    expect(parseGraphQlWorkingGroup(workingGroupWithCalendars)).toEqual({
      calendars: [
        {
          color: '#B1365F',
          id: 'hub@asap.science',
          name: 'ASAP Hub',
          groups: [],
          workingGroups: [],
        },
      ],
      complete: false,
      deliverables: [],
      description: '<p>Working Group Description</p>',
      externalLink: 'https://example.com',
      id: '123',
      lastModifiedDate: '2021-01-01T00:00:00.000Z',
      leaders: [],
      members: [],
      pointOfContact: undefined,
      shortText: 'Working Group Short Text',
      title: 'Working Group Title',
    });
  });

  describe('point of contact', () => {
    const leaderUserData = {
      id: 'active-leader',
      flatData: {
        avatar: null,
        firstName: 'foo',
        lastName: 'test',
        alumniSinceDate: undefined,
        email: 'test@foo.com',
      },
    };
    const leaderBaseData = {
      role: 'Project Manager',
      workstreamRole: 'role',
      inactiveSinceDate: undefined,
      user: [leaderUserData],
    };

    const inactiveLeader = {
      ...leaderBaseData,
      inactiveSinceDate: new Date().toISOString(),
      user: [
        {
          ...leaderUserData,
          id: 'inactive-leader',
        },
      ],
    };

    const alumniLeader = {
      ...leaderBaseData,
      user: [
        {
          ...leaderUserData,
          id: 'alumni-leader',
          flatData: {
            ...leaderUserData.flatData,
            alumniSinceDate: new Date().toISOString(),
          },
        },
      ],
    };

    test('should be empty if product manager has inactiveSinceDate set', () => {
      const workingGroupWithInactivePM = {
        ...workingGroup,
        flatData: {
          ...workingGroup.flatData,
          leaders: [inactiveLeader],
        },
      };
      expect(
        parseGraphQlWorkingGroup(workingGroupWithInactivePM).pointOfContact,
      ).toBe(undefined);
    });

    test('should be empty if product manager is alumni', () => {
      const workingGroupWithAlumniPM = {
        ...workingGroup,
        flatData: {
          ...workingGroup.flatData,
          leaders: [alumniLeader],
        },
      };
      expect(
        parseGraphQlWorkingGroup(workingGroupWithAlumniPM).pointOfContact,
      ).toBe(undefined);
    });
    test('should be the first product manager that is still active', () => {
      const workingGroupWithLeaders = {
        ...workingGroup,
        flatData: {
          ...workingGroup.flatData,
          leaders: [alumniLeader, inactiveLeader, leaderBaseData],
        },
      };
      expect(
        parseGraphQlWorkingGroup(workingGroupWithLeaders).pointOfContact?.user
          .id,
      ).toBe('active-leader');
    });
  });
});
