import { FetchTeamQuery } from '../../src/autogenerated-gql/graphql';
import { appName, baseUrl } from '../../src/config';
import {
  parseGraphQLTeam,
  parseGraphQLTeamMember,
} from '../../src/entities/team';
import { getSquidexTeamsGraphqlResponse } from '../fixtures/teams.fixtures';
import { getGraphQLUser } from '../fixtures/users.fixtures';

describe('parseGraphQLTeamMember', () => {
  const referencingUsersContentsResponse = getGraphQLUser();
  referencingUsersContentsResponse.flatData.avatar = null;

  const teamMember = {
    ...referencingUsersContentsResponse,
  };

  test('should parse teamMember', () => {
    const parsedTeamMember = parseGraphQLTeamMember(teamMember, 'team-id-0');
    expect(parsedTeamMember).toEqual({
      id: 'user-id-1',
      alumniSinceDate: '2020-09-23T20:45:22.000Z',
      firstName: 'Tom',
      lastName: 'Hardy',
      displayName: 'Tom Hardy',
      email: 'H@rdy.io',
      role: 'Lead PI (Core Leadership)',
      labs: [
        { id: 'cd7be4902', name: 'Brighton' },
        { id: 'cd7be4903', name: 'Liverpool' },
      ],
      avatarUrl: undefined,
    });
  });

  test('should parse inactive teamMember', () => {
    const inactiveTeamMeber = {
      ...teamMember,
      flatData: {
        ...teamMember.flatData,
        teams: teamMember.flatData.teams
          ? teamMember.flatData.teams.map((t) => ({
              ...t,
              inactiveSinceDate: '2020-09-25T09:42:51.000Z',
            }))
          : [],
      },
    };
    const parsedTeamMember = parseGraphQLTeamMember(
      inactiveTeamMeber,
      'team-id-0',
    );
    expect(parsedTeamMember).toEqual({
      id: 'user-id-1',
      firstName: 'Tom',
      lastName: 'Hardy',
      displayName: 'Tom Hardy',
      email: 'H@rdy.io',
      role: 'Lead PI (Core Leadership)',
      inactiveSinceDate: '2020-09-25T09:42:51.000Z',
      labs: [
        { id: 'cd7be4902', name: 'Brighton' },
        { id: 'cd7be4903', name: 'Liverpool' },
      ],
      avatarUrl: undefined,
    });
  });

  test('should parse team member avatar', () => {
    const graphqlUser = getGraphQLUser();
    graphqlUser.flatData.avatar = [
      {
        id: 'avatar-id-1',
      },
    ];
    const parsedTeamMember = parseGraphQLTeamMember(graphqlUser, 'team-id-0');
    expect(parsedTeamMember.avatarUrl).toEqual(
      `${baseUrl}/api/assets/${appName}/avatar-id-1`,
    );
  });

  test('should select the first available avatar', () => {
    const graphqlUser = getGraphQLUser();
    graphqlUser.flatData.avatar = [
      {
        id: 'avatar-id-1',
      },
      {
        id: 'avatar-id-2',
      },
    ];
    const parsedTeamMember = parseGraphQLTeamMember(graphqlUser, 'team-id-0');
    expect(parsedTeamMember.avatarUrl).toEqual(
      `${baseUrl}/api/assets/${appName}/avatar-id-1`,
    );
  });

  test('should throw when teamRole dont match TeamRoles', () => {
    const invalidTeamRole = {
      ...teamMember.flatData.teams![0]!,
      role: 'invalid role',
    };
    const teamMemberWithInvalidRole = {
      ...teamMember,
      flatData: {
        ...teamMember.flatData,
        teams: [invalidTeamRole],
      },
    };
    expect(() =>
      parseGraphQLTeamMember(teamMemberWithInvalidRole, 'team-id-0'),
    ).toThrow('Invalid team role on user user-id-1 : invalid role');
  });

  test('should throw when email is null', () => {
    const teamMemberWithMissingEmail = {
      ...teamMember,
      flatData: {
        ...teamMember.flatData,
        email: null,
      },
    };
    expect(() =>
      parseGraphQLTeamMember(teamMemberWithMissingEmail, 'team-id-0'),
    ).toThrow('Email is missing in user user-id-1');
  });
});

describe('parseGraphQLTeam', () => {
  const team = {
    ...getSquidexTeamsGraphqlResponse().queryTeamsContentsWithTotal!.items![0],
  };
  test('should throw when projectTitle is null', () => {
    const teamWithInvalidProjectTitle = {
      ...team,
      flatData: {
        ...team.flatData,
        projectTitle: null,
      },
    } as NonNullable<FetchTeamQuery['findTeamsContent']>;
    expect(() => parseGraphQLTeam(teamWithInvalidProjectTitle)).toThrow(
      'Project Title is missing in team team-id-0',
    );
  });
});
