import { FetchWorkingGroupQuery } from '../../src/autogenerated-gql/graphql';
import { getSquidexGraphqlWorkingGroup } from '../fixtures/working-groups.fixtures';
import { parseGraphQlWorkingGroup } from '../../src/entities/working-group';

describe('parseGraphQLWorkingGroup', () => {
  const workingGroup = getSquidexGraphqlWorkingGroup() as NonNullable<
    FetchWorkingGroupQuery['findWorkingGroupsContent']
  >;
  test('should return the correct format', () => {
    const workingGroupWithCalendars = {
      ...workingGroup,
      flatData: {
        ...workingGroup.flatData,
        calendars: [
          {
            id: 'calendar-id-1',
            flatData: {
              color: '#B1365F',
              googleCalendarId: 'hub@asap.science',
              name: 'ASAP Hub',
            },
          },
        ],
      },
    };

    expect(parseGraphQlWorkingGroup(workingGroupWithCalendars)).toEqual({
      calendars: [
        {
          color: '#B1365F',
          id: 'hub@asap.science',
          name: 'ASAP Hub',
        },
      ],
      complete: false,
      deliverables: [],
      description: 'Working Group Description',
      externalLink: 'https://example.com',
      id: '123',
      lastModifiedDate: '2021-01-01T00:00:00.000Z',
      leaders: [],
      members: [],
      pointOfContact: undefined,
      shortText: 'Working Group Short Text',
      title: 'Working Group Title',
    });
  });
});
