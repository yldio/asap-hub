import { FetchWorkingGroupQuery } from '../../src/autogenerated-gql/graphql';
import {
  getSquidexGraphqlWorkingGroup,
  getWorkingGroupDataObject,
} from '../fixtures/working-groups.fixtures';
import {
  parseGraphQlWorkingGroup,
  toWorkingGroupResponse,
} from '../../src/entities/working-group';

import {
  createWorkingGroupMembers,
  createWorkingGroupLeaders,
} from '@asap-hub/fixtures';

describe('parseGraphQLWorkingGroup', () => {
  const workingGroup = getSquidexGraphqlWorkingGroup() as NonNullable<
    FetchWorkingGroupQuery['findWorkingGroupsContent']
  >;
  test('should return the correct format', () => {
    const workingGroupWithCalendars = {
      ...workingGroup,
      flatData: {
        ...workingGroup.flatData,
        calendars: [
          {
            id: 'calendar-id-1',
            flatData: {
              color: '#B1365F',
              googleCalendarId: 'hub@asap.science',
              name: 'ASAP Hub',
            },
          },
        ],
      },
    };

    expect(parseGraphQlWorkingGroup(workingGroupWithCalendars)).toEqual({
      calendars: [
        {
          color: '#B1365F',
          id: 'hub@asap.science',
          name: 'ASAP Hub',
          groups: [],
          workingGroups: [],
        },
      ],
      complete: false,
      deliverables: [],
      description: 'Working Group Description',
      externalLink: 'https://example.com',
      id: '123',
      lastModifiedDate: '2021-01-01T00:00:00.000Z',
      leaders: [],
      members: [],
      pointOfContact: undefined,
      shortText: 'Working Group Short Text',
      title: 'Working Group Title',
    });
  });
});

describe('toWorkingGroupResponse', () => {
  test('should set `isActive` to true for leaders & members if they are not alumni and working group is in progress', () => {
    const leaders = createWorkingGroupLeaders(1).map(
      ({ isActive, ...leader }) => ({
        ...leader,
      }),
    );
    const members = createWorkingGroupMembers(1).map(
      ({ isActive, ...member }) => ({
        ...member,
      }),
    );
    const workingGroup = {
      ...getWorkingGroupDataObject(),
      leaders,
      members,
      complete: false,
    };

    expect(toWorkingGroupResponse(workingGroup)).toEqual({
      id: '123',
      title: 'Working Group Title',
      description: 'Working Group Description',
      shortText: 'Working Group Short Text',
      deliverables: [],
      leaders: [{ ...leaders[0], isActive: true }],
      members: [{ ...members[0], isActive: true }],
      complete: false,
      lastModifiedDate: '2021-01-01T00:00:00.000Z',
      externalLink: 'https://example.com',
      calendars: [
        {
          id: 'hub@asap.science',
          color: '#B1365F',
          name: 'ASAP Hub',
          groups: [],
          workingGroups: [],
        },
      ],
    });
  });

  test('should set `isActive` to false for leaders & members if working group is complete', () => {
    const leaders = createWorkingGroupLeaders(1).map(
      ({ isActive, ...leader }) => ({ ...leader }),
    );
    const members = createWorkingGroupMembers(1).map(
      ({ isActive, ...member }) => ({ ...member }),
    );
    const workingGroup = {
      ...getWorkingGroupDataObject(),
      leaders,
      members,
      complete: true,
    };

    expect(toWorkingGroupResponse(workingGroup)).toEqual({
      id: '123',
      title: 'Working Group Title',
      description: 'Working Group Description',
      shortText: 'Working Group Short Text',
      deliverables: [],
      leaders: [{ ...leaders[0], isActive: false }],
      members: [{ ...members[0], isActive: false }],
      complete: true,
      lastModifiedDate: '2021-01-01T00:00:00.000Z',
      externalLink: 'https://example.com',
      calendars: [
        {
          id: 'hub@asap.science',
          color: '#B1365F',
          name: 'ASAP Hub',
          groups: [],
          workingGroups: [],
        },
      ],
    });
  });

  test('should set `isActive` to false for leaders & members if they are alumni', () => {
    const leaders = createWorkingGroupLeaders(1).map(
      ({ isActive, ...leader }) => ({
        ...leader,
        user: { ...leader.user, alumniSinceDate: new Date().toISOString() },
      }),
    );
    const members = createWorkingGroupMembers(1).map(
      ({ isActive, ...member }) => ({
        ...member,
        user: { ...member.user, alumniSinceDate: new Date().toISOString() },
      }),
    );
    const workingGroup = {
      ...getWorkingGroupDataObject(),
      leaders,
      members,
      complete: false,
    };

    expect(toWorkingGroupResponse(workingGroup)).toEqual({
      id: '123',
      title: 'Working Group Title',
      description: 'Working Group Description',
      shortText: 'Working Group Short Text',
      deliverables: [],
      leaders: [{ ...leaders[0], isActive: false }],
      members: [{ ...members[0], isActive: false }],
      complete: false,
      lastModifiedDate: '2021-01-01T00:00:00.000Z',
      externalLink: 'https://example.com',
      calendars: [
        {
          id: 'hub@asap.science',
          color: '#B1365F',
          name: 'ASAP Hub',
          groups: [],
          workingGroups: [],
        },
      ],
    });
  });
});
