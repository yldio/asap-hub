import { FetchWorkingGroupQuery } from '../../src/autogenerated-gql/graphql';
import { getSquidexGraphqlWorkingGroup } from '../fixtures/working-groups.fixtures';
import { parseGraphQlWorkingGroup } from '../../src/entities/working-group';

describe('parseGraphQLWorkingGroup', () => {
  const workingGroup = getSquidexGraphqlWorkingGroup() as NonNullable<
    FetchWorkingGroupQuery['findWorkingGroupsContent']
  >;
  test('should return the correct format for calendars', () => {
    const workingGroupWithCalendars = {
      ...workingGroup,
      flatData: {
        ...workingGroup.flatData,
        calendars: [
          {
            id: 'calendar-id-1',
            flatData: {
              color: '#B1365F',
              googleCalendarId: 'hub@asap.science',
              name: 'ASAP Hub',
            },
          },
        ],
      },
    };

    expect(
      parseGraphQlWorkingGroup(workingGroupWithCalendars).calendars,
    ).toEqual([
      {
        id: 'hub@asap.science',
        color: '#B1365F',
        name: 'ASAP Hub',
      },
    ]);
  });
});
