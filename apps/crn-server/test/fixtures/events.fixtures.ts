import {
  EventCreateDataObject,
  EventDataObject,
  EventEvent,
  EventResponse,
  EventSpeakerUser,
  EventStatus,
  ListEventDataObject,
  ListEventResponse,
} from '@asap-hub/model';
import { RestEvent } from '@asap-hub/squidex';
import { EventBridgeEvent } from 'aws-lambda';
import {
  EventContentFragment,
  FetchEventQuery,
  FetchEventsQuery,
} from '../../src/autogenerated-gql/graphql';
import { appName, baseUrl } from '../../src/config';
import { EventPayload } from '../../src/handlers/event-bus';
import { createEventBridgeEventMock } from '../helpers/events';
import { getGroupResponse, getSquidexGraphqlGroup } from './groups.fixtures';
import {
  getSquidexGraphqlWorkingGroup,
  getWorkingGroupResponse,
} from './working-groups.fixtures';

export const getEventSpeakerUser = (): EventSpeakerUser => ({
  team: {
    id: 'team-id-3',
    displayName: 'The team three',
    inactiveSince: '2022-10-24T11:00:00Z',
  },
  user: {
    id: 'user-id-3',
    firstName: 'Adam',
    lastName: 'Brown',
    displayName: 'Adam Brown',
    alumniSinceDate: undefined,
    avatarUrl: undefined,
  },
  role: 'Lead PI (Core Leadership)',
});

export const getEventDataObject = (): EventDataObject => ({
  id: 'ec3086d4-aa64-4f30-a0f7-5c5b95ffbcca',
  description: 'This event is awesome',
  lastModifiedDate: '2021-05-14T14:48:46.000Z',
  endDate: '2009-12-24T16:30:54.000Z',
  endDateTimestamp: 1261672254,
  startDate: '2009-12-24T16:20:14.000Z',
  startDateTimestamp: 1261671614,
  meetingLink: 'https://zoom.com/room/123',
  hideMeetingLink: false,
  status: 'Confirmed',
  hidden: false,
  tags: [],
  title: 'Example Event',
  startDateTimeZone: 'UTC',
  endDateTimeZone: 'UTC',
  notes: 'These are the notes from the meeting',
  notesUpdatedAt: '2010-10-01T08:00:04.000Z',
  videoRecording: '<embeded>video</embeded>',
  videoRecordingUpdatedAt: '2010-08-01T08:00:04.000Z',
  presentation: '<embeded>presentation</embeded>',
  presentationUpdatedAt: '2010-09-01T08:00:04.000Z',
  meetingMaterials: [
    {
      title: 'My additional link',
      url: 'https://link.pt/additional-material',
    },
  ],
  thumbnail: `${baseUrl}/api/assets/${appName}/uuid-thumbnail-2`,
  calendar: {
    color: '#125A12',
    id: 'c_t92qa82jd702q1fkreoi0hf4hk@group.calendar.google.com',
    name: 'Tech 1 - Sequencing/omics',
    groups: [],
    workingGroups: [],
  },
  group: getGroupResponse(),
  workingGroup: getWorkingGroupResponse(),
  speakers: [getEventSpeakerUser()],
});

export const getEventResponse = (): EventResponse => getEventDataObject();

export const getListEventDataObject = (): ListEventDataObject => ({
  total: 1,
  items: [getEventDataObject()],
});
export const getListEventResponse = (): ListEventResponse =>
  getListEventDataObject();

export const getRestEvent = (): RestEvent => ({
  id: 'squidex-event-id',
  created: '2021-02-23T19:32:00Z',
  lastModified: '2021-02-23T19:32:00Z',
  version: 42,
  data: getEventInput(),
});

export const getEventInput = () => ({
  googleId: { iv: 'google-event-id' },
  title: { iv: 'Event Tittle' },
  description: { iv: 'This event will be good' },
  startDate: { iv: '2021-02-23T19:32:00Z' },
  startDateTimeZone: { iv: 'Europe/Lisbon' },
  endDate: { iv: '2021-02-23T19:32:00Z' },
  endDateTimeZone: { iv: 'Europe/Lisbon' },
  calendar: { iv: ['squidex-calendar-id'] },
  status: { iv: 'Confirmed' as EventStatus },
  tags: { iv: [] },
  hidden: { iv: false },
  meetingLink: { iv: 'https://zweem.com' },
  hideMeetingLink: { iv: false },
});

export const getUserCreateDataObject = (): EventCreateDataObject => ({
  googleId: 'google-event-id',
  title: 'Event Tittle',
  description: 'This event will be good',
  startDate: '2021-02-23T19:32:00Z',
  startDateTimeZone: 'Europe/Lisbon',
  endDate: '2021-02-23T19:32:00Z',
  endDateTimeZone: 'Europe/Lisbon',
  calendar: 'squidex-calendar-id',
  status: 'Confirmed' as EventStatus,
  tags: [],
  hidden: false,
  meetingLink: 'https://zweem.com',
  hideMeetingLink: false,
});

export const getSquidexGraphqlEvent = () => ({
  id: 'ec3086d4-aa64-4f30-a0f7-5c5b95ffbcca',
  created: '2020-09-23T16:34:26.842Z',
  lastModified: '2021-05-14T14:48:46Z',
  version: 43,
  flatData: squidexGraphqlEventsFlatData(),
});

export const getSquidexGraphqlEventSpeakerWithUser = (): NonNullable<
  NonNullable<EventContentFragment['flatData']['speakers']>[number]
> => ({
  team: [
    {
      id: 'team-id-3',
      flatData: {
        displayName: 'The team three',
        inactiveSince: '2022-10-24T11:00:00Z',
      },
    },
  ],
  user: [
    {
      __typename: 'Users',
      id: 'user-id-3',
      flatData: {
        alumniSinceDate: null,
        alumniLocation: 'some alumni location',
        avatar: [],
        firstName: 'Adam',
        lastName: 'Brown',
        onboarded: true,
        teams: [
          {
            id: [
              {
                id: 'team-id-3',
              },
            ],
            role: 'Lead PI (Core Leadership)',
          },
        ],
      },
    },
  ],
});

export const getSquidexGraphqlEventSpeakerWithExternalUser = (): NonNullable<
  EventContentFragment['flatData']['speakers']
>[number] => ({
  team: [],
  user: [
    {
      __typename: 'ExternalAuthors',
      id: 'user-id-3',
      flatData: {
        name: 'Adam Brown',
        orcid: 'https://orcid.org/0000-0002-1825-0097',
      },
    },
  ],
});

const squidexGraphqlEventsFlatData = (): EventContentFragment['flatData'] & {
  videoRecordingUpdatedAt: string;
  presentationUpdatedAt: string;
  notesUpdatedAt: string;
} => ({
  description: 'This event is awesome',
  endDate: '2009-12-24T16:30:54.000Z',
  startDate: '2009-12-24T16:20:14.000Z',
  videoRecordingUpdatedAt: '2010-08-01T08:00:04.000Z',
  presentationUpdatedAt: '2010-09-01T08:00:04.000Z',
  notesUpdatedAt: '2010-10-01T08:00:04.000Z',
  meetingLink: 'https://zoom.com/room/123',
  hideMeetingLink: false,
  status: 'Confirmed',
  hidden: false,
  tags: [],
  title: 'Example Event',
  startDateTimeZone: 'UTC',
  endDateTimeZone: 'UTC',
  notesPermanentlyUnavailable: false,
  notes: 'These are the notes from the meeting',
  videoRecordingPermanentlyUnavailable: false,
  videoRecording: '<embeded>video</embeded>',
  presentationPermanentlyUnavailable: false,
  presentation: '<embeded>presentation</embeded>',
  meetingMaterialsPermanentlyUnavailable: false,
  meetingMaterials: [
    {
      title: 'My additional link',
      url: 'https://link.pt/additional-material',
    },
  ],
  thumbnail: [
    {
      id: 'uuid-thumbnail-2',
    },
  ],
  eventLink: 'https://zoom.com/room/123',
  calendar: [
    {
      flatData: {
        googleCalendarId:
          'c_t92qa82jd702q1fkreoi0hf4hk@group.calendar.google.com',
        color: '#125A12' as const,
        name: 'Tech 1 - Sequencing/omics',
      },
      referencingGroupsContents: [getSquidexGraphqlGroup()],
      referencingWorkingGroupsContents: [getSquidexGraphqlWorkingGroup()],
    },
  ],
  speakers: [getSquidexGraphqlEventSpeakerWithUser()],
});

export const getSquidexGraphqlEvents = (): ListEventResponse => ({
  items: [getEventResponse()],
  total: 1,
});
export const squidexGraphqlEventResponse = () => ({
  description: 'This event is awesome',
  meetingLink: 'https://zoom.com/room/123',
  endDate: '2009-12-24T16:30:54.000Z',
  startDate: '2009-12-24T16:20:14.000Z',
  status: 'Confirmed',
  tags: [],
  title: 'Example Event',
  calendar: {
    color: '#125A12',
    name: 'Tech 1 - Sequencing/omics',
    id: 'c_t92qa82jd702q1fkreoi0hf4hk@group.calendar.google.com',
  },
});

export const getSquidexEventsGraphqlResponse = (): FetchEventsQuery => ({
  queryEventsContentsWithTotal: {
    items: [getSquidexGraphqlEvent()],
    total: 1,
  },
});

export const getSquidexEventGraphqlResponse = (): FetchEventQuery => ({
  findEventsContent: getSquidexGraphqlEvent(),
});

export const getEventPayload = (
  id: string,
  type: EventEvent,
): EventPayload => ({
  type,
  timestamp: '2021-10-05T12:49:49Z',
  payload: {
    $type: 'EnrichedContentEvent',
    type: 'Updated',
    id,
    timestamp: '2021-10-05T12:49:49Z',
    data: {
      ...getEventInput(),
    },
    lastModified: '2021-10-05T12:49:49Z',
    created: '2021-10-05T12:49:49Z',
    version: 1,
  },
});

export const getEventEvent = (
  id: string,
  eventType: EventEvent,
): EventBridgeEvent<EventEvent, EventPayload> =>
  createEventBridgeEventMock(getEventPayload(id, eventType), eventType, id);
