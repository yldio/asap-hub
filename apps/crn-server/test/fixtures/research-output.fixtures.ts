import {
  ListResearchOutputResponse,
  ListResponse,
  ResearchOutputCreateDataObject,
  ResearchOutputDataObject,
  ResearchOutputDraftDataObject,
  ResearchOutputEvent,
  ResearchOutputPostRequest,
  ResearchOutputPublishedDataObject,
  ResearchOutputPutRequest,
  ResearchOutputResponse,
  ResearchOutputUpdateDataObject,
  WebhookDetail,
} from '@asap-hub/model';
import { ResearchOutputsContentFragment } from '@asap-hub/contentful';
import {
  InputResearchOutput,
  ResearchOutput,
  Rest,
  SquidexWebhookPayload,
} from '@asap-hub/squidex';
import {
  EnrichedContentEventType,
  FetchResearchOutputQuery,
  FetchResearchOutputsQuery,
} from '../../src/autogenerated-gql/graphql';
import {
  ResearchOutputCreateData,
  ResearchOutputUpdateData,
} from '../../src/controllers/research-output.controller';
import { createEventBridgeEventMock } from '../helpers/events';
import { getSquidexGraphqlTeam } from './teams.fixtures';
import {
  fetchExpectation,
  getGraphqlResponseFetchUsers,
} from './users.fixtures';

export const getSquidexResearchOutputsGraphqlResponse =
  (): FetchResearchOutputsQuery => ({
    queryResearchOutputsContentsWithTotal: {
      total: 1,
      items: [getSquidexGraphqlResearchOutput()],
    },
  });

export const getSquidexResearchOutputGraphqlResponseAuthors = (): NonNullable<
  NonNullable<
    FetchResearchOutputQuery['findResearchOutputsContent']
  >['flatData']['authors']
> =>
  getGraphqlResponseFetchUsers().queryUsersContentsWithTotal!.items!.map(
    (item) => ({
      __typename: 'Users',
      ...item,
    }),
  ) as NonNullable<
    NonNullable<
      FetchResearchOutputQuery['findResearchOutputsContent']
    >['flatData']['authors']
  >;

export const getSquidexResearchOutputGraphqlResponse =
  (): FetchResearchOutputQuery => ({
    findResearchOutputsContent: getSquidexGraphqlResearchOutput(),
  });

export const getSquidexGraphqlResearchOutput = (): NonNullable<
  FetchResearchOutputQuery['findResearchOutputsContent']
> => ({
  id: 'ec3086d4-aa64-4f30-a0f7-5c5b95ffbcca',
  created: '2020-09-23T16:34:26.842Z',
  lastModified: '2021-05-14T14:48:46Z',
  status: EnrichedContentEventType.Published,
  version: 42,
  referencingResearchOutputsContents: [
    {
      id: 'related-referencing-research-id',
      flatData: {
        title: 'Related Research2',
        type: 'Report',
        documentType: 'Bioinformatics',
        teams: [
          {
            id: 'team-id-1',
            flatData: {
              displayName: 'Team B',
            },
          },
        ],
        workingGroups: [
          {
            id: 'working-group-id-1',
            flatData: {
              title: 'Working Group B',
            },
          },
        ],
      },
    },
  ],
  flatData: {
    title: 'Test Proposal 1234',
    documentType: 'Bioinformatics',
    description: '<p>Text</p>',
    descriptionMD: 'Text MD',
    link: null,
    addedDate: '2021-05-21T13:18:31Z',
    publishDate: '2021-05-21T13:18:31Z',
    labCatalogNumber: 'http://example.com',
    doi: null,
    accession: null,
    rrid: 'RRID:AB_90755',
    lastUpdatedPartial: '2020-09-23T16:34:26.842Z',
    authors: getSquidexResearchOutputGraphqlResponseAuthors(),
    usageNotes: 'some access instructions',
    sharingStatus: 'Network Only',
    asapFunded: 'Yes',
    usedInAPublication: 'No',
    type: '3D Printing',
    statusChangedAt: '2021-05-21T13:18:31Z',
    statusChangedBy: [
      {
        id: 'status-changed-by-id',
        flatData: {
          firstName: 'Tom',
          lastName: 'Hardy',
        },
      },
    ],
    relatedResearch: [
      {
        id: 'related-research-id-0',
        flatData: {
          title: 'Related Research1',
          type: 'Report',
          documentType: 'Bioinformatics',
          teams: [
            {
              id: 'team-id-1',
              flatData: {
                displayName: 'Team B',
              },
            },
          ],
          workingGroups: [
            {
              id: 'working-group-id-1',
              flatData: {
                title: 'Working Group B',
              },
            },
          ],
        },
      },
    ],
    relatedEvents: [
      {
        id: 'related-event-id-0',
        flatData: { title: 'Related Event 1', endDate: '2021-05-21T13:18:31Z' },
      },
    ],
    labs: [
      {
        id: '99c78dd7-627e-4fbd-aaec-d1977895189e',
        flatData: {
          name: 'Test',
        },
      },
      {
        id: 'cd7be402-84d7-4d21-a360-82e2695f2dd9',
        flatData: {
          name: 'mike',
        },
      },
    ],
    teams: [getSquidexGraphqlTeam({})],
    methods: [
      {
        flatData: {
          name: 'Activity Assay',
        },
      },
    ],
    organisms: [
      {
        flatData: {
          name: 'Rat',
        },
      },
    ],
    environments: [
      {
        flatData: {
          name: 'In Vitro',
        },
      },
    ],
    subtype: [
      {
        flatData: {
          name: 'Metabolite',
        },
      },
    ],
    keywords: [
      {
        flatData: {
          name: 'Keyword1',
        },
      },
    ],
    workingGroups: [],
    isInReview: false,
  },
});

export const getResearchOutputDataObject =
  (): ResearchOutputPublishedDataObject => ({
    id: 'ec3086d4-aa64-4f30-a0f7-5c5b95ffbcca',
    created: '2020-09-23T16:34:26.842Z',
    documentType: 'Bioinformatics',
    type: '3D Printing',
    addedDate: '2021-05-21T13:18:31Z',
    title: 'Test Proposal 1234',
    description: '<p>Text</p>',
    descriptionMD: 'Text MD',
    authors: fetchExpectation.items,
    teams: [{ id: 'team-id-0', displayName: 'Team A' }],
    relatedResearch: [
      {
        id: 'related-research-id-0',
        title: 'Related Research1',
        type: 'Report',
        documentType: 'Bioinformatics',
        teams: [{ id: 'team-id-1', displayName: 'Team B' }],
        workingGroups: [
          {
            id: 'working-group-id-1',
            title: 'Working Group B',
          },
        ],
        isOwnRelatedResearchLink: true,
      },
      {
        id: 'related-referencing-research-id',
        title: 'Related Research2',
        type: 'Report',
        documentType: 'Bioinformatics',
        teams: [{ displayName: 'Team B', id: 'team-id-1' }],
        workingGroups: [
          {
            id: 'working-group-id-1',
            title: 'Working Group B',
          },
        ],
        isOwnRelatedResearchLink: false,
      },
    ],
    relatedEvents: [
      {
        id: 'related-event-id-0',
        title: 'Related Event 1',
        endDate: '2021-05-21T13:18:31.000Z',
      },
    ],
    publishDate: '2021-05-21T13:18:31Z',
    labCatalogNumber: 'http://example.com',
    rrid: 'RRID:AB_90755',
    lastUpdatedPartial: '2020-09-23T16:34:26.842Z',
    usageNotes: 'some access instructions',
    sharingStatus: 'Network Only',
    asapFunded: true,
    usedInPublication: false,
    contactEmails: [],
    labs: [
      { id: '99c78dd7-627e-4fbd-aaec-d1977895189e', name: 'Test' },
      { id: 'cd7be402-84d7-4d21-a360-82e2695f2dd9', name: 'mike' },
    ],
    workingGroups: [],
    methods: ['Activity Assay'],
    organisms: ['Rat'],
    environments: ['In Vitro'],
    subtype: 'Metabolite',
    keywords: ['Keyword1'],
    published: true,
    isInReview: false,
  });
export const getDraftResearchOutputDataObject =
  (): ResearchOutputDraftDataObject => ({
    ...getResearchOutputDataObject(),
    published: false,
  });
export const getListResearchOutputDataObject =
  (): ListResponse<ResearchOutputDataObject> => ({
    total: 1,
    items: [getResearchOutputDataObject()],
  });

export const getResearchOutputResponse = (): ResearchOutputResponse => {
  const researchOutput = getResearchOutputDataObject();

  return {
    ...researchOutput,
    workingGroups: researchOutput.workingGroups[0]
      ? [researchOutput.workingGroups[0]]
      : undefined,
  };
};

export const getListResearchOutputResponse = ({
  published = true,
} = {}): ListResearchOutputResponse => ({
  total: 1,
  items: [getResearchOutputResponse()],
});

export const getResearchOutputWebhookPayload = (
  id: string,
  type: ResearchOutputEvent,
): WebhookDetail<SquidexWebhookPayload<ResearchOutput>> => ({
  type,
  timestamp: '2021-02-15T13:11:25Z',
  resourceId: id,
  payload: {
    $type: 'EnrichedContentEvent',
    type: '',
    id,
    created: '2020-07-31T14:11:58Z',
    lastModified: '2020-07-31T15:49:41Z',
    version: 42,
    data: {
      documentType: { iv: 'Article' },
      title: { iv: 'Research Output' },
      description: { iv: 'Description' },
      sharingStatus: { iv: 'Network Only' },
      asapFunded: { iv: 'Not Sure' },
      usedInAPublication: { iv: 'Not Sure' },
    } as Rest<ResearchOutput>['data'],
    dataOld: {
      documentType: { iv: 'Article' },
      title: { iv: 'Research Output' },
      description: { iv: 'Description' },
      sharingStatus: { iv: 'Network Only' },
      asapFunded: { iv: 'Not Sure' },
      usedInAPublication: { iv: 'Not Sure' },
    } as Rest<ResearchOutput>['data'],
  },
});

export const getResearchOutputEvent = (
  id: string,
  eventType: ResearchOutputEvent,
) =>
  createEventBridgeEventMock(
    getResearchOutputWebhookPayload(id, eventType),
    eventType,
    id,
  );

export const getResearchOutputPostRequest = (): ResearchOutputPostRequest => {
  const {
    id: _,
    created: _created,
    contactEmails: _contactEmails,
    lastUpdatedPartial: _lastUpdatedPartial,
    doi: _doi,
    accession: _accession,
    addedDate: _addedDate,
    labs,
    authors,
    teams,
    workingGroups,
    relatedResearch,
    published: _published,
    relatedEvents,
    ...researchOutputResponse
  } = getResearchOutputResponse();
  return {
    ...researchOutputResponse,
    description: '<p>Text</p>',
    descriptionMD: 'Text MD',
    link: 'http://a.link',
    type: 'Software',
    labs: labs.map(({ id }) => id),
    authors: authors.map(({ id }) => ({ userId: id })),
    teams: teams.map(({ id }) => id),
    relatedResearch: relatedResearch.map(({ id }) => id),
    relatedEvents: relatedEvents.map(({ id }) => id),
    workingGroups: workingGroups ? workingGroups.map(({ id }) => id) : [],
    published: true,
  };
};

export const getResearchOutputPutRequest = (): ResearchOutputPutRequest => ({
  ...getResearchOutputPostRequest(),
  isInReview: false,
});

export const getResearchOutputCreateData = (): ResearchOutputCreateData => ({
  ...getResearchOutputPostRequest(),
  createdBy: 'userId',
});

export const getResearchOutputCreateDataObject =
  (): ResearchOutputCreateDataObject => {
    const {
      teams,
      labs,
      authors,
      relatedResearch,
      relatedEvents,
      methods: _methods,
      environments: _environments,
      organisms: _organisms,
      subtype: _subtype,
      keywords: _keywords,
      id: _id,
      lastUpdatedPartial: _lastUpdatedPartial,
      created: _created,
      contactEmails: _contactEmails,
      workingGroups: _workingGroups, // @TODO send this data to squidex once the schema has changed (1/2)
      published: _published,
      ...researchOutputPostRequest
    } = getResearchOutputResponse();

    return {
      ...researchOutputPostRequest,
      createdBy: 'userId',
      authors: authors.map(({ id }) => ({ userId: id })),
      teamIds: teams.map(({ id }) => id),
      labIds: labs.map(({ id }) => id),
      relatedResearchIds: relatedResearch?.map(({ id }) => id) || [],
      relatedEventIds: relatedEvents?.map(({ id }) => id) || [],
      methodIds: ['ec3086d4-aa64-4f30-a0f7-5c5b95ffbcca'],
      organismIds: ['d77a7607-7b9a-4ef1-99ee-c389b33ea95b'],
      environmentIds: ['8a936e45-6d5e-42a6-8acd-b849ab10f3f8'],
      subtypeId: 'dd0da578-5573-4758-b1db-43a078f5076e',
      keywordIds: ['0368cc55-b2cb-484f-8f25-c1e37975ff32'],
      link: 'http://a.link',
      type: 'Software',
      workingGroups: [],
    };
  };

export const getResearchOutputUpdateDataObject =
  (): ResearchOutputUpdateDataObject => {
    const {
      createdBy: _,
      workingGroups,
      ...researchOutputCreateDataObject
    } = getResearchOutputCreateDataObject();

    return {
      ...researchOutputCreateDataObject,
      workingGroups: workingGroups || [],
      updatedBy: 'userId',
      isInReview: false,
    };
  };

export const getRestResearchOutputCreateData =
  (): InputResearchOutput['data'] => ({
    documentType: { iv: 'Bioinformatics' },
    link: { iv: 'http://a.link' },
    title: { iv: 'Test Proposal 1234' },
    asapFunded: { iv: 'Yes' },
    sharingStatus: { iv: 'Network Only' },
    addedDate: { iv: '2021-05-21T13:18:31Z' },
    publishDate: { iv: '2021-05-21T13:18:31Z' },
    description: { iv: '<p>Text</p>' },
    descriptionMD: { iv: 'Text MD' },
    methods: {
      iv: ['ec3086d4-aa64-4f30-a0f7-5c5b95ffbcca'],
    },
    organisms: {
      iv: ['d77a7607-7b9a-4ef1-99ee-c389b33ea95b'],
    },
    environments: {
      iv: ['8a936e45-6d5e-42a6-8acd-b849ab10f3f8'],
    },
    subtype: {
      iv: ['dd0da578-5573-4758-b1db-43a078f5076e'],
    },
    keywords: {
      iv: ['0368cc55-b2cb-484f-8f25-c1e37975ff32'],
    },
    type: { iv: 'Software' },
    labs: {
      iv: [
        '99c78dd7-627e-4fbd-aaec-d1977895189e',
        'cd7be402-84d7-4d21-a360-82e2695f2dd9',
      ],
    },
    teams: {
      iv: ['team-id-0'],
    },
    relatedResearch: {
      iv: ['related-research-id-0', 'related-referencing-research-id'],
    },
    relatedEvents: {
      iv: ['related-event-id-0'],
    },
    authors: { iv: ['user-id-1', 'user-id-2'] },
    createdBy: { iv: ['userId'] },
    updatedBy: { iv: ['userId'] },
    usedInAPublication: { iv: 'No' },
    doi: { iv: null },
    accession: { iv: null },
    rrid: { iv: 'RRID:AB_90755' },
    labCatalogNumber: {
      iv: 'http://example.com',
    },
    usageNotes: {
      iv: 'some access instructions',
    },
    workingGroups: { iv: [] },
    isInReview: { iv: false },
  });

export const getResearchOutputUpdateData = (): ResearchOutputUpdateData => ({
  ...getResearchOutputPutRequest(),
  updatedBy: 'userId',
});

export const getRestResearchOutputUpdateData =
  (): InputResearchOutput['data'] => {
    const { createdBy: _, ...restResearchOutputData } =
      getRestResearchOutputCreateData();
    return {
      doi: { iv: null },
      accession: { iv: null },
      rrid: { iv: null },
      ...restResearchOutputData,
    };
  };

export const getContentfulResearchOutputGraphqlResponse =
  (): ResearchOutputsContentFragment => ({
    sys: {
      id: 'ec3086d4-aa64-4f30-a0f7-5c5b95ffbcca',
      publishedVersion: 1,
    },
    title: 'Test Proposal 1234',
    documentType: 'Bioinformatics',
    description: {
      json: {
        nodeType: 'document',
        data: {},
        content: [
          {
            nodeType: 'paragraph',
            data: {},
            content: [{ nodeType: 'text', value: 'Text', marks: [], data: {} }],
          },
        ],
      },
      links: {
        entries: {
          inline: [],
        },
        assets: {
          block: [],
        },
      },
    },
    descriptionMd: 'Text MD',
    usageNotes: 'Usage Notes',
    link: null,
    addedDate: '2021-05-21T13:18:31Z',
    publishDate: '2021-05-21T13:18:31Z',
    createdDate: '2020-09-23T16:34:26.842Z',
    labCatalogNumber: 'http://example.com',
    doi: null,
    accession: null,
    rrid: 'RRID:AB_90755',
    lastUpdatedPartial: '2020-09-23T16:34:26.842Z',
    authorsCollection: { items: [] },
    sharingStatus: 'Network Only',
    asapFunded: 'Yes',
    usedInAPublication: 'No',
    type: '3D Printing',
    statusChangedBy: null,
    relatedResearchCollection: {
      items: [
        {
          sys: {
            id: 'related-research-id-0',
          },
          title: 'Related Research1',
          type: 'Report',
          documentType: 'Bioinformatics',
          teamsCollection: {
            items: [
              {
                sys: {
                  id: 'team-id-1',
                },
                displayName: 'Team B',
              },
            ],
          },
          workingGroup: {
            sys: {
              id: 'working-group-id-1',
            },
            title: 'Working Group B',
          },
        },
      ],
    },
    linkedFrom: {
      researchOutputsCollection: {
        items: [
          {
            sys: {
              id: 'related-referencing-research-id',
            },
            title: 'Related Research2',
            type: 'Report',
            documentType: 'Bioinformatics',
            teamsCollection: {
              items: [
                {
                  sys: {
                    id: 'team-id-1',
                  },
                  displayName: 'Team B',
                },
              ],
            },
            workingGroup: {
              sys: {
                id: 'working-group-id-1',
              },
              title: 'Working Group B',
            },
          },
        ],
      },
    },
    relatedEventsCollection: {
      items: [
        {
          sys: {
            id: 'related-event-id-0',
          },
          title: 'Related Event 1',
          endDate: '2021-05-21T13:18:31.000Z',
        },
      ],
    },
    labsCollection: {
      items: [
        {
          sys: {
            id: '99c78dd7-627e-4fbd-aaec-d1977895189e',
          },
          name: 'Test',
        },
        {
          sys: {
            id: 'cd7be402-84d7-4d21-a360-82e2695f2dd9',
          },
          name: 'mike',
        },
      ],
    },
    teamsCollection: {
      items: [
        {
          sys: {
            id: 'team-id-0',
          },
          displayName: 'Team A',
        },
      ],
    },
    methodsCollection: {
      items: [
        {
          name: 'Activity Assay',
        },
      ],
    },
    organismsCollection: {
      items: [
        {
          name: 'Rat',
        },
      ],
    },
    environmentsCollection: {
      items: [
        {
          name: 'In Vitro',
        },
      ],
    },
    subtype: {
      name: 'Metabolite',
    },
    keywordsCollection: {
      items: [
        {
          name: 'Keyword1',
        },
      ],
    },
    workingGroup: null,
  });
