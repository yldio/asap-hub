import {
  ListResearchOutputResponse,
  ListResponse,
  ResearchOutputCreateDataObject,
  ResearchOutputDataObject,
  ResearchOutputPostRequest,
  ResearchOutputPutRequest,
  ResearchOutputResponse,
  ResearchOutputUpdateDataObject,
} from '@asap-hub/model';
import {
  InputResearchOutput,
  ResearchOutput,
  Rest,
  WebhookPayload,
} from '@asap-hub/squidex';
import {
  FetchResearchOutputQuery,
  FetchResearchOutputsQuery,
} from '../../src/autogenerated-gql/graphql';
import {
  ResearchOutputCreateData,
  ResearchOutputUpdateData,
} from '../../src/controllers/research-outputs';
import { ResearchOutputEvent } from '../../src/handlers/event-bus';
import { createEventBridgeEventMock } from '../helpers/events';
import { getSquidexGraphqlTeam } from './teams.fixtures';
import {
  fetchExpectation,
  getGraphqlResponseFetchUsers,
} from './users.fixtures';

export const getSquidexResearchOutputsGraphqlResponse =
  (): FetchResearchOutputsQuery => ({
    queryResearchOutputsContentsWithTotal: {
      total: 1,
      items: [getSquidexGraphqlResearchOutput()],
    },
  });

export const getSquidexResearchOutputGraphqlResponseAuthors = (): NonNullable<
  NonNullable<
    FetchResearchOutputQuery['findResearchOutputsContent']
  >['flatData']['authors']
> =>
  getGraphqlResponseFetchUsers().queryUsersContentsWithTotal!.items!.map(
    (item) => ({
      __typename: 'Users',
      ...item,
    }),
  ) as NonNullable<
    NonNullable<
      FetchResearchOutputQuery['findResearchOutputsContent']
    >['flatData']['authors']
  >;

export const getSquidexResearchOutputGraphqlResponse =
  (): FetchResearchOutputQuery => ({
    findResearchOutputsContent: getSquidexGraphqlResearchOutput(),
  });

export const getSquidexGraphqlResearchOutput = (): NonNullable<
  FetchResearchOutputQuery['findResearchOutputsContent']
> => ({
  id: 'ec3086d4-aa64-4f30-a0f7-5c5b95ffbcca',
  created: '2020-09-23T16:34:26.842Z',
  lastModified: '2021-05-14T14:48:46Z',
  version: 42,
  flatData: {
    title: 'Test Proposal 1234',
    documentType: 'Bioinformatics',
    description: 'Text',
    link: null,
    addedDate: '2021-05-21T13:18:31Z',
    publishDate: '2021-05-21T13:18:31Z',
    labCatalogNumber: 'http://example.com',
    doi: null,
    accession: null,
    rrid: 'RRID:AB_90755',
    tags: ['tag', 'test'],
    lastUpdatedPartial: '2020-09-23T16:34:26.842Z',
    authors: getSquidexResearchOutputGraphqlResponseAuthors(),
    usageNotes: 'some access instructions',
    sharingStatus: 'Network Only',
    asapFunded: 'Yes',
    usedInAPublication: 'No',
    type: '3D Printing',
    labs: [
      {
        id: '99c78dd7-627e-4fbd-aaec-d1977895189e',
        flatData: {
          name: 'Test',
        },
      },
      {
        id: 'cd7be402-84d7-4d21-a360-82e2695f2dd9',
        flatData: {
          name: 'mike',
        },
      },
    ],
    teams: [getSquidexGraphqlTeam({})],
    methods: [
      {
        flatData: {
          name: 'Activity Assay',
        },
      },
    ],
    organisms: [
      {
        flatData: {
          name: 'Rat',
        },
      },
    ],
    environments: [
      {
        flatData: {
          name: 'In Vitro',
        },
      },
    ],
    subtype: [
      {
        flatData: {
          name: 'Metabolite',
        },
      },
    ],
    workingGroups: [],
  },
});

export const getResearchOutputDataObject = (): ResearchOutputDataObject => ({
  id: 'ec3086d4-aa64-4f30-a0f7-5c5b95ffbcca',
  created: '2020-09-23T16:34:26.842Z',
  documentType: 'Bioinformatics',
  type: '3D Printing',
  addedDate: '2021-05-21T13:18:31Z',
  title: 'Test Proposal 1234',
  description: 'Text',
  tags: ['tag', 'test'],
  authors: fetchExpectation.items,
  teams: [{ id: 'team-id-0', displayName: 'Team A' }],
  publishDate: '2021-05-21T13:18:31Z',
  labCatalogNumber: 'http://example.com',
  rrid: 'RRID:AB_90755',
  lastUpdatedPartial: '2020-09-23T16:34:26.842Z',
  usageNotes: 'some access instructions',
  sharingStatus: 'Network Only',
  asapFunded: true,
  usedInPublication: false,
  contactEmails: [],
  labs: [
    { id: '99c78dd7-627e-4fbd-aaec-d1977895189e', name: 'Test' },
    { id: 'cd7be402-84d7-4d21-a360-82e2695f2dd9', name: 'mike' },
  ],
  workingGroups: [],
  methods: ['Activity Assay'],
  organisms: ['Rat'],
  environments: ['In Vitro'],
  subtype: 'Metabolite',
});

export const getListResearchOutputDataObject =
  (): ListResponse<ResearchOutputDataObject> => ({
    total: 1,
    items: [getResearchOutputDataObject()],
  });

export const getResearchOutputResponse = (): ResearchOutputResponse => {
  const researchOutput = getResearchOutputDataObject();

  return {
    ...researchOutput,
    workingGroups: researchOutput.workingGroups[0]
      ? [researchOutput.workingGroups[0]]
      : undefined,
  };
};

export const getListResearchOutputResponse =
  (): ListResearchOutputResponse => ({
    total: 1,
    items: [getResearchOutputResponse()],
  });

export const getResearchOutputWebhookPayload = (
  id: string,
  type: ResearchOutputEvent,
): WebhookPayload<ResearchOutput> => ({
  type,
  timestamp: '2021-02-15T13:11:25Z',
  payload: {
    $type: 'EnrichedContentEvent',
    type: '',
    id,
    created: '2020-07-31T14:11:58Z',
    lastModified: '2020-07-31T15:49:41Z',
    version: 42,
    data: {
      documentType: { iv: 'Article' },
      title: { iv: 'Research Output' },
      description: { iv: 'Description' },
      sharingStatus: { iv: 'Network Only' },
      asapFunded: { iv: 'Not Sure' },
      usedInAPublication: { iv: 'Not Sure' },
    } as Rest<ResearchOutput>['data'],
    dataOld: {
      documentType: { iv: 'Article' },
      title: { iv: 'Research Output' },
      description: { iv: 'Description' },
      sharingStatus: { iv: 'Network Only' },
      asapFunded: { iv: 'Not Sure' },
      usedInAPublication: { iv: 'Not Sure' },
    } as Rest<ResearchOutput>['data'],
  },
});

export const getResearchOutputEvent = (
  id: string,
  eventType: ResearchOutputEvent,
) =>
  createEventBridgeEventMock(
    getResearchOutputWebhookPayload(id, eventType),
    eventType,
    id,
  );

export const getResearchOutputPostRequest = (): ResearchOutputPostRequest => {
  const {
    id: _,
    created: _created,
    contactEmails: _contactEmails,
    lastUpdatedPartial: _lastUpdatedPartial,
    doi: _doi,
    accession: _accession,
    addedDate: _addedDate,
    labs,
    authors,
    teams,
    workingGroups,
    ...researchOutputResponse
  } = getResearchOutputResponse();
  return {
    ...researchOutputResponse,
    link: 'http://a.link',
    type: 'Software',
    labs: labs.map(({ id }) => id),
    authors: authors.map(({ id }) => ({ userId: id })),
    teams: teams.map(({ id }) => id),
    workingGroups: workingGroups ? workingGroups.map(({ id }) => id) : [],
  };
};

export const getResearchOutputPutRequest = (): ResearchOutputPutRequest =>
  getResearchOutputPostRequest();

export const getResearchOutputCreateData = (): ResearchOutputCreateData => ({
  ...getResearchOutputPostRequest(),
  createdBy: 'userId',
});

export const getResearchOutputCreateDataObject =
  (): ResearchOutputCreateDataObject => {
    const {
      teams,
      labs,
      authors,
      methods: _methods,
      environments: _environments,
      organisms: _organisms,
      subtype: _subtype,
      id: _id,
      lastUpdatedPartial: _lastUpdatedPartial,
      created: _created,
      contactEmails: _contactEmails,
      workingGroups: _workingGroups, // @TODO send this data to squidex once the schema has changed (1/2)
      ...researchOutputPostRequest
    } = getResearchOutputResponse();

    return {
      ...researchOutputPostRequest,
      createdBy: 'userId',
      authors: authors.map(({ id }) => ({ userId: id })),
      teamIds: teams.map(({ id }) => id),
      labIds: labs.map(({ id }) => id),
      methodIds: ['ec3086d4-aa64-4f30-a0f7-5c5b95ffbcca'],
      organismIds: ['d77a7607-7b9a-4ef1-99ee-c389b33ea95b'],
      environmentIds: ['8a936e45-6d5e-42a6-8acd-b849ab10f3f8'],
      subtypeId: 'dd0da578-5573-4758-b1db-43a078f5076e',
      link: 'http://a.link',
      type: 'Software',
      workingGroups: [],
    };
  };

export const getResearchOutputUpdateDataObject =
  (): ResearchOutputUpdateDataObject => {
    const {
      createdBy: _,
      workingGroups,
      ...researchOutputCreateDataObject
    } = getResearchOutputCreateDataObject();

    return {
      ...researchOutputCreateDataObject,
      workingGroups: workingGroups || [],
      updatedBy: 'userId',
    };
  };

export const getRestResearchOutputCreateData =
  (): InputResearchOutput['data'] => ({
    documentType: { iv: 'Bioinformatics' },
    link: { iv: 'http://a.link' },
    title: { iv: 'Test Proposal 1234' },
    asapFunded: { iv: 'Yes' },
    sharingStatus: { iv: 'Network Only' },
    addedDate: { iv: '2021-05-21T13:18:31Z' },
    publishDate: { iv: '2021-05-21T13:18:31Z' },
    description: { iv: 'Text' },
    tags: { iv: ['tag', 'test'] },
    methods: {
      iv: ['ec3086d4-aa64-4f30-a0f7-5c5b95ffbcca'],
    },
    organisms: {
      iv: ['d77a7607-7b9a-4ef1-99ee-c389b33ea95b'],
    },
    environments: {
      iv: ['8a936e45-6d5e-42a6-8acd-b849ab10f3f8'],
    },
    subtype: {
      iv: ['dd0da578-5573-4758-b1db-43a078f5076e'],
    },
    type: { iv: 'Software' },
    labs: {
      iv: [
        '99c78dd7-627e-4fbd-aaec-d1977895189e',
        'cd7be402-84d7-4d21-a360-82e2695f2dd9',
      ],
    },
    teams: {
      iv: ['team-id-0'],
    },
    authors: { iv: ['user-id-1', 'user-id-2'] },
    createdBy: { iv: ['userId'] },
    updatedBy: { iv: ['userId'] },
    usedInAPublication: { iv: 'No' },
    doi: { iv: null },
    accession: { iv: null },
    rrid: { iv: 'RRID:AB_90755' },
    labCatalogNumber: {
      iv: 'http://example.com',
    },
    usageNotes: {
      iv: 'some access instructions',
    },
    workingGroups: { iv: [] },
  });

export const getResearchOutputUpdateData = (): ResearchOutputUpdateData => ({
  ...getResearchOutputPutRequest(),
  updatedBy: 'userId',
});

export const getRestResearchOutputUpdateData =
  (): InputResearchOutput['data'] => {
    const { createdBy: _, ...restResearchOutputData } =
      getRestResearchOutputCreateData();
    return {
      doi: { iv: null },
      accession: { iv: null },
      rrid: { iv: null },
      ...restResearchOutputData,
    };
  };
