import {
  WorkingGroupDataObject,
  WorkingGroupListDataObject,
  WorkingGroupResponse,
} from '@asap-hub/model';
import { parseToSquidex } from '@asap-hub/squidex';
import type { EventBridgeEvent } from 'aws-lambda';

import {
  FetchWorkingGroupQuery,
  FetchWorkingGroupsQuery,
} from '../../src/autogenerated-gql/graphql';
import { createEventBridgeEventMock, wrapIV } from '../helpers/events';
import {
  WorkingGroupEvent,
  WorkingGroupPayload,
} from '../../src/handlers/event-bus';

export const getListWorkingGroupsDataObject =
  (): WorkingGroupListDataObject => ({
    total: 2,
    items: [
      getWorkingGroupDataObject(),
      {
        ...getWorkingGroupDataObject(),
        id: '124',
        title: 'Working Group Title 2',
        description: 'Second working gorup description',
        shortText: 'Second working group short text',
        deliverables: [],
        lastModifiedDate: '2021-01-01T00:00:00.000Z',
        externalLink: 'https://www.example.com',
        complete: true,
      },
    ],
  });

export const getWorkingGroupDataObject = (
  data: Partial<WorkingGroupDataObject> = {},
): WorkingGroupDataObject => ({
  id: '123',
  title: 'Working Group Title',
  description: 'Working Group Description',
  shortText: 'Working Group Short Text',
  deliverables: [],
  leaders: [],
  members: [],
  complete: false,
  lastModifiedDate: '2021-01-01T00:00:00.000Z',
  externalLink: 'https://example.com',
  calendars: [
    {
      id: 'hub@asap.science',
      color: '#B1365F',
      name: 'ASAP Hub',
      groups: [],
      workingGroups: [],
    },
  ],
  ...data,
});

export const getWorkingGroupResponse = (
  data: Partial<WorkingGroupDataObject> = {},
): WorkingGroupResponse =>
  getWorkingGroupDataObject(data) as WorkingGroupResponse;

export const getSquidexWorkingGroupGraphqlResponse =
  (): FetchWorkingGroupQuery => ({
    findWorkingGroupsContent: getSquidexGraphqlWorkingGroup(),
  });

export const getSquidexWorkingGroupsGraphqlResponse =
  (): FetchWorkingGroupsQuery => ({
    queryWorkingGroupsContentsWithTotal: {
      total: 1,
      items: [
        {
          id: '123',
          lastModified: '2021-01-01T00:00:00.000Z',
          flatData: {
            title: 'Working Group Title',
            description: 'Working Group Description',
            shortText: 'Working Group Short Text',
            externalLink: 'https://example.com',
            deliverables: [],
            leaders: [],
            members: [],
            complete: false,
            calendars: [],
          },
        },
      ],
    },
  });

export const getSquidexGraphqlWorkingGroup = (): NonNullable<
  FetchWorkingGroupQuery['findWorkingGroupsContent']
> => ({
  id: '123',
  lastModified: '2021-01-01T00:00:00.000Z',
  flatData: {
    title: 'Working Group Title',
    description: 'Working Group Description',
    shortText: 'Working Group Short Text',
    externalLink: 'https://example.com',
    deliverables: [],
    members: [],
    leaders: [],
    complete: false,
    calendars: [
      {
        id: 'calendar-id-1',
        flatData: {
          color: '#B1365F',
          googleCalendarId: 'hub@asap.science',
          name: 'ASAP Hub',
        },
      },
    ],
  },
});

export const getWorkingGroupEventPayload = (
  id: string,
  data: Partial<WorkingGroupDataObject>,
): WorkingGroupPayload => ({
  type: 'WorkingGroupsUpdated',
  payload: {
    id,
    $type: 'EnrichedContentEvent',
    type: 'Updated',
    data: {
      title: { iv: 'Working Group Title' },
      complete: { iv: false },
      deliverables: { iv: [] },
      ...parseToSquidex(data),
    },
  },
});

export const getWorkingGroupEvent = (
  data = {},
): EventBridgeEvent<WorkingGroupEvent, WorkingGroupPayload> =>
  createEventBridgeEventMock(
    getWorkingGroupEventPayload('123', data),
    'WorkingGroupsUpdated',
    '123',
  );
