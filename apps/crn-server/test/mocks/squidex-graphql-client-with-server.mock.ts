import { SquidexGraphqlClient } from '@asap-hub/squidex';
import { GraphQLFileLoader } from '@graphql-tools/graphql-file-loader';
import { loadSchemaSync } from '@graphql-tools/load';
import { addMocksToSchema, createMockStore } from '@graphql-tools/mock';
import {
  ASTNode,
  DocumentNode,
  ExecutionResult,
  graphql,
  print,
} from 'graphql';
import { getSquidexGraphqlCalendar } from '../fixtures/calendars.fixtures';
import { getSquidexGraphqlDiscover } from '../fixtures/discover.fixtures';
import { getSquidexGraphqlEvent } from '../fixtures/events.fixtures';
import { getGraphQLExternalAuthor } from '../fixtures/external-authors.fixtures';
import { getSquidexGraphqlInterestGroup } from '../fixtures/interest-groups.fixtures';
import { getSquidexGraphqlLab } from '../fixtures/labs.fixtures';
import { getSquidexGraphqlResearchOutput } from '../fixtures/research-output.fixtures';
import { getSquidexGraphqlResearchTags } from '../fixtures/research-tag.fixtures';
import { getSquidexGraphqlTeam } from '../fixtures/teams.fixtures';
import { getSquidexGraphqlTutorial } from '../fixtures/tutorials.fixtures';
import { getGraphQLUser } from '../fixtures/users.fixtures';
import { getSquidexGraphqlWorkingGroup } from '../fixtures/working-groups.fixtures';

export const getSquidexGraphqlClientMockServer = (): SquidexGraphqlClient => {
  const schema = loadSchemaSync(
    '../../src/schema/autogenerated-schema.graphql',
    {
      cwd: __dirname,
      loaders: [new GraphQLFileLoader()],
    },
  );
  const resultDto = () => ({
    items: [...new Array(1)],
    total: 1,
  });
  const mocks = {
    ExternalAuthors: () => getGraphQLExternalAuthor(),
    ExternalAuthorsDto: () => resultDto,
    Int: () => 8,
    Instant: () => '2021-10-12T15:42:05Z',
    JsonScalar: () => {},
    Groups: () => getSquidexGraphqlInterestGroup(),
    GroupsResultDto: resultDto,
    ResearchOutputs: () => getSquidexGraphqlResearchOutput(),
    ResearchOutputsResultDto: resultDto,
    ResearchTags: () => getSquidexGraphqlResearchTags().items![0],
    ResearchTagsResultDto: resultDto,
    Users: () => getGraphQLUser(),
    UsersResultDto: resultDto,
    Teams: () => getSquidexGraphqlTeam({}),
    TeamsResultDto: resultDto,
    Tutorials: () => getSquidexGraphqlTutorial(),
    TutorialsResultDto: resultDto,
    Discover: () => getSquidexGraphqlDiscover(),
    DiscoveryResultDto: resultDto,
    Calendars: () => getSquidexGraphqlCalendar(),
    CalendarsResultDto: resultDto,
    Events: () => getSquidexGraphqlEvent(),
    EventsResultDto: resultDto,
    Labs: () => getSquidexGraphqlLab(),
    LabsResultDto: resultDto,
    WorkingGroups: () => getSquidexGraphqlWorkingGroup(),
    WorkingGroupsResultDto: resultDto,
    ApplicationQueries: () => ({
      queryResearchOutputsContents: [...new Array(1)],
    }),
  };
  const store = createMockStore({
    schema,
    mocks,
    typePolicies: {
      UsersDataTeamsChildDto: {
        keyFieldName: false,
      },
      Teams: {
        keyFieldName: false,
      },
      ResearchTags: {
        keyFieldName: false,
      },
    },
  });
  const schemaWithMocks = addMocksToSchema({
    schema,
    store,
  });

  return {
    request: async <
      T extends { [key: string]: any } = { [key: string]: any },
      V extends { [key: string]: any } = { [key: string]: any },
    >(
      query: string | DocumentNode,
      variables?: V,
    ): Promise<T> => {
      const result = (await graphql(
        schemaWithMocks,
        print(query as ASTNode),
        undefined,
        undefined,
        variables,
      )) as ExecutionResult<T>;

      if (Array.isArray(result.errors) && result.errors.length > 0) {
        throw new Error(JSON.stringify(result.errors));
      }

      return result.data as T;
    },
  };
};
