/* eslint-disable */
import * as graphql from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
  '\n  fragment CalendarsContent on Calendars {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      googleCalendarId\n      name\n      color\n      syncToken\n      resourceId\n      expirationDate\n    }\n    referencingProjectsContents {\n      id\n      flatData {\n        title\n      }\n    }\n    referencingWorkingGroupsContents {\n      id\n      flatData {\n        title\n      }\n    }\n  }\n':
    graphql.CalendarsContentFragmentDoc,
  '\n  query FetchCalendar($id: String!) {\n    findCalendarsContent(id: $id) {\n      ...CalendarsContent\n    }\n  }\n  \n':
    graphql.FetchCalendarDocument,
  '\n  query FetchCalendars($top: Int, $skip: Int, $filter: String, $order: String) {\n    queryCalendarsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: $order\n    ) {\n      total\n      items {\n        ...CalendarsContent\n      }\n    }\n  }\n  \n':
    graphql.FetchCalendarsDocument,
  '\n  fragment ContributingCohortsContent on ContributingCohorts {\n    id\n    flatData {\n      name\n    }\n  }\n':
    graphql.ContributingCohortsContentFragmentDoc,
  '\n  query FetchContributingCohorts($top: Int, $skip: Int) {\n    queryContributingCohortsContentsWithTotal(\n      top: $top\n      skip: $skip\n      orderby: "data/name/iv"\n    ) {\n      total\n      items {\n        ...ContributingCohortsContent\n      }\n    }\n  }\n  \n':
    graphql.FetchContributingCohortsDocument,
  '\n  fragment EventContent on Events {\n    id\n    lastModified\n    version\n    created\n    flatData {\n      description\n      endDate\n      endDateTimeZone\n      startDate\n      startDateTimeZone\n      meetingLink\n      hideMeetingLink\n      eventLink\n      status\n      tags\n      title\n      notesPermanentlyUnavailable\n      notes\n      videoRecordingPermanentlyUnavailable\n      videoRecording\n      presentationPermanentlyUnavailable\n      presentation\n      meetingMaterialsPermanentlyUnavailable\n      meetingMaterials {\n        url\n        title\n      }\n      calendar {\n        flatData {\n          googleCalendarId\n          color\n          name\n        }\n      }\n      thumbnail {\n        id\n      }\n      speakers {\n        user {\n          __typename\n          ... on Users {\n            id\n            flatData {\n              firstName\n              lastName\n              onboarded\n              avatar {\n                id\n              }\n            }\n          }\n          ... on ExternalUsers {\n            id\n            flatData {\n              name\n              orcid\n            }\n          }\n        }\n        topic\n      }\n    }\n  }\n':
    graphql.EventContentFragmentDoc,
  '\n  query FetchEvents($top: Int, $skip: Int, $filter: String, $order: String) {\n    queryEventsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: $order\n    ) {\n      total\n      items {\n        ...EventContent\n      }\n    }\n  }\n  \n':
    graphql.FetchEventsDocument,
  '\n  query FetchEvent($id: String!) {\n    findEventsContent(id: $id) {\n      ...EventContent\n    }\n  }\n  \n':
    graphql.FetchEventDocument,
  '\n  fragment NewsContent on NewsAndEvents {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      title\n      shortText\n      link\n      linkText\n      sampleCount\n      articleCount\n      cohortCount\n      link\n      linkText\n    }\n  }\n':
    graphql.NewsContentFragmentDoc,
  '\n  query FetchNews($top: Int, $skip: Int) {\n    queryNewsAndEventsContentsWithTotal(\n      top: $top\n      skip: $skip\n      orderby: "created desc"\n    ) {\n      total\n      items {\n        ...NewsContent\n      }\n    }\n  }\n  \n':
    graphql.FetchNewsDocument,
  '\n  fragment OutputContent on Outputs {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      title\n      documentType\n      type\n      subtype\n      link\n      addedDate\n      publishDate\n      lastUpdatedPartial\n      authors {\n        __typename\n        ... on Users {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            firstName\n            lastName\n            onboarded\n            email\n          }\n        }\n        ... on ExternalUsers {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            name\n            orcid\n          }\n        }\n      }\n      workingGroups {\n        id\n        flatData {\n          title\n        }\n      }\n      projects {\n        id\n        flatData {\n          title\n        }\n      }\n    }\n  }\n':
    graphql.OutputContentFragmentDoc,
  '\n  query FetchOutput($id: String!) {\n    findOutputsContent(id: $id) {\n      ...OutputContent\n    }\n  }\n  \n':
    graphql.FetchOutputDocument,
  '\n  query FetchOutputs($top: Int, $skip: Int, $filter: String) {\n    queryOutputsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "created desc"\n    ) {\n      total\n      items {\n        ...OutputContent\n      }\n    }\n  }\n  \n':
    graphql.FetchOutputsDocument,
  '\n  fragment ProjectContent on Projects {\n    id\n    flatData {\n      title\n      startDate\n      endDate\n      status\n      projectProposal\n      description\n      pmEmail\n      leadEmail\n      keywords\n      traineeProject\n      opportunitiesLink\n      members {\n        role\n        user {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            firstName\n            lastName\n            onboarded\n          }\n        }\n      }\n      milestones {\n        title\n        description\n        status\n        link\n      }\n      resources {\n        type\n        title\n        description\n        externalLink\n      }\n      calendars {\n        id\n        flatData {\n          name\n          color\n        }\n      }\n    }\n  }\n':
    graphql.ProjectContentFragmentDoc,
  '\n  query FetchProject($id: String!) {\n    findProjectsContent(id: $id) {\n      ...ProjectContent\n    }\n  }\n  \n':
    graphql.FetchProjectDocument,
  '\n  query FetchProjects {\n    queryProjectsContentsWithTotal(orderby: "created desc") {\n      total\n      items {\n        ...ProjectContent\n      }\n    }\n  }\n  \n':
    graphql.FetchProjectsDocument,
  '\n  fragment UsersContent on Users {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      avatar {\n        id\n      }\n      connections {\n        code\n      }\n      degree\n      email\n      firstName\n      lastName\n      region\n      role\n      country\n      city\n      positions {\n        role\n        department\n        institution\n      }\n      questions {\n        question\n      }\n      onboarded\n      secondaryEmail\n      telephoneCountryCode\n      telephoneNumber\n      keywords\n      fundingStreams\n      biography\n      contributingCohorts {\n        role\n        study\n        id {\n          id\n          flatData {\n            name\n          }\n        }\n      }\n      social {\n        googleScholar\n        orcid\n        researchGate\n        researcherId\n        blog\n        twitter\n        linkedIn\n        github\n      }\n      activatedDate\n    }\n    referencingProjectsContents {\n      id\n      flatData {\n        members {\n          role\n          user {\n            id\n          }\n        }\n        status\n        title\n      }\n    }\n    referencingWorkingGroupsContents {\n      id\n      flatData {\n        members {\n          role\n          user {\n            id\n          }\n        }\n        title\n      }\n    }\n  }\n':
    graphql.UsersContentFragmentDoc,
  '\n  query FetchUser($id: String!) {\n    findUsersContent(id: $id) {\n      ...UsersContent\n    }\n  }\n  \n':
    graphql.FetchUserDocument,
  '\n  query FetchUsers($top: Int, $skip: Int, $filter: String) {\n    queryUsersContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "data/firstName/iv,data/lastName/iv"\n    ) {\n      total\n      items {\n        ...UsersContent\n      }\n    }\n  }\n  \n':
    graphql.FetchUsersDocument,
  '\n  fragment ProjectMembersContent on Projects {\n    flatData {\n      members {\n        user {\n          id\n        }\n      }\n    }\n  }\n':
    graphql.ProjectMembersContentFragmentDoc,
  '\n  query FetchProjectsMembers($filter: String) {\n    queryProjectsContents(filter: $filter) {\n      ...ProjectMembersContent\n    }\n  }\n  \n':
    graphql.FetchProjectsMembersDocument,
  '\n  fragment WorkingGroupMembersContent on WorkingGroups {\n    flatData {\n      members {\n        user {\n          id\n        }\n      }\n    }\n  }\n':
    graphql.WorkingGroupMembersContentFragmentDoc,
  '\n  query FetchWorkingGroupsMembers($filter: String) {\n    queryWorkingGroupsContents(filter: $filter) {\n      ...WorkingGroupMembersContent\n    }\n  }\n  \n':
    graphql.FetchWorkingGroupsMembersDocument,
  '\n  fragment WorkingGroupNetworkContent on WorkingGroupNetwork {\n    id\n    flatData {\n      support {\n        ...WorkingGroupContent\n      }\n      complexDisease {\n        ...WorkingGroupContent\n      }\n      monogenic {\n        ...WorkingGroupContent\n      }\n      operational {\n        ...WorkingGroupContent\n      }\n    }\n  }\n  \n':
    graphql.WorkingGroupNetworkContentFragmentDoc,
  '\n  query FetchWorkingGroupNetwork {\n    queryWorkingGroupNetworkContents {\n      ...WorkingGroupNetworkContent\n    }\n  }\n  \n':
    graphql.FetchWorkingGroupNetworkDocument,
  '\n  fragment WorkingGroupContent on WorkingGroups {\n    id\n    flatData {\n      title\n      shortDescription\n      leadingMembers\n      description\n      primaryEmail\n      secondaryEmail\n      members {\n        role\n        user {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            firstName\n            lastName\n            onboarded\n          }\n        }\n      }\n      resources {\n        type\n        title\n        description\n        externalLink\n      }\n      calendars {\n        id\n        flatData {\n          name\n          color\n        }\n      }\n    }\n  }\n':
    graphql.WorkingGroupContentFragmentDoc,
  '\n  query FetchWorkingGroup($id: String!) {\n    findWorkingGroupsContent(id: $id) {\n      ...WorkingGroupContent\n    }\n  }\n  \n':
    graphql.FetchWorkingGroupDocument,
  '\n  query FetchWorkingGroups {\n    queryWorkingGroupsContentsWithTotal(orderby: "created desc") {\n      total\n      items {\n        ...WorkingGroupContent\n      }\n    }\n  }\n  \n':
    graphql.FetchWorkingGroupsDocument,
};

export function gql(
  source: '\n  fragment CalendarsContent on Calendars {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      googleCalendarId\n      name\n      color\n      syncToken\n      resourceId\n      expirationDate\n    }\n    referencingProjectsContents {\n      id\n      flatData {\n        title\n      }\n    }\n    referencingWorkingGroupsContents {\n      id\n      flatData {\n        title\n      }\n    }\n  }\n',
): typeof documents['\n  fragment CalendarsContent on Calendars {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      googleCalendarId\n      name\n      color\n      syncToken\n      resourceId\n      expirationDate\n    }\n    referencingProjectsContents {\n      id\n      flatData {\n        title\n      }\n    }\n    referencingWorkingGroupsContents {\n      id\n      flatData {\n        title\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchCalendar($id: String!) {\n    findCalendarsContent(id: $id) {\n      ...CalendarsContent\n    }\n  }\n  \n',
): typeof documents['\n  query FetchCalendar($id: String!) {\n    findCalendarsContent(id: $id) {\n      ...CalendarsContent\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchCalendars($top: Int, $skip: Int, $filter: String, $order: String) {\n    queryCalendarsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: $order\n    ) {\n      total\n      items {\n        ...CalendarsContent\n      }\n    }\n  }\n  \n',
): typeof documents['\n  query FetchCalendars($top: Int, $skip: Int, $filter: String, $order: String) {\n    queryCalendarsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: $order\n    ) {\n      total\n      items {\n        ...CalendarsContent\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  fragment ContributingCohortsContent on ContributingCohorts {\n    id\n    flatData {\n      name\n    }\n  }\n',
): typeof documents['\n  fragment ContributingCohortsContent on ContributingCohorts {\n    id\n    flatData {\n      name\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchContributingCohorts($top: Int, $skip: Int) {\n    queryContributingCohortsContentsWithTotal(\n      top: $top\n      skip: $skip\n      orderby: "data/name/iv"\n    ) {\n      total\n      items {\n        ...ContributingCohortsContent\n      }\n    }\n  }\n  \n',
): typeof documents['\n  query FetchContributingCohorts($top: Int, $skip: Int) {\n    queryContributingCohortsContentsWithTotal(\n      top: $top\n      skip: $skip\n      orderby: "data/name/iv"\n    ) {\n      total\n      items {\n        ...ContributingCohortsContent\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  fragment EventContent on Events {\n    id\n    lastModified\n    version\n    created\n    flatData {\n      description\n      endDate\n      endDateTimeZone\n      startDate\n      startDateTimeZone\n      meetingLink\n      hideMeetingLink\n      eventLink\n      status\n      tags\n      title\n      notesPermanentlyUnavailable\n      notes\n      videoRecordingPermanentlyUnavailable\n      videoRecording\n      presentationPermanentlyUnavailable\n      presentation\n      meetingMaterialsPermanentlyUnavailable\n      meetingMaterials {\n        url\n        title\n      }\n      calendar {\n        flatData {\n          googleCalendarId\n          color\n          name\n        }\n      }\n      thumbnail {\n        id\n      }\n      speakers {\n        user {\n          __typename\n          ... on Users {\n            id\n            flatData {\n              firstName\n              lastName\n              onboarded\n              avatar {\n                id\n              }\n            }\n          }\n          ... on ExternalUsers {\n            id\n            flatData {\n              name\n              orcid\n            }\n          }\n        }\n        topic\n      }\n    }\n  }\n',
): typeof documents['\n  fragment EventContent on Events {\n    id\n    lastModified\n    version\n    created\n    flatData {\n      description\n      endDate\n      endDateTimeZone\n      startDate\n      startDateTimeZone\n      meetingLink\n      hideMeetingLink\n      eventLink\n      status\n      tags\n      title\n      notesPermanentlyUnavailable\n      notes\n      videoRecordingPermanentlyUnavailable\n      videoRecording\n      presentationPermanentlyUnavailable\n      presentation\n      meetingMaterialsPermanentlyUnavailable\n      meetingMaterials {\n        url\n        title\n      }\n      calendar {\n        flatData {\n          googleCalendarId\n          color\n          name\n        }\n      }\n      thumbnail {\n        id\n      }\n      speakers {\n        user {\n          __typename\n          ... on Users {\n            id\n            flatData {\n              firstName\n              lastName\n              onboarded\n              avatar {\n                id\n              }\n            }\n          }\n          ... on ExternalUsers {\n            id\n            flatData {\n              name\n              orcid\n            }\n          }\n        }\n        topic\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchEvents($top: Int, $skip: Int, $filter: String, $order: String) {\n    queryEventsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: $order\n    ) {\n      total\n      items {\n        ...EventContent\n      }\n    }\n  }\n  \n',
): typeof documents['\n  query FetchEvents($top: Int, $skip: Int, $filter: String, $order: String) {\n    queryEventsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: $order\n    ) {\n      total\n      items {\n        ...EventContent\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchEvent($id: String!) {\n    findEventsContent(id: $id) {\n      ...EventContent\n    }\n  }\n  \n',
): typeof documents['\n  query FetchEvent($id: String!) {\n    findEventsContent(id: $id) {\n      ...EventContent\n    }\n  }\n  \n'];
export function gql(
  source: '\n  fragment NewsContent on NewsAndEvents {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      title\n      shortText\n      link\n      linkText\n      sampleCount\n      articleCount\n      cohortCount\n      link\n      linkText\n    }\n  }\n',
): typeof documents['\n  fragment NewsContent on NewsAndEvents {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      title\n      shortText\n      link\n      linkText\n      sampleCount\n      articleCount\n      cohortCount\n      link\n      linkText\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchNews($top: Int, $skip: Int) {\n    queryNewsAndEventsContentsWithTotal(\n      top: $top\n      skip: $skip\n      orderby: "created desc"\n    ) {\n      total\n      items {\n        ...NewsContent\n      }\n    }\n  }\n  \n',
): typeof documents['\n  query FetchNews($top: Int, $skip: Int) {\n    queryNewsAndEventsContentsWithTotal(\n      top: $top\n      skip: $skip\n      orderby: "created desc"\n    ) {\n      total\n      items {\n        ...NewsContent\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  fragment OutputContent on Outputs {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      title\n      documentType\n      type\n      subtype\n      link\n      addedDate\n      publishDate\n      lastUpdatedPartial\n      authors {\n        __typename\n        ... on Users {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            firstName\n            lastName\n            onboarded\n            email\n          }\n        }\n        ... on ExternalUsers {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            name\n            orcid\n          }\n        }\n      }\n      workingGroups {\n        id\n        flatData {\n          title\n        }\n      }\n      projects {\n        id\n        flatData {\n          title\n        }\n      }\n    }\n  }\n',
): typeof documents['\n  fragment OutputContent on Outputs {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      title\n      documentType\n      type\n      subtype\n      link\n      addedDate\n      publishDate\n      lastUpdatedPartial\n      authors {\n        __typename\n        ... on Users {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            firstName\n            lastName\n            onboarded\n            email\n          }\n        }\n        ... on ExternalUsers {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            name\n            orcid\n          }\n        }\n      }\n      workingGroups {\n        id\n        flatData {\n          title\n        }\n      }\n      projects {\n        id\n        flatData {\n          title\n        }\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchOutput($id: String!) {\n    findOutputsContent(id: $id) {\n      ...OutputContent\n    }\n  }\n  \n',
): typeof documents['\n  query FetchOutput($id: String!) {\n    findOutputsContent(id: $id) {\n      ...OutputContent\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchOutputs($top: Int, $skip: Int, $filter: String) {\n    queryOutputsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "created desc"\n    ) {\n      total\n      items {\n        ...OutputContent\n      }\n    }\n  }\n  \n',
): typeof documents['\n  query FetchOutputs($top: Int, $skip: Int, $filter: String) {\n    queryOutputsContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "created desc"\n    ) {\n      total\n      items {\n        ...OutputContent\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  fragment ProjectContent on Projects {\n    id\n    flatData {\n      title\n      startDate\n      endDate\n      status\n      projectProposal\n      description\n      pmEmail\n      leadEmail\n      keywords\n      traineeProject\n      opportunitiesLink\n      members {\n        role\n        user {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            firstName\n            lastName\n            onboarded\n          }\n        }\n      }\n      milestones {\n        title\n        description\n        status\n        link\n      }\n      resources {\n        type\n        title\n        description\n        externalLink\n      }\n      calendars {\n        id\n        flatData {\n          name\n          color\n        }\n      }\n    }\n  }\n',
): typeof documents['\n  fragment ProjectContent on Projects {\n    id\n    flatData {\n      title\n      startDate\n      endDate\n      status\n      projectProposal\n      description\n      pmEmail\n      leadEmail\n      keywords\n      traineeProject\n      opportunitiesLink\n      members {\n        role\n        user {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            firstName\n            lastName\n            onboarded\n          }\n        }\n      }\n      milestones {\n        title\n        description\n        status\n        link\n      }\n      resources {\n        type\n        title\n        description\n        externalLink\n      }\n      calendars {\n        id\n        flatData {\n          name\n          color\n        }\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchProject($id: String!) {\n    findProjectsContent(id: $id) {\n      ...ProjectContent\n    }\n  }\n  \n',
): typeof documents['\n  query FetchProject($id: String!) {\n    findProjectsContent(id: $id) {\n      ...ProjectContent\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchProjects {\n    queryProjectsContentsWithTotal(orderby: "created desc") {\n      total\n      items {\n        ...ProjectContent\n      }\n    }\n  }\n  \n',
): typeof documents['\n  query FetchProjects {\n    queryProjectsContentsWithTotal(orderby: "created desc") {\n      total\n      items {\n        ...ProjectContent\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  fragment UsersContent on Users {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      avatar {\n        id\n      }\n      connections {\n        code\n      }\n      degree\n      email\n      firstName\n      lastName\n      region\n      role\n      country\n      city\n      positions {\n        role\n        department\n        institution\n      }\n      questions {\n        question\n      }\n      onboarded\n      secondaryEmail\n      telephoneCountryCode\n      telephoneNumber\n      keywords\n      fundingStreams\n      biography\n      contributingCohorts {\n        role\n        study\n        id {\n          id\n          flatData {\n            name\n          }\n        }\n      }\n      social {\n        googleScholar\n        orcid\n        researchGate\n        researcherId\n        blog\n        twitter\n        linkedIn\n        github\n      }\n      activatedDate\n    }\n    referencingProjectsContents {\n      id\n      flatData {\n        members {\n          role\n          user {\n            id\n          }\n        }\n        status\n        title\n      }\n    }\n    referencingWorkingGroupsContents {\n      id\n      flatData {\n        members {\n          role\n          user {\n            id\n          }\n        }\n        title\n      }\n    }\n  }\n',
): typeof documents['\n  fragment UsersContent on Users {\n    id\n    created\n    lastModified\n    version\n    flatData {\n      avatar {\n        id\n      }\n      connections {\n        code\n      }\n      degree\n      email\n      firstName\n      lastName\n      region\n      role\n      country\n      city\n      positions {\n        role\n        department\n        institution\n      }\n      questions {\n        question\n      }\n      onboarded\n      secondaryEmail\n      telephoneCountryCode\n      telephoneNumber\n      keywords\n      fundingStreams\n      biography\n      contributingCohorts {\n        role\n        study\n        id {\n          id\n          flatData {\n            name\n          }\n        }\n      }\n      social {\n        googleScholar\n        orcid\n        researchGate\n        researcherId\n        blog\n        twitter\n        linkedIn\n        github\n      }\n      activatedDate\n    }\n    referencingProjectsContents {\n      id\n      flatData {\n        members {\n          role\n          user {\n            id\n          }\n        }\n        status\n        title\n      }\n    }\n    referencingWorkingGroupsContents {\n      id\n      flatData {\n        members {\n          role\n          user {\n            id\n          }\n        }\n        title\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchUser($id: String!) {\n    findUsersContent(id: $id) {\n      ...UsersContent\n    }\n  }\n  \n',
): typeof documents['\n  query FetchUser($id: String!) {\n    findUsersContent(id: $id) {\n      ...UsersContent\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchUsers($top: Int, $skip: Int, $filter: String) {\n    queryUsersContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "data/firstName/iv,data/lastName/iv"\n    ) {\n      total\n      items {\n        ...UsersContent\n      }\n    }\n  }\n  \n',
): typeof documents['\n  query FetchUsers($top: Int, $skip: Int, $filter: String) {\n    queryUsersContentsWithTotal(\n      top: $top\n      skip: $skip\n      filter: $filter\n      orderby: "data/firstName/iv,data/lastName/iv"\n    ) {\n      total\n      items {\n        ...UsersContent\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  fragment ProjectMembersContent on Projects {\n    flatData {\n      members {\n        user {\n          id\n        }\n      }\n    }\n  }\n',
): typeof documents['\n  fragment ProjectMembersContent on Projects {\n    flatData {\n      members {\n        user {\n          id\n        }\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchProjectsMembers($filter: String) {\n    queryProjectsContents(filter: $filter) {\n      ...ProjectMembersContent\n    }\n  }\n  \n',
): typeof documents['\n  query FetchProjectsMembers($filter: String) {\n    queryProjectsContents(filter: $filter) {\n      ...ProjectMembersContent\n    }\n  }\n  \n'];
export function gql(
  source: '\n  fragment WorkingGroupMembersContent on WorkingGroups {\n    flatData {\n      members {\n        user {\n          id\n        }\n      }\n    }\n  }\n',
): typeof documents['\n  fragment WorkingGroupMembersContent on WorkingGroups {\n    flatData {\n      members {\n        user {\n          id\n        }\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchWorkingGroupsMembers($filter: String) {\n    queryWorkingGroupsContents(filter: $filter) {\n      ...WorkingGroupMembersContent\n    }\n  }\n  \n',
): typeof documents['\n  query FetchWorkingGroupsMembers($filter: String) {\n    queryWorkingGroupsContents(filter: $filter) {\n      ...WorkingGroupMembersContent\n    }\n  }\n  \n'];
export function gql(
  source: '\n  fragment WorkingGroupNetworkContent on WorkingGroupNetwork {\n    id\n    flatData {\n      support {\n        ...WorkingGroupContent\n      }\n      complexDisease {\n        ...WorkingGroupContent\n      }\n      monogenic {\n        ...WorkingGroupContent\n      }\n      operational {\n        ...WorkingGroupContent\n      }\n    }\n  }\n  \n',
): typeof documents['\n  fragment WorkingGroupNetworkContent on WorkingGroupNetwork {\n    id\n    flatData {\n      support {\n        ...WorkingGroupContent\n      }\n      complexDisease {\n        ...WorkingGroupContent\n      }\n      monogenic {\n        ...WorkingGroupContent\n      }\n      operational {\n        ...WorkingGroupContent\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchWorkingGroupNetwork {\n    queryWorkingGroupNetworkContents {\n      ...WorkingGroupNetworkContent\n    }\n  }\n  \n',
): typeof documents['\n  query FetchWorkingGroupNetwork {\n    queryWorkingGroupNetworkContents {\n      ...WorkingGroupNetworkContent\n    }\n  }\n  \n'];
export function gql(
  source: '\n  fragment WorkingGroupContent on WorkingGroups {\n    id\n    flatData {\n      title\n      shortDescription\n      leadingMembers\n      description\n      primaryEmail\n      secondaryEmail\n      members {\n        role\n        user {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            firstName\n            lastName\n            onboarded\n          }\n        }\n      }\n      resources {\n        type\n        title\n        description\n        externalLink\n      }\n      calendars {\n        id\n        flatData {\n          name\n          color\n        }\n      }\n    }\n  }\n',
): typeof documents['\n  fragment WorkingGroupContent on WorkingGroups {\n    id\n    flatData {\n      title\n      shortDescription\n      leadingMembers\n      description\n      primaryEmail\n      secondaryEmail\n      members {\n        role\n        user {\n          id\n          created\n          lastModified\n          version\n          flatData {\n            avatar {\n              id\n            }\n            firstName\n            lastName\n            onboarded\n          }\n        }\n      }\n      resources {\n        type\n        title\n        description\n        externalLink\n      }\n      calendars {\n        id\n        flatData {\n          name\n          color\n        }\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchWorkingGroup($id: String!) {\n    findWorkingGroupsContent(id: $id) {\n      ...WorkingGroupContent\n    }\n  }\n  \n',
): typeof documents['\n  query FetchWorkingGroup($id: String!) {\n    findWorkingGroupsContent(id: $id) {\n      ...WorkingGroupContent\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchWorkingGroups {\n    queryWorkingGroupsContentsWithTotal(orderby: "created desc") {\n      total\n      items {\n        ...WorkingGroupContent\n      }\n    }\n  }\n  \n',
): typeof documents['\n  query FetchWorkingGroups {\n    queryWorkingGroupsContentsWithTotal(orderby: "created desc") {\n      total\n      items {\n        ...WorkingGroupContent\n      }\n    }\n  }\n  \n'];

export function gql(source: string): unknown;
export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
