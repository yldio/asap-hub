import { gp2 } from '@asap-hub/model';
import {
  InputCalendar,
  parseToSquidex,
  RestCalendar,
  SquidexGraphqlClient,
  SquidexRestClient,
} from '@asap-hub/squidex';
import {
  FetchCalendarQuery,
  FetchCalendarQueryVariables,
  FetchCalendarsQuery,
  FetchCalendarsQueryVariables,
} from '../autogenerated-gql/graphql';
import { parseGraphqlCalendarPartialToDataObject } from '../entities';
import { FETCH_CALENDAR, FETCH_CALENDARS } from '../queries/calendars.queries';
import logger from '../utils/logger';

export type FetchCalendarProviderOptions = {
  maxExpiration?: number;
  active?: boolean;
  resourceId?: string;
};

type GraphqlCalendar = NonNullable<FetchCalendarQuery['findCalendarsContent']>;

export interface CalendarDataProvider {
  create(create: gp2.CalendarCreateDataObject): Promise<string>;
  update(id: string, update: gp2.CalendarUpdateDataObject): Promise<void>;
  fetch(
    options?: FetchCalendarProviderOptions,
  ): Promise<gp2.ListCalendarDataObject>;
  fetchById(id: string): Promise<gp2.CalendarDataObject | null>;
}

export class CalendarSquidexDataProvider {
  constructor(
    private squidexRestClient: SquidexRestClient<RestCalendar, InputCalendar>,
    private squidexGraphqlClient: SquidexGraphqlClient,
  ) {}

  async fetchById(id: string): Promise<gp2.CalendarDataObject | null> {
    const { findCalendarsContent: calendar } =
      await this.squidexGraphqlClient.request<
        FetchCalendarQuery,
        FetchCalendarQueryVariables
      >(FETCH_CALENDAR, { id });

    if (!calendar) {
      return null;
    }

    return parseGraphQlCalendarToDataObject(calendar);
  }

  async fetch(
    options?: FetchCalendarProviderOptions,
  ): Promise<gp2.ListCalendarDataObject> {
    const { maxExpiration, resourceId } = options || {};

    let filter = '';
    if (maxExpiration) {
      filter = `data/expirationDate/iv lt ${maxExpiration}`;
    }

    if (resourceId) {
      filter = `data/resourceId/iv eq '${resourceId}'`;
    }

    const { queryCalendarsContentsWithTotal } =
      await this.squidexGraphqlClient.request<
        FetchCalendarsQuery,
        FetchCalendarsQueryVariables
      >(FETCH_CALENDARS, {
        top: 50,
        skip: 0,
        filter,
        order: 'data/name/iv asc',
      });

    if (queryCalendarsContentsWithTotal === null) {
      logger.warn('queryCalendarsContentsWithTotal returned null');

      return {
        items: [],
        total: 0,
      };
    }

    const { items: calendars } = queryCalendarsContentsWithTotal;

    if (calendars === null) {
      logger.warn('queryCalendarsContentsWithTotal items returned null');

      return {
        items: [],
        total: 0,
      };
    }

    return {
      items: calendars.map(parseGraphQlCalendarToDataObject),
      total: calendars.length,
    };
  }

  async create(create: gp2.CalendarCreateDataObject): Promise<string> {
    const data = parseToSquidex(create);
    const { id } = await this.squidexRestClient.create(data);

    return id;
  }

  async update(
    id: string,
    update: gp2.CalendarUpdateDataObject,
  ): Promise<void> {
    await this.squidexRestClient.patch(id, parseToSquidex(update));
  }
}

export const parseGraphQlCalendarToDataObject = (
  item: GraphqlCalendar,
): gp2.CalendarDataObject => ({
  ...parseGraphqlCalendarPartialToDataObject(item.flatData),
  resourceId: item.flatData.resourceId,
  id: item.id,
  version: item.version,
  expirationDate: item.flatData.expirationDate,
  syncToken: item.flatData.syncToken,
});
