import { gp2 as gp2Model } from '@asap-hub/model';
import { SquidexGraphqlClient } from '@asap-hub/squidex';
import { FetchContributingCohortsQuery } from '../autogenerated-gql/graphql';
import { FETCH_CONTRIBUTING_COHORTS } from '../queries/contributing-cohorts.queries';

export type GraphqlCohorts = NonNullable<
  NonNullable<
    NonNullable<
      NonNullable<FetchContributingCohortsQuery>['queryContributingCohortsContentsWithTotal']
    >['items']
  >[number]
>;
export interface ContributingCohortDataProvider {
  fetch: () => Promise<gp2Model.ListContributingCohortDataObject>;
}
export class ContributingCohortSquidexDataProvider
  implements ContributingCohortDataProvider
{
  constructor(private squidexGraphqlClient: SquidexGraphqlClient) {}

  async fetch(): Promise<gp2Model.ListContributingCohortDataObject> {
    const { queryContributingCohortsContentsWithTotal } =
      await this.squidexGraphqlClient.request<FetchContributingCohortsQuery>(
        FETCH_CONTRIBUTING_COHORTS,
      );

    const { total = 0, items = [] } =
      queryContributingCohortsContentsWithTotal || {};
    return {
      total: items ? total : 0,
      items: (items || []).map(parseCohort),
    };
  }
}

const parseCohort = (
  item: GraphqlCohorts,
): gp2Model.ContributingCohortDataObject => ({
  id: item.id,
  name: item.flatData.name || '',
});
