import { gp2 as gp2Model } from '@asap-hub/model';
import {
  gp2 as gp2Squidex,
  parseToSquidex,
  SquidexGraphqlClient,
  SquidexRestClient,
} from '@asap-hub/squidex';
import { FetchContributingCohortsQuery } from '../autogenerated-gql/graphql';
import { FETCH_CONTRIBUTING_COHORTS } from '../queries/contributing-cohorts.queries';

export type GraphqlCohorts = NonNullable<
  NonNullable<
    NonNullable<
      NonNullable<FetchContributingCohortsQuery>['queryContributingCohortsContentsWithTotal']
    >['items']
  >[number]
>;
export interface ContributingCohortDataProvider {
  create(user: gp2Model.ContributingCohortCreateDataObject): Promise<string>;
  fetch: () => Promise<gp2Model.ListContributingCohortDataObject>;
}
export class ContributingCohortSquidexDataProvider
  implements ContributingCohortDataProvider
{
  constructor(
    private squidexGraphqlClient: SquidexGraphqlClient,
    private squidexRestClient: SquidexRestClient<
      gp2Squidex.RestContributingCohort,
      gp2Squidex.InputContributingCohort
    >,
  ) {}

  async fetch(): Promise<gp2Model.ListContributingCohortDataObject> {
    const { queryContributingCohortsContentsWithTotal } =
      await this.squidexGraphqlClient.request<FetchContributingCohortsQuery>(
        FETCH_CONTRIBUTING_COHORTS,
      );

    const { total = 0, items = [] } =
      queryContributingCohortsContentsWithTotal || {};
    return {
      total: items ? total : 0,
      items: (items || []).map(parseCohort),
    };
  }

  async create(
    cohort: gp2Model.ContributingCohortCreateDataObject,
  ): Promise<string> {
    const cleaned = parseToSquidex(cohort);

    const { id } = await this.squidexRestClient.create({
      ...cleaned,
    });

    return id;
  }
}

const parseCohort = (
  item: GraphqlCohorts,
): gp2Model.ContributingCohortDataObject => ({
  id: item.id,
  name: item.flatData.name || '',
});
