import { gp2 as gp2Model } from '@asap-hub/model';
import {
  gp2 as gp2Squidex,
  sanitiseForSquidex,
  SquidexGraphqlClient,
  SquidexRestClient,
} from '@asap-hub/squidex';
import {
  FetchExternalUserQuery,
  FetchExternalUsersQuery,
  FetchExternalUsersQueryVariables,
} from '../autogenerated-gql/graphql';
import { FETCH_EXTERNAL_USERS } from '../queries/external-users.queries';
import { ExternalUserDataProvider } from './types/external-user.data-provider.type';

export const parseGraphQLExternalUserToDataObject = ({
  id,
  flatData: { name, orcid },
}: NonNullable<
  FetchExternalUserQuery['findExternalUsersContent']
>): gp2Model.ExternalUserDataObject => ({
  id,
  name: name || '',
  orcid: orcid || undefined,
});
export class ExternalUserSquidexDataProvider
  implements ExternalUserDataProvider
{
  constructor(
    private squidexGraphqlClient: SquidexGraphqlClient,
    private externalUserSquidexRestClient: SquidexRestClient<gp2Squidex.RestExternalUser>,
  ) {}

  async fetchById(): Promise<null> {
    throw new Error('Method not implemented.');
  }

  async create(input: gp2Model.ExternalUserCreateDataObject): Promise<string> {
    const { id } = await this.externalUserSquidexRestClient.create({
      name: { iv: input.name },
      orcid: (input.orcid && { iv: input.orcid }) || undefined,
    });
    return id;
  }

  async fetch({
    take = 8,
    skip = 0,
    search,
  }: gp2Model.FetchExternalUsersOptions): Promise<gp2Model.ListExternalUserDataObject> {
    const searchFilter = [
      ...(search || '')
        .split(' ')
        .filter(Boolean)
        .map(sanitiseForSquidex)
        .reduce(
          (acc: string[], word: string) =>
            acc.concat(`${[`(contains(data/name/iv, '${word}'))`]}`),
          [],
        ),
    ].join(' or ');

    return this.queryForExternalUsers(searchFilter, take, skip);
  }

  private async queryForExternalUsers(
    filter: string,
    top: number,
    skip: number,
  ): Promise<gp2Model.ListExternalUserDataObject> {
    const { queryExternalUsersContentsWithTotal } = await this.queryFetchData(
      filter,
      top,
      skip,
    );

    const { total = 0, items = [] } = queryExternalUsersContentsWithTotal || {};

    return {
      total: items ? total : 0,
      items: (items || []).map(parseGraphQLExternalUserToDataObject),
    };
  }

  private async queryFetchData(filter: string, top: number, skip: number) {
    return this.squidexGraphqlClient.request<
      FetchExternalUsersQuery,
      FetchExternalUsersQueryVariables
    >(FETCH_EXTERNAL_USERS, { filter, top, skip });
  }
}
