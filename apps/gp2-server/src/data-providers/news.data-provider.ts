import { gp2 as gp2Model } from '@asap-hub/model';
import { parseDate, SquidexGraphqlClient } from '@asap-hub/squidex';
import { FetchNewsQuery } from '../autogenerated-gql/graphql';
import { FETCH_NEWS } from '../queries/news.queries';
import {
  FetchNewsProviderOptions,
  NewsDataProvider,
} from './types/news.data-provider.types';

export type GraphqlNews = NonNullable<
  NonNullable<
    NonNullable<
      NonNullable<FetchNewsQuery>['queryNewsAndEventsContentsWithTotal']
    >['items']
  >[number]
>;
export class NewsSquidexDataProvider implements NewsDataProvider {
  constructor(private squidexGraphqlClient: SquidexGraphqlClient) {}

  async fetch(
    _?: FetchNewsProviderOptions,
  ): Promise<gp2Model.ListNewsDataObject> {
    const { queryNewsAndEventsContentsWithTotal } =
      await this.squidexGraphqlClient.request<FetchNewsQuery>(FETCH_NEWS);

    const { total = 0, items = [] } = queryNewsAndEventsContentsWithTotal || {};
    return {
      total: items ? total : 0,
      items: (items || []).map(parseNews),
    };
  }
  async fetchById(): Promise<null> {
    throw new Error('Method not implemented.');
  }
}

const parseNews = (item: GraphqlNews): gp2Model.NewsDataObject => ({
  id: item.id,
  created: parseDate(item.created).toISOString(),
  shortText: item.flatData.shortText || '',
  title: item.flatData.title || '',
  link: item.flatData.link || undefined,
  linkText: item.flatData.linkText || undefined,
  sampleCount: item.flatData.sampleCount || 0,
  articleCount: item.flatData.articleCount || 0,
  cohortCount: item.flatData.cohortCount || 0,
});
