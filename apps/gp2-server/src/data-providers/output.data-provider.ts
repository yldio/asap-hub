import { gp2 as gp2Model } from '@asap-hub/model';
import {
  gp2 as gp2Squidex,
  parseToSquidex,
  SquidexGraphqlClient,
  SquidexRestClient,
} from '@asap-hub/squidex';
import { Filter } from 'odata-query';
import {
  FetchOutputQuery,
  FetchOutputQueryVariables,
  FetchOutputsQuery,
  FetchOutputsQueryVariables,
} from '../autogenerated-gql/graphql';
import { documentTypeMap, parseGraphQLOutput, typeMap } from '../entities';
import { FETCH_OUTPUT, FETCH_OUTPUTS } from '../queries/outputs.queries';
import logger from '../utils/logger';
import { buildODataFilter } from '../utils/odata';
import { reverseMap } from '../utils/reverse-map';
import { OutputDataProvider } from './types';

export const makeODataFilter = (
  filter?: gp2Model.FetchOutputFilter,
): Filter | null => {
  if (!filter) {
    return null;
  }

  const entries = Object.entries(filter).reduce<Filter[]>((res, [key, val]) => {
    if (Array.isArray(val)) {
      return res.concat({
        or: val.map((valElement) => ({
          [`data/${key}/iv`]: valElement,
        })),
      });
    }

    return res.concat({ [`data/${key}/iv`]: val });
  }, []);

  return entries.length === 1 ? (entries[0] as Filter) : entries;
};

export class OutputSquidexDataProvider implements OutputDataProvider {
  constructor(
    private squidexGraphqlClient: SquidexGraphqlClient,
    private squidexRestClient: SquidexRestClient<
      gp2Squidex.RestOutput,
      gp2Squidex.InputOutput
    >,
  ) {}
  async fetchById(id: string) {
    const outputGraphqlResponse = await this.squidexGraphqlClient.request<
      FetchOutputQuery,
      FetchOutputQueryVariables
    >(FETCH_OUTPUT, { id });

    const { findOutputsContent: outputContent } = outputGraphqlResponse;

    return outputContent ? parseGraphQLOutput(outputContent) : null;
  }

  async fetch({
    take = 8,
    skip = 0,
    search,
    filter,
    includeDrafts,
  }: gp2Model.FetchOutputOptions) {
    const containsFilters = (search || '')
      .split(' ')
      .filter(Boolean)
      .reduce<Filter[]>(
        (res, word: string) => [
          ...res,
          {
            [`data/title/iv`]: {
              contains: word,
            },
          },
        ],
        [],
      );

    const searchQ = containsFilters.length
      ? containsFilters.length === 1
        ? containsFilters[0]
        : { or: containsFilters }
      : null;
    const filterQ = makeODataFilter(filter);
    const filtersAndSearch = [filterQ, searchQ].filter(Boolean);
    const query =
      filtersAndSearch.length === 1 ? filtersAndSearch[0] : filtersAndSearch;
    const filterGraphql = buildODataFilter(query as Filter);

    const { queryOutputsContentsWithTotal } =
      await this.squidexGraphqlClient.request<
        FetchOutputsQuery,
        FetchOutputsQueryVariables
      >(
        FETCH_OUTPUTS,
        {
          top: take,
          skip,
          filter: filterGraphql,
        },
        { includeDrafts },
      );

    if (queryOutputsContentsWithTotal === null) {
      logger.warn('queryOutputsContentsWithTotal returned null');
      return {
        total: 0,
        items: [],
      };
    }

    const { total, items: outputs } = queryOutputsContentsWithTotal;

    if (outputs === null) {
      logger.warn('queryOutputsContentsWithTotal items returned null');
      return {
        total: 0,
        items: [],
      };
    }

    return {
      total,
      items: outputs.map((item) => parseGraphQLOutput(item)),
    };
  }

  async create({
    authors,
    documentType,
    type,
    publishDate: _,
    ...input
  }: gp2Model.OutputCreateDataObject) {
    const output = getOutputSquidexData({ authors, documentType, type });

    const parsedOutput = parseToSquidex({
      ...input,
      ...output,
      createdBy: [input.createdBy],
      updatedBy: [input.createdBy],
    });
    const { id: outputId } = await this.squidexRestClient.create(parsedOutput);

    return outputId;
  }

  async update(
    outputId: string,
    {
      authors,
      documentType,
      type,
      publishDate: _,
      ...input
    }: gp2Model.OutputUpdateDataObject,
  ) {
    const output = getOutputSquidexData({ authors, documentType, type });

    const parsedOutput = parseToSquidex({
      ...input,
      ...output,
      updatedBy: [input.updatedBy],
    });
    await this.squidexRestClient.patch(outputId, parsedOutput);
  }
}

const getAuthorIdList = (
  authorList: string[],
  author: gp2Model.AuthorUpsertDataObject,
) =>
  author.externalUserId || author.userId
    ? [...authorList, author.externalUserId ?? author.userId]
    : /* istanbul ignore next */
      authorList;
const reverseDocumentTypeMap = reverseMap(documentTypeMap);
const reverseTypeMap = reverseMap(typeMap);

const getOutputSquidexData = ({
  authors,
  documentType,
  type,
}:
  | Pick<gp2Model.OutputCreateDataObject, 'authors' | 'type' | 'documentType'>
  | Pick<
      gp2Model.OutputUpdateDataObject,
      'authors' | 'type' | 'documentType'
    >) => ({
  documentType: reverseDocumentTypeMap[documentType],
  ...(type && { type: reverseTypeMap[type] }),
  authors: authors.reduce<string[]>(getAuthorIdList, []),
});
