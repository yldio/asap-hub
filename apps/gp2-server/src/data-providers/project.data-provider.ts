import { FetchOptions, gp2 as gp2Model } from '@asap-hub/model';
import {
  gp2 as gp2Squidex,
  SquidexGraphqlClient,
  SquidexRestClient,
} from '@asap-hub/squidex';
import {
  FetchProjectQuery,
  FetchProjectQueryVariables,
  FetchProjectsQuery,
  FetchProjectsQueryVariables,
  ProjectsDataMembersRoleEnum,
} from '../autogenerated-gql/graphql';
import { FETCH_PROJECT, FETCH_PROJECTS } from '../queries/projects.queries';
import { parseResources } from '../utils/resources';
import { createUrl } from '../utils/urls';

export interface ProjectDataProvider {
  fetchById(id: string): Promise<gp2Model.ProjectDataObject | null>;
  fetch(options: FetchOptions): Promise<gp2Model.ListProjectDataObject>;
  update(
    id: string,
    projectToUpdate: gp2Model.ProjectUpdateDataObject,
  ): Promise<void>;
}
export class ProjectSquidexDataProvider implements ProjectDataProvider {
  constructor(
    private squidexGraphqlClient: SquidexGraphqlClient,
    private squidexRestClient: SquidexRestClient<
      gp2Squidex.RestProject,
      gp2Squidex.InputProject
    >,
  ) {}

  async fetchById(id: string): Promise<gp2Model.ProjectDataObject | null> {
    const { findProjectsContent } = await this.queryFetchByIdData(id);
    if (!findProjectsContent) {
      return null;
    }
    return parseProjectToDataObject(findProjectsContent);
  }

  async fetch(options: FetchOptions): Promise<gp2Model.ListProjectDataObject> {
    const { take = 10, skip = 0 } = options;
    const { queryProjectsContentsWithTotal } =
      await this.squidexGraphqlClient.request<
        FetchProjectsQuery,
        FetchProjectsQueryVariables
      >(FETCH_PROJECTS, { top: take, skip });

    if (
      !queryProjectsContentsWithTotal ||
      !queryProjectsContentsWithTotal.items
    ) {
      return {
        total: 0,
        items: [],
      };
    }

    return {
      total: queryProjectsContentsWithTotal.total,
      items: queryProjectsContentsWithTotal.items.map(parseProjectToDataObject),
    };
  }

  async update(
    id: string,
    project: gp2Model.ProjectUpdateDataObject,
  ): Promise<void> {
    const squidexProject = convertToSquidexProject(project);

    await this.squidexRestClient.patch(id, squidexProject);
  }

  private async queryFetchByIdData(id: string) {
    return this.squidexGraphqlClient.request<
      FetchProjectQuery,
      FetchProjectQueryVariables
    >(FETCH_PROJECT, { id });
  }
}
const convertToSquidexProject = ({
  resources,
  members,
}: gp2Model.ProjectUpdateDataObject): gp2Squidex.InputProject['data'] => ({
  ...(resources && { resources: { iv: resources || null } }),
  ...(members && {
    members: {
      iv:
        members.map(({ userId, role }) => ({
          user: [userId],
          role: reverseRoleMap[role],
        })) || null,
    },
  }),
});

export type GraphQLProject = NonNullable<
  NonNullable<
    NonNullable<
      NonNullable<FetchProjectsQuery>['queryProjectsContentsWithTotal']
    >['items']
  >[number]
>;

export type GraphQLProjectMember = NonNullable<
  NonNullable<GraphQLProject['flatData']>['members']
>[number];

type GraphQLProjectMemberUser = NonNullable<
  NonNullable<GraphQLProjectMember>['user']
>[number];

type GraphQLProjectMemberRole = NonNullable<GraphQLProjectMember['role']>;

export type GraphQLProjectMilestone = NonNullable<
  NonNullable<NonNullable<GraphQLProject['flatData']>['milestones']>[number]
>;

export type GraphQLProjectResource = NonNullable<
  NonNullable<GraphQLProject['flatData']>['resources']
>[number];

export type GraphQLProjectCalendar = NonNullable<
  NonNullable<GraphQLProject['flatData']>['calendars']
>[number];

const parseProjectMembers = (
  user: GraphQLProjectMemberUser,
  role: GraphQLProjectMemberRole,
) => {
  const flatAvatar = user.flatData.avatar || [];
  const avatarUrl =
    flatAvatar.length > 0
      ? createUrl(flatAvatar.map((a) => a.id))[0]
      : undefined;

  return {
    userId: user.id,
    firstName: user.flatData.firstName || '',
    lastName: user.flatData.lastName || '',
    avatarUrl,
    role: roleMap[role],
  };
};

export function parseProjectToDataObject({
  id,
  flatData: project,
}: GraphQLProject): gp2Model.ProjectDataObject {
  if (!project.status) {
    throw new TypeError('status is unknown');
  }
  const members =
    project.members?.reduce(
      (membersList: gp2Model.ProjectMember[], member: GraphQLProjectMember) => {
        const user = member.user && member.user[0];
        if (!(user && member.role)) {
          return membersList;
        }

        if (user.flatData.onboarded === false) {
          return membersList;
        }

        const groupMember = parseProjectMembers(user, member.role);
        return [...membersList, groupMember];
      },
      [],
    ) || [];

  if (project.keywords && !project.keywords.every(gp2Model.isKeyword)) {
    throw new TypeError('Invalid keyword received from Squidex');
  }
  const milestones =
    project.milestones?.map((milestone: GraphQLProjectMilestone) => {
      if (!milestone.status) {
        throw new TypeError('milestone status is unknown');
      }
      const status: gp2Model.MilestoneStatus =
        milestone.status === 'Not_Started' ? 'Not Started' : milestone.status;

      return {
        title: milestone.title || '',
        status,
        link: milestone.link || undefined,
        description: milestone.description || undefined,
      };
    }) || [];

  const resources = project.resources?.reduce(parseResources, []) || [];
  const { calendars } = project;
  const calendar =
    calendars && calendars[0]
      ? {
          id: calendars[0].id,
          name: calendars[0].flatData.name || '',
        }
      : undefined;
  return {
    id,
    title: project.title || '',
    startDate: project.startDate || '',
    endDate: project.endDate || undefined,
    status: project.status,
    projectProposalUrl: project.projectProposal || undefined,
    pmEmail: project.pmEmail || undefined,
    leadEmail: project.leadEmail || undefined,
    description: project.description || undefined,
    members,
    keywords: project.keywords || [],
    milestones,
    resources,
    traineeProject: project.traineeProject || false,
    opportunitiesLink: project.opportunitiesLink || undefined,
    calendar,
  };
}

export const roleMap: Record<
  ProjectsDataMembersRoleEnum,
  gp2Model.ProjectMemberRole
> = {
  [ProjectsDataMembersRoleEnum.ProjectManager]: 'Project manager',
  [ProjectsDataMembersRoleEnum.ProjectLead]: 'Project lead',
  [ProjectsDataMembersRoleEnum.ProjectCoLead]: 'Project co-lead',
  [ProjectsDataMembersRoleEnum.Contributor]: 'Contributor',
  [ProjectsDataMembersRoleEnum.Investigator]: 'Investigator',
};
export const reverseRoleMap: Record<
  gp2Model.ProjectMemberRole,
  gp2Squidex.RestProjectsMembersRole
> = {
  'Project manager': 'Project_Manager',
  'Project lead': 'Project_Lead',
  'Project co-lead': 'Project_CoLead',
  Contributor: 'Contributor',
  Investigator: 'Investigator',
};
