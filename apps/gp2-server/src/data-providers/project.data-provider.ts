import { gp2 } from '@asap-hub/model';
import { SquidexGraphqlClient } from '@asap-hub/squidex';
import {
  FetchProjectQuery,
  FetchProjectQueryVariables,
  FetchProjectsQuery,
  FetchProjectsQueryVariables,
  ProjectsDataMembersRoleEnum,
} from '../autogenerated-gql/graphql';
import { FETCH_PROJECT, FETCH_PROJECTS } from '../queries/projects.queries';
import { createUrl } from '../utils/urls';

export interface ProjectDataProvider {
  fetchById(id: string): Promise<gp2.ProjectDataObject | null>;
  fetch(): Promise<gp2.ListProjectDataObject>;
}
export class ProjectSquidexDataProvider implements ProjectDataProvider {
  constructor(private squidexGraphlClient: SquidexGraphqlClient) {}

  async fetchById(id: string): Promise<gp2.ProjectDataObject | null> {
    const { findProjectsContent } = await this.queryFetchByIdData(id);
    if (!findProjectsContent) {
      return null;
    }
    return parseProjectToDataObject(findProjectsContent);
  }

  async fetch(): Promise<gp2.ListProjectDataObject> {
    const result = await this.squidexGraphlClient.request<
      FetchProjectsQuery,
      FetchProjectsQueryVariables
    >(FETCH_PROJECTS);

    if (
      !result.queryProjectsContentsWithTotal ||
      !result.queryProjectsContentsWithTotal.items
    ) {
      return {
        total: 0,
        items: [],
      };
    }

    return {
      total: result.queryProjectsContentsWithTotal.total,
      items: result.queryProjectsContentsWithTotal.items.map(
        parseProjectToDataObject,
      ),
    };
  }

  private async queryFetchByIdData(id: string) {
    return this.squidexGraphlClient.request<
      FetchProjectQuery,
      FetchProjectQueryVariables
    >(FETCH_PROJECT, { id });
  }
}

export type GraphQLProject = NonNullable<
  NonNullable<
    NonNullable<
      NonNullable<FetchProjectsQuery>['queryProjectsContentsWithTotal']
    >['items']
  >[number]
>;

export type GraphQLProjectMember = NonNullable<
  NonNullable<GraphQLProject['flatData']>['members']
>[number];

type GraphQLProjectMemberUser = NonNullable<
  NonNullable<GraphQLProjectMember>['user']
>[number];

type GraphQLProjectMemberRole = NonNullable<GraphQLProjectMember['role']>;

export type GraphQLProjectMilestone = NonNullable<
  NonNullable<NonNullable<GraphQLProject['flatData']>['milestones']>[number]
>;

const parseProjectMembers = (
  user: GraphQLProjectMemberUser,
  role: GraphQLProjectMemberRole,
) => {
  const flatAvatar = user.flatData.avatar || [];
  const avatarUrl =
    flatAvatar.length > 0
      ? createUrl(flatAvatar.map((a) => a.id))[0]
      : undefined;

  const roleMap = {
    [ProjectsDataMembersRoleEnum.ProjectManager]: 'Project manager',
    [ProjectsDataMembersRoleEnum.ProjectLead]: 'Project lead',
    [ProjectsDataMembersRoleEnum.ProjectCoLead]: 'Project co-lead',
    [ProjectsDataMembersRoleEnum.Contributor]: 'Contributor',
    [ProjectsDataMembersRoleEnum.Investigator]: 'Investigator',
  } as const;

  return {
    userId: user.id,
    firstName: user.flatData.firstName || '',
    lastName: user.flatData.lastName || '',
    avatarUrl,
    role: roleMap[role],
  };
};

export function parseProjectToDataObject({
  id,
  flatData: project,
}: GraphQLProject): gp2.ProjectDataObject {
  if (!project.status) {
    throw new TypeError('status is unknown');
  }
  const members =
    project.members?.reduce(
      (membersList: gp2.ProjectMember[], member: GraphQLProjectMember) => {
        const user = member.user && member.user[0];
        if (!member.role) {
          return membersList;
        }
        if (!user) {
          return membersList;
        }

        const groupMember = parseProjectMembers(user, member.role);
        return [...membersList, groupMember];
      },
      [],
    ) || [];

  if (project.keywords && !project.keywords.every(gp2.isProjectKeyword)) {
    throw new TypeError('Invalid keyword received from Squidex');
  }
  const milestones =
    project.milestones?.map((milestone: GraphQLProjectMilestone) => {
      if (!milestone.status) {
        throw new TypeError('milestone status is unknown');
      }
      const status: gp2.ProjectMilestoneStatus =
        milestone.status === 'Not_Started' ? 'Not Started' : milestone.status;

      return {
        title: milestone.title || '',
        status,
        link: milestone.link || undefined,
        description: milestone.description || undefined,
      };
    }) || [];

  return {
    id,
    title: project.title || '',
    startDate: project.startDate || '',
    endDate: project.endDate || undefined,
    status: project.status,
    projectProposalUrl: project.projectProposal || undefined,
    pmEmail: project.pmEmail || undefined,
    leadEmail: project.leadEmail || undefined,
    description: project.description || undefined,
    members,
    keywords: project.keywords || [],
    milestones,
  };
}
