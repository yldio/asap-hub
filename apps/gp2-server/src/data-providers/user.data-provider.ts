import { gp2 } from '@asap-hub/model';
import {
  parseDate,
  parseToSquidex,
  SquidexGraphqlClient,
  SquidexRestClient,
  gp2 as gp2Squidex,
} from '@asap-hub/squidex';
import {
  FetchUserQuery,
  FetchUserQueryVariables,
  FetchUsersQuery,
  FetchUsersQueryVariables,
  UsersDataDegreeEnum,
  UsersDataRegionEnum,
  UsersDataRoleEnum,
} from '../autogenerated-gql/graphql';

import { FETCH_USER, FETCH_USERS } from '../queries/users.queries';
import { reverseMap } from '../utils/reverse-map';

export interface UserDataProvider {
  fetchById(id: string): Promise<gp2.UserDataObject | null>;
  update(id: string, update: gp2.UserUpdateDataObject): Promise<void>;
  create(update: gp2.UserCreateDataObject): Promise<string>;
  fetch(options: gp2.FetchUsersOptions): Promise<gp2.ListUserDataObject>;
}
const regionMap: Record<UsersDataRegionEnum, gp2.UserRegion> = {
  [UsersDataRegionEnum.Africa]: 'Africa',
  [UsersDataRegionEnum.Asia]: 'Asia',
  [UsersDataRegionEnum.AustraliaAustraliasia]: 'Australia/Australiasia',
  [UsersDataRegionEnum.Europe]: 'Europe',
  [UsersDataRegionEnum.LatinAmerica]: 'Latin America',
  [UsersDataRegionEnum.NorthAmerica]: 'North America',
  [UsersDataRegionEnum.SouthAmerica]: 'South America',
} as const;
const roleMap: Record<UsersDataRoleEnum, gp2.UserRole> = {
  [UsersDataRoleEnum.Administrator]: 'Administrator',
  [UsersDataRoleEnum.NetworkCollaborator]: 'Network Collaborator',
  [UsersDataRoleEnum.NetworkInvestigator]: 'Network Investigator',
  [UsersDataRoleEnum.Trainee]: 'Trainee',
  [UsersDataRoleEnum.WorkingGroupParticipant]: 'Working Group Participant',
} as const;
const reverseRegionMap = reverseMap(regionMap);
const reverseRoleMap = reverseMap(roleMap);

export class UserSquidexDataProvider implements UserDataProvider {
  constructor(
    private squidexGraphlClient: SquidexGraphqlClient,
    private userSquidexRestClient: SquidexRestClient<
      gp2Squidex.RestUser,
      gp2Squidex.InputUser
    >,
  ) {}

  async fetchById(id: string): Promise<gp2.UserDataObject | null> {
    const { findUsersContent } = await this.queryFetchByIdData(id);
    if (!findUsersContent) {
      return null;
    }
    return parseGraphQLUserToDataObject(findUsersContent);
  }

  async update(
    id: string,
    userToUpdate: gp2.UserUpdateDataObject,
  ): Promise<void> {
    const cleanedUser = getUserSquidexData(userToUpdate);

    await this.userSquidexRestClient.patch(id, cleanedUser);
  }

  async create(userToCreate: gp2.UserCreateDataObject): Promise<string> {
    const cleanedUser = getUserSquidexData(userToCreate);

    const response = await this.userSquidexRestClient.create({
      ...cleanedUser,
      avatar: { iv: [] },
      connections: { iv: [] },
    });

    return response.id;
  }
  async fetch(options: gp2.FetchUsersOptions): Promise<gp2.ListUserDataObject> {
    const queryFilter = generateFetchQueryFilter(options);
    const { take = 8, skip = 0 } = options;
    return this.queryForUsers(queryFilter, take, skip);
  }

  private async queryForUsers(filter: string, top: number, skip: number) {
    const { queryUsersContentsWithTotal } = await this.queryFetchData(
      filter,
      top,
      skip,
    );

    const { total = 0, items = [] } = queryUsersContentsWithTotal || {};

    return {
      total: items ? total : 0,
      items: (items || []).map(parseGraphQLUserToDataObject),
    };
  }
  private async queryFetchData(filter: string, top: number, skip: number) {
    return this.squidexGraphlClient.request<
      FetchUsersQuery,
      FetchUsersQueryVariables
    >(FETCH_USERS, { filter, top, skip });
  }
  private async queryFetchByIdData(id: string) {
    return this.squidexGraphlClient.request<
      FetchUserQuery,
      FetchUserQueryVariables
    >(FETCH_USER, { id });
  }
}

type UserCreateDataObjectEnumFields = Pick<
  gp2.UserCreateDataObject,
  'degrees' | 'region' | 'role'
>;
type UserCreateInputEnumFields = {
  degree?: `${UsersDataDegreeEnum}`[];
  region: UsersDataRegionEnum;
  role: UsersDataRoleEnum;
};
type UserUpdateDataObjectEnumFields = Pick<
  gp2.UserUpdateDataObject,
  'degrees' | 'region' | 'role'
>;
type UserUpdateInputEnumFields = Partial<UserCreateInputEnumFields>;
const mapUserFields = (
  input: UserCreateDataObjectEnumFields | UserUpdateDataObjectEnumFields,
): UserCreateInputEnumFields | UserUpdateInputEnumFields => {
  const mappedDegrees = input.degrees?.map((degree) => {
    if (degree === 'MD, PhD') {
      return UsersDataDegreeEnum.MdPhD;
    }

    return degree;
  });

  return {
    ...(input.region && { region: reverseRegionMap[input.region] }),
    ...(input.role && { role: reverseRoleMap[input.role] }),
    ...(input.degrees && { degree: mappedDegrees }),
  };
};

function getUserSquidexData(
  input: gp2.UserCreateDataObject,
): Omit<gp2Squidex.InputUser['data'], 'connections' | 'avatar'>;
function getUserSquidexData(
  input: gp2.UserUpdateDataObject,
): Partial<Omit<gp2Squidex.InputUser['data'], 'connections' | 'avatar'>>;
function getUserSquidexData(
  input: gp2.UserUpdateDataObject | gp2.UserCreateDataObject,
):
  | Omit<gp2Squidex.InputUser['data'], 'connections' | 'avatar'>
  | Partial<Omit<gp2Squidex.InputUser['data'], 'connections' | 'avatar'>> {
  const { region, role, degrees, ...userInput } = input;
  const fieldMappedUser = mapUserFields({ region, role, degrees });
  const cleanedUser = parseToSquidex({ ...userInput, ...fieldMappedUser });

  return cleanedUser;
}

const generateFetchQueryFilter = ({ filter }: gp2.FetchUsersOptions) => {
  const { regions, code } = filter || {};
  const filterRegions = regions
    ?.map((region) => `data/region/iv eq '${region}'`)
    .join(' or ');

  const filterCode = code && { 'data/connections/iv/code': code };

  const queryFilter = [filterRegions, filterCode]
    .filter(Boolean)
    .join(' and ')
    .trim();
  return queryFilter;
};

export const parseGraphQLUserToDataObject = ({
  id,
  created,
  flatData: item,
}: NonNullable<FetchUserQuery['findUsersContent']>): gp2.UserDataObject => {
  if (!item.region) {
    throw new Error(`Region not defined: ${item.region}`);
  }
  if (!item.role) {
    throw new Error(`Role not defined: ${item.role}`);
  }
  const createdDate = parseDate(created).toISOString();

  const degrees: gp2.UserDegree[] | undefined =
    item.degree?.map<gp2.UserDegree>((degree) => {
      if (degree === 'MD_PhD') {
        return 'MD, PhD';
      }

      return degree;
    });

  const positions =
    item.positions?.map(({ role, department, institution }) => {
      if (!(role && department && institution)) {
        throw new Error('Position not defined');
      }
      return {
        role,
        department,
        institution,
      };
    }) || [];
  return {
    id,
    createdDate,
    firstName: item.firstName || '',
    lastName: item.lastName || '',
    degrees,
    email: item.email || '',
    region: regionMap[item.region],
    role: roleMap[item.role],
    country: item.country || '',
    city: item.city || undefined,
    positions,
  };
};
