import { gp2 } from '@asap-hub/model';
import { workingGroupNetworkRole } from '@asap-hub/model/src/gp2';
import { SquidexGraphqlClient } from '@asap-hub/squidex';
import {
  FetchWorkingGroupNetworkQuery,
  FetchWorkingGroupNetworkQueryVariables,
} from '../autogenerated-gql/graphql';
import { FETCH_WORKING_GROUP_NETWORK } from '../queries/working-group-network.queries';
import { parseWorkingGroupToDataObject } from './working-group.data-provider';

export interface WorkingGroupNetworkDataProvider {
  fetch(): Promise<gp2.ListWorkingGroupNetworkDataObject>;
}
export class WorkingGroupNetworkSquidexDataProvider
  implements WorkingGroupNetworkDataProvider
{
  constructor(private squidexGraphlClient: SquidexGraphqlClient) {}

  async fetch(): Promise<gp2.ListWorkingGroupNetworkDataObject> {
    const { queryWorkingGroupNetworkContents: networks } =
      await this.squidexGraphlClient.request<
        FetchWorkingGroupNetworkQuery,
        FetchWorkingGroupNetworkQueryVariables
      >(FETCH_WORKING_GROUP_NETWORK);

    if (!networks || networks.length === 0 || !networks[0]) {
      return {
        items: [],
        total: 0,
      };
    }
    const items = parseWorkingGroupNetworkToDataObject(networks[0]);
    return {
      items,
      total: items.length,
    };
  }
}

export type GraphQLWorkingGroupNetwork = NonNullable<
  NonNullable<FetchWorkingGroupNetworkQuery>['queryWorkingGroupNetworkContents']
>[number];

export function parseWorkingGroupNetworkToDataObject(
  network: GraphQLWorkingGroupNetwork,
): gp2.WorkingGroupNetworkDataObject[] {
  return workingGroupNetworkRole.map((role) => ({
    role,
    workingGroups:
      network.flatData[role]?.map((wg) => parseWorkingGroupToDataObject(wg)) ||
      [],
  }));
}
