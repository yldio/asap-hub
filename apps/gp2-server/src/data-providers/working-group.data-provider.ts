import { gp2 } from '@asap-hub/model';
import { SquidexGraphqlClient } from '@asap-hub/squidex';
import {
  FetchWorkingGroupsQuery,
  FetchWorkingGroupsQueryVariables,
} from '../autogenerated-gql/graphql';
import { FETCH_WORKING_GROUPS } from '../queries/working-groups.queries';

export interface WorkingGroupDataProvider {
  fetch(): Promise<gp2.ListWorkingGroupDataObject>;
}
export class WorkingGroupSquidexDataProvider
  implements WorkingGroupDataProvider
{
  constructor(private squidexGraphlClient: SquidexGraphqlClient) {}
  async fetch(): Promise<gp2.ListWorkingGroupDataObject> {
    const result = await this.squidexGraphlClient.request<
      FetchWorkingGroupsQuery,
      FetchWorkingGroupsQueryVariables
    >(FETCH_WORKING_GROUPS);

    if (
      !result.queryWorkingGroupsContentsWithTotal ||
      !result.queryWorkingGroupsContentsWithTotal.items
    ) {
      return {
        total: 0,
        items: [],
      };
    }

    return {
      total: result.queryWorkingGroupsContentsWithTotal.total,
      items: result.queryWorkingGroupsContentsWithTotal.items.map(
        (workingGroup) => ({
          ...workingGroup.flatData,
          id: workingGroup.id,
          title: workingGroup.flatData.title || '',
          shortDescription: workingGroup.flatData.shortDescription || '',
          leadingMembers: workingGroup.flatData.leadingMembers || '',
          members: [],
        }),
      ),
    };
  }
}
