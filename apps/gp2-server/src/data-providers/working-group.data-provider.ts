import { gp2 as gp2Model } from '@asap-hub/model';
import {
  gp2 as gp2Squidex,
  SquidexGraphqlClient,
  SquidexRestClient,
} from '@asap-hub/squidex';
import {
  FetchWorkingGroupQuery,
  FetchWorkingGroupQueryVariables,
  FetchWorkingGroupsQuery,
  FetchWorkingGroupsQueryVariables,
  WorkingGroupsDataMembersRoleEnum,
} from '../autogenerated-gql/graphql';
import {
  FETCH_WORKING_GROUP,
  FETCH_WORKING_GROUPS,
} from '../queries/working-groups.queries';
import { parseResources } from '../utils/resources';
import { createUrl } from '../utils/urls';

export interface WorkingGroupDataProvider {
  fetchById(id: string): Promise<gp2Model.WorkingGroupDataObject | null>;
  fetch(): Promise<gp2Model.ListWorkingGroupDataObject>;
  update(
    id: string,
    workingGroupToUpdate: gp2Model.WorkingGroupUpdateDataObject,
  ): Promise<void>;
}
export class WorkingGroupSquidexDataProvider
  implements WorkingGroupDataProvider
{
  constructor(
    private squidexGraphqlClient: SquidexGraphqlClient,
    private squidexRestClient: SquidexRestClient<
      gp2Squidex.RestWorkingGroup,
      gp2Squidex.InputWorkingGroup
    >,
  ) {}

  async fetchById(id: string): Promise<gp2Model.WorkingGroupDataObject | null> {
    const { findWorkingGroupsContent } = await this.queryFetchByIdData(id);
    if (!findWorkingGroupsContent) {
      return null;
    }
    return parseWorkingGroupToDataObject(findWorkingGroupsContent);
  }

  async fetch(): Promise<gp2Model.ListWorkingGroupDataObject> {
    const result = await this.squidexGraphqlClient.request<
      FetchWorkingGroupsQuery,
      FetchWorkingGroupsQueryVariables
    >(FETCH_WORKING_GROUPS);

    if (
      !result.queryWorkingGroupsContentsWithTotal ||
      !result.queryWorkingGroupsContentsWithTotal.items
    ) {
      return {
        total: 0,
        items: [],
      };
    }

    return {
      total: result.queryWorkingGroupsContentsWithTotal.total,
      items: result.queryWorkingGroupsContentsWithTotal.items.map(
        parseWorkingGroupToDataObject,
      ),
    };
  }

  async update(
    id: string,
    workingGroup: gp2Model.WorkingGroupUpdateDataObject,
  ): Promise<void> {
    const squidexWorkingGroup = convertToSquidexWorkingGroup(workingGroup);

    await this.squidexRestClient.patch(id, squidexWorkingGroup);
  }
  private async queryFetchByIdData(id: string) {
    return this.squidexGraphqlClient.request<
      FetchWorkingGroupQuery,
      FetchWorkingGroupQueryVariables
    >(FETCH_WORKING_GROUP, { id });
  }
}

const convertToSquidexWorkingGroup = ({
  resources,
}: gp2Model.WorkingGroupUpdateDataObject): gp2Squidex.InputWorkingGroup['data'] => ({
  resources: { iv: resources },
});

export type GraphQLWorkingGroup = NonNullable<
  NonNullable<
    NonNullable<FetchWorkingGroupsQuery>['queryWorkingGroupsContentsWithTotal']
  >['items']
>[number];

export type GraphQLWorkingGroupMember = NonNullable<
  NonNullable<GraphQLWorkingGroup['flatData']>['members']
>[number];

type GraphQLWorkingGroupMemberUser = NonNullable<
  NonNullable<GraphQLWorkingGroupMember>['user']
>[number];
type GraphQLWorkingGroupMemberRole = NonNullable<
  GraphQLWorkingGroupMember['role']
>;

export type GraphQLWorkingGroupMilestone = NonNullable<
  NonNullable<
    NonNullable<GraphQLWorkingGroup['flatData']>['milestones']
  >[number]
>;

export type GraphQLWorkingGroupResource = NonNullable<
  NonNullable<GraphQLWorkingGroup['flatData']>['resources']
>[number];

export type GraphQLWorkingGroupCalendar = NonNullable<
  NonNullable<GraphQLWorkingGroup['flatData']>['calendars']
>[number];

const parseWorkingGroupMembers = (
  user: GraphQLWorkingGroupMemberUser,
  role: GraphQLWorkingGroupMemberRole,
) => {
  const flatAvatar = user.flatData.avatar || [];
  const avatarUrl =
    flatAvatar.length > 0
      ? createUrl(flatAvatar.map((a) => a.id))[0]
      : undefined;

  return {
    userId: user.id,
    role: roleMap[role],
    firstName: user.flatData.firstName || '',
    lastName: user.flatData.lastName || '',
    avatarUrl,
  };
};

export function parseWorkingGroupToDataObject({
  id,
  flatData: workingGroup,
}: GraphQLWorkingGroup): gp2Model.WorkingGroupDataObject {
  const members =
    workingGroup.members?.reduce(
      (
        membersList: gp2Model.WorkingGroupMember[],
        member: GraphQLWorkingGroupMember,
      ) => {
        const user = member.user && member.user[0];
        if (!(user && member.role)) {
          return membersList;
        }
        if (user.flatData.onboarded === false) {
          return membersList;
        }
        const groupMember = parseWorkingGroupMembers(user, member.role);
        return [...membersList, groupMember];
      },
      [],
    ) || [];

  const milestones =
    workingGroup.milestones?.map((milestone: GraphQLWorkingGroupMilestone) => {
      if (!milestone.status) {
        throw new TypeError('milestone status is unknown');
      }
      const status: gp2Model.MilestoneStatus =
        milestone.status === 'Not_Started' ? 'Not Started' : milestone.status;

      return {
        title: milestone.title || '',
        status,
        link: milestone.link || undefined,
        description: milestone.description || undefined,
      };
    }) || [];

  const resources = workingGroup.resources?.reduce(parseResources, []) || [];

  const { calendars } = workingGroup;
  const calendar =
    calendars && calendars[0]
      ? {
          id: calendars[0].id,
          name: calendars[0].flatData.name || '',
        }
      : undefined;

  return {
    id,
    title: workingGroup.title || '',
    shortDescription: workingGroup.shortDescription || '',
    description: workingGroup.description || '',
    primaryEmail: workingGroup.primaryEmail || undefined,
    secondaryEmail: workingGroup.secondaryEmail || undefined,
    leadingMembers: workingGroup.leadingMembers || '',
    members,
    milestones,
    resources,
    calendar,
  };
}

export const roleMap: Record<
  WorkingGroupsDataMembersRoleEnum,
  gp2Model.WorkingGroupMemberRole
> = {
  [WorkingGroupsDataMembersRoleEnum.Lead]: 'Lead',
  [WorkingGroupsDataMembersRoleEnum.CoLead]: 'Co-lead',
  [WorkingGroupsDataMembersRoleEnum.WorkingGroupMember]: 'Working group member',
};
