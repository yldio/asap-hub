import { gp2 } from '@asap-hub/model';
import { SquidexGraphqlClient } from '@asap-hub/squidex';
import {
  FetchWorkingGroupQuery,
  FetchWorkingGroupQueryVariables,
  FetchWorkingGroupsQuery,
  FetchWorkingGroupsQueryVariables,
  WorkingGroupsDataMembersRoleEnum,
  WorkingGroupsDataResourcesTypeEnum,
} from '../autogenerated-gql/graphql';
import {
  FETCH_WORKING_GROUP,
  FETCH_WORKING_GROUPS,
} from '../queries/working-groups.queries';
import { createUrl } from '../utils/urls';

export interface WorkingGroupDataProvider {
  fetchById(id: string): Promise<gp2.WorkingGroupDataObject | null>;
  fetch(): Promise<gp2.ListWorkingGroupDataObject>;
}
export class WorkingGroupSquidexDataProvider
  implements WorkingGroupDataProvider
{
  constructor(private squidexGraphlClient: SquidexGraphqlClient) {}

  async fetchById(id: string): Promise<gp2.WorkingGroupDataObject | null> {
    const { findWorkingGroupsContent } = await this.queryFetchByIdData(id);
    if (!findWorkingGroupsContent) {
      return null;
    }
    return parseWorkingGroupToDataObject(findWorkingGroupsContent);
  }

  async fetch(): Promise<gp2.ListWorkingGroupDataObject> {
    const result = await this.squidexGraphlClient.request<
      FetchWorkingGroupsQuery,
      FetchWorkingGroupsQueryVariables
    >(FETCH_WORKING_GROUPS);

    if (
      !result.queryWorkingGroupsContentsWithTotal ||
      !result.queryWorkingGroupsContentsWithTotal.items
    ) {
      return {
        total: 0,
        items: [],
      };
    }

    return {
      total: result.queryWorkingGroupsContentsWithTotal.total,
      items: result.queryWorkingGroupsContentsWithTotal.items.map(
        parseWorkingGroupToDataObject,
      ),
    };
  }

  private async queryFetchByIdData(id: string) {
    return this.squidexGraphlClient.request<
      FetchWorkingGroupQuery,
      FetchWorkingGroupQueryVariables
    >(FETCH_WORKING_GROUP, { id });
  }
}

export type GraphQLWorkingGroup = NonNullable<
  NonNullable<
    NonNullable<FetchWorkingGroupsQuery>['queryWorkingGroupsContentsWithTotal']
  >['items']
>[number];

export type GraphQLWorkingGroupMember = NonNullable<
  NonNullable<GraphQLWorkingGroup['flatData']>['members']
>[number];

type GraphQLWorkingGroupMemberUser = NonNullable<
  NonNullable<GraphQLWorkingGroupMember>['user']
>[number];
type GraphQLWorkingGroupMemberRole = NonNullable<
  GraphQLWorkingGroupMember['role']
>;

export type GraphQLWorkingGroupResource = NonNullable<
  NonNullable<GraphQLWorkingGroup['flatData']>['resources']
>[number];

const parseWorkingGroupMembers = (
  user: GraphQLWorkingGroupMemberUser,
  role: GraphQLWorkingGroupMemberRole,
) => {
  const flatAvatar = user.flatData.avatar || [];
  const avatarUrl =
    flatAvatar.length > 0
      ? createUrl(flatAvatar.map((a) => a.id))[0]
      : undefined;

  const roleMap = {
    [WorkingGroupsDataMembersRoleEnum.Lead]: 'Lead',
    [WorkingGroupsDataMembersRoleEnum.CoLead]: 'Co-lead',
    [WorkingGroupsDataMembersRoleEnum.WorkingGroupMember]:
      'Working group member',
  } as const;

  return {
    userId: user.id,
    role: roleMap[role],
    firstName: user.flatData.firstName || '',
    lastName: user.flatData.lastName || '',
    avatarUrl,
  };
};

export function parseWorkingGroupToDataObject({
  id,
  flatData: workingGroup,
}: GraphQLWorkingGroup): gp2.WorkingGroupDataObject {
  const members =
    workingGroup.members?.reduce(
      (
        membersList: gp2.WorkingGroupMember[],
        member: GraphQLWorkingGroupMember,
      ) => {
        const user = member.user && member.user[0];
        if (!(user && member.role)) {
          return membersList;
        }
        const groupMember = parseWorkingGroupMembers(user, member.role);
        return [...membersList, groupMember];
      },
      [],
    ) || [];

  const resources =
    workingGroup.resources?.reduce(
      (
        resourceList: gp2.WorkingGroupResource[],
        resource: GraphQLWorkingGroupResource,
      ) => {
        if (
          !(resource.title && resource.type) ||
          (resource.type === WorkingGroupsDataResourcesTypeEnum.Link &&
            !resource.externalLink)
        ) {
          return resourceList;
        }

        const parsedResource = {
          title: resource.title,
          description: resource.description || undefined,
        };
        if (resource.type === WorkingGroupsDataResourcesTypeEnum.Note) {
          return [
            ...resourceList,
            {
              type: 'Note' as const,
              ...parsedResource,
            },
          ];
        }
        const externalLink = resource.externalLink || '';
        return [
          ...resourceList,
          {
            type: 'Link' as const,
            ...parsedResource,
            externalLink,
          },
        ];
      },
      [],
    ) || [];

  return {
    id,
    title: workingGroup.title || '',
    shortDescription: workingGroup.shortDescription || '',
    description: workingGroup.description || '',
    primaryEmail: workingGroup.primaryEmail || undefined,
    secondaryEmail: workingGroup.secondaryEmail || undefined,
    leadingMembers: workingGroup.leadingMembers || '',
    members,
    resources,
  };
}
