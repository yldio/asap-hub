/* eslint-disable @typescript-eslint/no-non-null-assertion */
import { gp2, isEventStatus } from '@asap-hub/model';
import { parseDate } from '@asap-hub/squidex';
import { DateTime } from 'luxon';

import { EventContentFragment } from '../autogenerated-gql/graphql';
import { createUrl } from '../utils/urls';
import { parseGraphqlCalendarToResponse } from './calendar.entity';

export const getMeetingMaterial = <T>(
  material: T,
  isPermanentlyUnavailable: boolean,
  isStale: boolean,
  emptyState: T,
): T | null => {
  const isEmpty = !(Array.isArray(material) ? material.length : material);
  if (isPermanentlyUnavailable || (isEmpty && isStale)) {
    return null;
  }
  return isEmpty ? emptyState : material;
};

export type GraphqlEventSpeakerUser = Extract<
  NonNullable<
    NonNullable<EventContentFragment['flatData']['speakers']>[number]['user']
  >[number],
  { __typename: 'Users' }
>;

export type GraphqlEventSpeakerExternalUser = Extract<
  NonNullable<
    NonNullable<EventContentFragment['flatData']['speakers']>[number]['user']
  >[number],
  { __typename: 'ExternalUsers' }
>;

export const parseEventSpeakerUser = (
  user: GraphqlEventSpeakerUser,
): gp2.EventSpeakerUser => {
  const flatAvatar = user.flatData.avatar || [];

  return {
    id: user.id,
    firstName: user.flatData.firstName ?? undefined,
    lastName: user.flatData.lastName ?? undefined,
    displayName: `${user.flatData.firstName} ${user.flatData.lastName}`,
    avatarUrl: flatAvatar.length
      ? createUrl(flatAvatar.map((a) => a.id))[0]
      : undefined,
  };
};

export const parseEventSpeakerExternalUser = (
  user: GraphqlEventSpeakerExternalUser,
): gp2.EventSpeakerExternalUser => ({
  name: user.flatData.name || '',
  orcid: user.flatData.orcid || '',
});

export const parseGraphQLSpeakers = (
  speakers: NonNullable<EventContentFragment['flatData']['speakers']>,
): gp2.EventSpeaker[] =>
  speakers.reduce((speakerList: gp2.EventSpeaker[], speaker) => {
    const user = speaker?.user?.[0];
    const topic = speaker?.topic || undefined;

    if (user?.__typename === 'ExternalUsers') {
      speakerList.push({
        speaker: parseEventSpeakerExternalUser(user),
        topic,
      });
      return speakerList;
    }

    if (!user) {
      speakerList.push({
        speaker: undefined,
        topic,
      });
      return speakerList;
    }

    if (user?.flatData.onboarded !== true) {
      return speakerList;
    }

    speakerList.push({
      speaker: parseEventSpeakerUser(user),
      topic,
    });
    return speakerList;
  }, []);

export const parseGraphQLEvent = (
  item: EventContentFragment,
): gp2.EventResponse => {
  if (!item.flatData.calendar?.[0]) {
    throw new Error(`Event (${item.id}) doesn't have a calendar"`);
  }

  const calendar = parseGraphqlCalendarToResponse(
    item.flatData.calendar[0].flatData,
  );

  const startDate = DateTime.fromISO(item.flatData.startDate!);

  const meetingLink = item.flatData.meetingLink || undefined;

  const thumbnail = item.flatData.thumbnail?.length
    ? createUrl(item.flatData.thumbnail.map((t) => t.id))[0]
    : undefined;

  const speakers = parseGraphQLSpeakers(item.flatData.speakers ?? []);

  const endDate = DateTime.fromISO(item.flatData.endDate);
  const isStale = endDate.diffNow('days').get('days') < -14; // 14 days have passed after the event

  const {
    notesPermanentlyUnavailable,
    videoRecordingPermanentlyUnavailable,
    presentationPermanentlyUnavailable,
    meetingMaterialsPermanentlyUnavailable,
    notes,
    videoRecording,
    presentation,
    meetingMaterials,
  } = item.flatData;

  if (!isEventStatus(item.flatData.status)) {
    throw new Error(
      `Invalid event (${item.id}) status "${item.flatData.status}"`,
    );
  }

  return {
    id: item.id,
    description: item.flatData.description || '',
    startDate: startDate.toUTC().toString(),
    startDateTimeZone: item.flatData.startDateTimeZone!,
    startDateTimestamp: startDate.toSeconds(),
    endDate: endDate.toUTC().toString(),
    endDateTimeZone: item.flatData.endDateTimeZone!,
    endDateTimestamp: endDate.toSeconds(),
    lastModifiedDate: parseDate(item.lastModified).toISOString(),
    title: item.flatData.title!,
    notes: getMeetingMaterial(
      notes,
      !!notesPermanentlyUnavailable,
      isStale,
      undefined,
    ),
    videoRecording: getMeetingMaterial(
      videoRecording,
      !!videoRecordingPermanentlyUnavailable,
      isStale,
      undefined,
    ),
    presentation: getMeetingMaterial(
      presentation,
      !!presentationPermanentlyUnavailable,
      isStale,
      undefined,
    ),
    meetingMaterials: getMeetingMaterial(
      (meetingMaterials ?? []).map(({ title, url }) => ({
        title: title ?? '',
        url: url ?? '',
      })),
      !!meetingMaterialsPermanentlyUnavailable,
      isStale,
      [],
    ),
    thumbnail,
    meetingLink,
    hideMeetingLink: item.flatData.hideMeetingLink || false,
    status: item.flatData.status,
    tags: item.flatData.tags ?? [],
    calendar,
    speakers,
  };
};
