import { gp2 as gp2Model } from '@asap-hub/model';
import { parseDate } from '@asap-hub/squidex';
import {
  FetchOutputQuery,
  OutputsDataDocumentTypeEnum,
  OutputsDataTypeEnum,
} from '../autogenerated-gql/graphql';
import { createUrl } from '../utils/urls';

export const documentTypeMap: Record<
  OutputsDataDocumentTypeEnum,
  gp2Model.OutputDocumentType
> = {
  [OutputsDataDocumentTypeEnum.Article]: 'Articles',
  [OutputsDataDocumentTypeEnum.CodeSoftware]: 'Code/Software',
  [OutputsDataDocumentTypeEnum.DataRelease]: 'Data Releases',
  [OutputsDataDocumentTypeEnum.Form]: 'Forms',
  [OutputsDataDocumentTypeEnum.TrainingMaterial]: 'Training Materials',
  [OutputsDataDocumentTypeEnum.Update]: 'Updates',
};

export const typeMap: Record<OutputsDataTypeEnum, gp2Model.OutputType> = {
  [OutputsDataTypeEnum.Blog]: 'Blog',
  [OutputsDataTypeEnum.HotTopic]: 'Hot Topic',
  [OutputsDataTypeEnum.Letter]: 'Letter',
  [OutputsDataTypeEnum.Research]: 'Research',
  [OutputsDataTypeEnum.Review]: 'Review',
};

const getType = (
  documentType: OutputsDataDocumentTypeEnum,
  type: OutputsDataTypeEnum | null,
) => {
  if (documentType !== OutputsDataDocumentTypeEnum.Article) {
    return undefined;
  }
  if (!type) {
    throw new TypeError('type not defined');
  }
  return typeMap[type];
};

export const parseGraphQLOutput = (
  output: NonNullable<FetchOutputQuery['findOutputsContent']>,
): gp2Model.OutputDataObject => {
  const data = output.flatData;

  if (!data.documentType) {
    throw new TypeError('document type not defined');
  }
  const documentType = documentTypeMap[data.documentType];
  const type = getType(data.documentType, data.type);

  const workingGroups = data.workingGroups?.length
    ? {
        id: data.workingGroups[0]?.id || '',
        title: data.workingGroups[0]?.flatData.title || '',
      }
    : undefined;
  const projects = data.projects?.length
    ? {
        id: data.projects[0]?.id || '',
        title: data.projects[0]?.flatData.title || '',
      }
    : undefined;

  return {
    id: output.id,
    authors:
      output.flatData.authors
        ?.filter(
          (author) =>
            author.__typename !== 'Users' ||
            author.flatData?.onboarded !== false,
        )
        .map((author) => {
          if (author.__typename === 'Users') {
            const avatarUrl = author.flatData.avatar?.length
              ? createUrl(author.flatData.avatar.map((a) => a.id))[0]
              : undefined;
            return {
              id: author.id,
              firstName: author.flatData.firstName || '',
              lastName: author.flatData.lastName || '',
              onboarded: author.flatData.onboarded || false,
              avatarUrl,
            };
          }

          return {
            id: author.id,
            displayName: author.flatData?.name || '',
            orcid: author.flatData?.orcid || undefined,
          };
        }) || [],
    created: parseDate(output.created).toISOString(),
    link: data.link || undefined,
    documentType,
    type: type || undefined,
    title: data.title || '',
    publishDate: data.publishDate || undefined,
    addedDate: data.addedDate,
    lastUpdatedPartial:
      data.lastUpdatedPartial || output.lastModified || output.created,
    subtype: data.subtype || undefined,
    workingGroups,
    projects,
  };
};
