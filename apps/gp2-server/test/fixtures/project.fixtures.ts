import type { gp2 as gp2Model } from '@asap-hub/model';
import type { gp2 as gp2Squidex } from '@asap-hub/squidex';
import {
  FetchProjectQuery,
  FetchProjectsQuery,
  ProjectsDataMembersRoleEnum,
  ProjectsDataMilestonesStatusEnum,
  ProjectsDataResourcesTypeEnum,
  ProjectsDataStatusEnum,
} from '../../src/autogenerated-gql/graphql';
import {
  GraphQLProjectMember,
  GraphQLProjectMilestone,
  GraphQLProjectResource,
} from '../../src/data-providers/project.data-provider';

export const getProjectDataObject = (): gp2Model.ProjectDataObject => ({
  id: '42',
  title: 'A Project',
  startDate: '2020-07-06',
  endDate: '2021-12-28',
  status: 'Completed',
  projectProposalUrl: 'http://a-proposal',
  members: [
    {
      userId: '11',
      firstName: 'Tony',
      lastName: 'Stark',
      role: 'Project manager',
    },
  ],
  keywords: ['R'],
  description: 'test description',
  leadEmail: 'peter@parker.com',
  pmEmail: 'tony@stark.com',
  milestones: [
    {
      title: 'A project milestone',
      status: 'Active',
    },
  ],
  resources: [
    {
      type: 'Note',
      description: 'Project resource description',
      title: 'Project resource title',
    },
  ],
});
export const getProjectUpdateDataObject =
  (): gp2Model.ProjectUpdateDataObject => ({
    resources: [
      {
        type: 'Note',
        description: 'Project resource description',
        title: 'Project resource title',
      },
    ],
  });

export const getRestProjectUpdateData =
  (): gp2Squidex.InputProject['data'] => ({
    resources: {
      iv: [
        {
          type: 'Note',
          description: 'Project resource description',
          title: 'Project resource title',
        },
      ],
    },
  });
export const getListProjectDataObject = (): gp2Model.ListProjectResponse => ({
  total: 1,
  items: [getProjectDataObject()],
});

export const getProjectResponse = (): gp2Model.ProjectResponse =>
  getProjectDataObject();

export const getListProjectsResponse = (): gp2Model.ListProjectResponse => ({
  total: 1,
  items: [getProjectResponse()],
});

export const getSquidexProjectsGraphqlResponse = (): FetchProjectsQuery => ({
  queryProjectsContentsWithTotal: {
    total: 1,
    items: [getGraphQLProject()],
  },
});

export const getSquidexProjectGraphqlResponse = (
  findProjectsContent = getGraphQLProject(),
): FetchProjectQuery => ({
  findProjectsContent,
});

export const getGraphQLProjectMilestone = (): GraphQLProjectMilestone => ({
  title: 'A project milestone',
  status: ProjectsDataMilestonesStatusEnum.Active,
  description: null,
  link: null,
});

export const getGraphQLProjectMember = (): GraphQLProjectMember => ({
  role: ProjectsDataMembersRoleEnum.ProjectManager,
  user: [
    {
      id: '11',
      created: '2021-01-01T00:00:00Z',
      lastModified: '2021-01-01T00:00:00Z',
      version: 1,
      flatData: {
        firstName: 'Tony',
        lastName: 'Stark',
        avatar: null,
      },
    },
  ],
});

export const getGraphQLProjectResource = (): GraphQLProjectResource => ({
  type: ProjectsDataResourcesTypeEnum.Note,
  title: 'Project resource title',
  description: 'Project resource description',
  externalLink: null,
});

export const getGraphQLProject = (): NonNullable<
  NonNullable<
    NonNullable<FetchProjectsQuery>['queryProjectsContentsWithTotal']
  >['items']
>[number] => ({
  id: '42',
  flatData: {
    title: 'A Project',
    startDate: '2020-07-06',
    endDate: '2021-12-28',
    status: ProjectsDataStatusEnum.Completed,
    projectProposal: 'http://a-proposal',
    members: [getGraphQLProjectMember()],
    description: 'test description',
    keywords: ['R'],
    pmEmail: 'tony@stark.com',
    leadEmail: 'peter@parker.com',
    milestones: [getGraphQLProjectMilestone()],
    resources: [getGraphQLProjectResource()],
  },
});
