import { gp2 } from '@asap-hub/model';
import { UserEvent } from '@asap-hub/server-common';
import {
  gp2 as gp2squidex,
  parseToSquidex,
  WebhookPayload,
} from '@asap-hub/squidex';
import {
  FetchProjectsMembersQuery,
  FetchUserQuery,
  FetchUsersQuery,
  FetchWorkingGroupsMembersQuery,
  ProjectsDataMembersRoleEnum,
  ProjectsDataStatusEnum,
  UsersDataDegreeEnum,
  UsersDataRegionEnum,
  UsersDataRoleEnum,
  WorkingGroupsDataMembersRoleEnum,
} from '../../src/autogenerated-gql/graphql';

export const getUserResponse = (): gp2.UserResponse => ({
  id: 'user-id-1',
  createdDate: '2020-09-23T20:45:22.000Z',
  displayName: 'Tony Stark',
  email: 'T@ark.io',
  firstName: 'Tony',
  lastName: 'Stark',
  region: 'Europe',
  degrees: ['MPH'],
  role: 'Trainee',
  city: 'Madrid',
  country: 'Spain',
  positions: [
    {
      role: 'CEO',
      department: 'Research',
      institution: 'Stark Industries',
    },
  ],
  onboarded: true,
  projects: [
    {
      id: 'test-project-id',
      members: [
        { role: 'Project co-lead', userId: 'user-id-0' },
        { role: 'Investigator', userId: 'user-id-1' },
      ],

      status: 'Active',
      title: 'Test Project',
    },
  ],
  workingGroups: [
    {
      id: 'test-working-group-id',
      members: [
        { userId: 'user-id-2', role: 'Lead' },
        { userId: 'user-id-3', role: 'Working group member' },
      ],
      title: 'Steering Committee',
    },
  ],
  fundingStreams: 'A funding stream',
  contributingCohorts: [],
  questions: [
    'What color was Iron Mans original armour?',
    'Who is the Stark family butler?',
  ],
  secondaryEmail: 'tony@stark.com',
  telephone: { countryCode: '+1', number: '212-970-4133' },
  biography: 'a biography of Tony Stark',
  keywords: ['R', 'Bash'],
});

export const fetchExpectation: gp2.ListUserResponse = {
  total: 2,
  items: [
    getUserResponse(),
    {
      id: 'user-id-2',
      createdDate: '2020-09-23T20:45:22.000Z',
      displayName: 'Tony Stark',
      email: 'T@ark.io',
      firstName: 'Tony',
      lastName: 'Stark',
      region: 'North America',
      degrees: ['MSc'],
      role: 'Network Investigator',
      country: 'Spain',
      positions: [
        {
          role: 'CEO',
          department: 'Research',
          institution: 'Stark Industries',
        },
      ],
      onboarded: true,
      projects: [],
      workingGroups: [],
      fundingStreams: undefined,
      contributingCohorts: [],
      keywords: [],
      questions: [],
    },
  ],
};
export const getUserWebhookPayload = (
  id: string,
  type: UserEvent,
): WebhookPayload<gp2squidex.User> => ({
  type,
  timestamp: '2021-02-15T13:11:25Z',
  payload: {
    $type: 'EnrichedContentEvent',
    type: 'Updated',
    id,
    created: '2020-07-31T15:52:33Z',
    lastModified: '2020-07-31T15:52:33Z',
    version: 42,
    data: {
      avatar: { iv: ['https://www.example.com/avatar.jpg'] },
      connections: { iv: [] },
      email: { iv: 'test@test.com' },
      firstName: { iv: 'Tony' },
      lastName: { iv: 'Stark' },
      region: { iv: 'Europe' },
      role: { iv: UsersDataRoleEnum.Trainee },
      onboarded: { iv: true },
      questions: { iv: [{ question: 'some question' }] },
    },
  },
});

export const patchResponse = (): gp2squidex.RestUser => ({
  id: 'userId',
  data: {
    role: { iv: UsersDataRoleEnum.Trainee },
    email: { iv: 'peter@parker.com' },
    firstName: { iv: 'Peter' },
    lastName: { iv: 'parker' },
    region: { iv: UsersDataRegionEnum.Europe },
    avatar: { iv: ['squidex-asset-id'] },
    connections: { iv: [] },
    degree: { iv: [UsersDataDegreeEnum.Mph] },
    onboarded: { iv: true },
    questions: { iv: [{ question: 'some question' }] },
  },
  created: '2020-09-25T09:42:51Z',
  lastModified: '2020-09-25T09:42:51Z',
  version: 42,
});

export const getUserDataObject = (): gp2.UserDataObject => ({
  id: 'user-id-1',
  createdDate: '2020-09-23T20:45:22.000Z',
  email: 'T@ark.io',
  firstName: 'Tony',
  lastName: 'Stark',
  region: 'Europe',
  degrees: ['MPH'],
  role: 'Trainee',
  country: 'Spain',
  city: 'Madrid',
  positions: [
    {
      role: 'CEO',
      department: 'Research',
      institution: 'Stark Industries',
    },
  ],
  onboarded: true,
  projects: [
    {
      id: 'test-project-id',
      members: [
        { role: 'Project co-lead', userId: 'user-id-0' },
        { role: 'Investigator', userId: 'user-id-1' },
      ],

      status: 'Active',
      title: 'Test Project',
    },
  ],
  workingGroups: [
    {
      id: 'test-working-group-id',
      members: [
        { userId: 'user-id-2', role: 'Lead' },
        { userId: 'user-id-3', role: 'Working group member' },
      ],
      title: 'Steering Committee',
    },
  ],
  keywords: ['R', 'Bash'],
  fundingStreams: 'A funding stream',
  biography: 'a biography of Tony Stark',
  contributingCohorts: [],
  secondaryEmail: 'tony@stark.com',
  telephone: { countryCode: '+1', number: '212-970-4133' },
  questions: [
    'What color was Iron Mans original armour?',
    'Who is the Stark family butler?',
  ],
});
export const getUserCreateDataObject = (): gp2.UserCreateDataObject => {
  const {
    id: _id,
    createdDate: _createdDate,
    ...userCreateDataObject
  } = getUserDataObject();

  return userCreateDataObject;
};

export const getUserInput = (): gp2squidex.InputUser['data'] => {
  const { degrees, region, telephone, questions, ...input } =
    getUserCreateDataObject();

  return {
    ...parseToSquidex(input),
    region: { iv: 'Europe' },
    degree: { iv: ['MPH'] },
    role: { iv: 'Trainee' },
    avatar: { iv: [] },
    connections: { iv: [] },
    telephoneCountryCode: { iv: telephone?.countryCode || '' },
    telephoneNumber: { iv: telephone?.number || '' },
    questions: { iv: questions.map((question) => ({ question })) },
  };
};

export const fetchUserResponse = () => patchResponse();
export const fetchUserResponseDataObject = (): gp2.UserDataObject => ({
  createdDate: '2020-09-25T09:42:51.000Z',
  email: 'peter@parker.com',
  firstName: 'Peter',
  id: 'userId',
  lastName: 'Parker',
  role: 'Trainee',
  region: 'Europe',
  country: 'Spain',
  positions: [
    {
      role: 'Photographer',
      department: 'Newsdesk',
      institution: 'Daily Bugle',
    },
  ],
  onboarded: true,
  projects: [
    {
      id: 'test-project-id',
      members: [
        { role: 'Project co-lead', userId: 'user-id-0' },
        { role: 'Investigator', userId: 'user-id-1' },
      ],

      status: 'Active',
      title: 'Test Project',
    },
  ],
  workingGroups: [
    {
      id: 'test-working-group-id',
      members: [
        { userId: 'user-id-2', role: 'Lead' },
        { userId: 'user-id-3', role: 'Working group member' },
      ],
      title: 'Steering Committee',
    },
  ],
  fundingStreams: undefined,
  contributingCohorts: [],
  secondaryEmail: 'tony@stark.com',
  telephone: { countryCode: '+1', number: '212-970-4133' },
  keywords: [],
  questions: ['What was the name of Peter Parkers uncle?'],
});
export const getGraphQLUser = (
  user: Partial<NonNullable<FetchUserQuery['findUsersContent']>> = {},
): NonNullable<FetchUserQuery['findUsersContent']> => ({
  id: 'user-id-1',
  lastModified: '2020-10-26T15:33:18Z',
  version: 42,
  created: '2020-09-23T20:45:22Z',
  ...user,
  flatData: {
    avatar: [],
    email: 'T@ark.io',
    firstName: 'Tony',
    lastName: 'Stark',
    region: UsersDataRegionEnum.Europe,
    degree: [UsersDataDegreeEnum.Mph],
    role: UsersDataRoleEnum.Trainee,
    country: 'Spain',
    positions: [
      {
        role: 'CEO',
        department: 'Research',
        institution: 'Stark Industries',
      },
    ],
    city: 'Madrid',
    onboarded: true,
    secondaryEmail: 'tony@stark.com',
    telephoneCountryCode: '+1',
    telephoneNumber: '212-970-4133',
    keywords: ['R', 'Bash'],
    fundingStreams: 'A funding stream',
    biography: 'a biography of Tony Stark',
    questions: [
      { question: 'What color was Iron Mans original armour?' },
      { question: 'Who is the Stark family butler?' },
    ],
    ...user?.flatData,
  },
  referencingProjectsContents: [
    {
      id: 'test-project-id',
      flatData: {
        members: [
          {
            role: ProjectsDataMembersRoleEnum.ProjectCoLead,
            user: [
              {
                id: 'user-id-0',
              },
            ],
          },
          {
            role: ProjectsDataMembersRoleEnum.Investigator,
            user: [
              {
                id: 'user-id-1',
              },
            ],
          },
        ],
        status: ProjectsDataStatusEnum.Active,
        title: 'Test Project',
      },
    },
  ],
  referencingWorkingGroupsContents: [
    {
      id: 'test-working-group-id',
      flatData: {
        members: [
          {
            role: WorkingGroupsDataMembersRoleEnum.Lead,
            user: [
              {
                id: 'user-id-2',
              },
            ],
          },
          {
            role: WorkingGroupsDataMembersRoleEnum.WorkingGroupMember,
            user: [
              {
                id: 'user-id-3',
              },
            ],
          },
        ],
        title: 'Steering Committee',
      },
    },
  ],
});

export const generateGraphqlFetchUsersResponse = (
  items: NonNullable<FetchUserQuery['findUsersContent']>[],
): FetchUsersQuery => ({
  queryUsersContentsWithTotal: {
    total: items.length,
    items,
  },
});
export const getSquidexUsersGraphqlResponse = (): FetchUsersQuery =>
  generateGraphqlFetchUsersResponse([getGraphQLUser()]);

export const getSquidexUserGraphqlResponse = (
  findUsersContent = getGraphQLUser(),
): FetchUserQuery => ({
  findUsersContent,
});
export const restUserMock = patchResponse;

export const userPatchRequest: gp2.UserPatchRequest = {
  onboarded: true,
  country: 'United Kingdom',
  city: 'Manchester',
};

export const generateGraphqlFetchProjectsMembersResponse = (
  items: NonNullable<FetchProjectsMembersQuery['queryProjectsContents']>,
): FetchProjectsMembersQuery => ({
  queryProjectsContents: items,
});

type ProjectMember = NonNullable<
  FetchProjectsMembersQuery['queryProjectsContents']
>[number];

export const getGraphQLProjectMembers = (
  members: Partial<ProjectMember['flatData']> = {},
): ProjectMember => ({
  flatData: {
    members: [{ user: [{ id: '42' }] }],
    ...members,
  },
});

export const getGraphQLProjectsMembers = (
  projects: NonNullable<FetchProjectsMembersQuery['queryProjectsContents']> = [
    getGraphQLProjectMembers(),
  ],
): NonNullable<FetchProjectsMembersQuery['queryProjectsContents']> => projects;

export const getSquidexProjectsMembersGraphqlResponse =
  (): FetchProjectsMembersQuery =>
    generateGraphqlFetchProjectsMembersResponse(getGraphQLProjectsMembers());

export const generateGraphqlFetchWorkingGroupsMembersResponse = (
  items: NonNullable<
    FetchWorkingGroupsMembersQuery['queryWorkingGroupsContents']
  >,
): FetchWorkingGroupsMembersQuery => ({
  queryWorkingGroupsContents: items,
});

type WorkingGroupMember = NonNullable<
  FetchWorkingGroupsMembersQuery['queryWorkingGroupsContents']
>[number];

export const getGraphQLWorkingGroupMembers = (
  members: Partial<WorkingGroupMember['flatData']> = {},
): WorkingGroupMember => ({
  flatData: {
    members: [{ user: [{ id: '42' }] }],
    ...members,
  },
});

export const getGraphQLWorkingGroupsMembers = (
  workingGroups: NonNullable<
    FetchWorkingGroupsMembersQuery['queryWorkingGroupsContents']
  > = [getGraphQLWorkingGroupMembers()],
): NonNullable<FetchWorkingGroupsMembersQuery['queryWorkingGroupsContents']> =>
  workingGroups;

export const getSquidexWorkingGroupsMembersGraphqlResponse =
  (): FetchWorkingGroupsMembersQuery =>
    generateGraphqlFetchWorkingGroupsMembersResponse(
      getGraphQLWorkingGroupsMembers(),
    );
