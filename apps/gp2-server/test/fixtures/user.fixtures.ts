import { gp2 } from '@asap-hub/model';
import { UserEvent } from '@asap-hub/server-common';
import { gp2 as SquidexGp2, WebhookPayload } from '@asap-hub/squidex';
import {
  FetchUserQuery,
  FetchUsersQuery,
  UsersDataDegreeEnum,
  UsersDataRegionEnum,
  UsersDataRoleEnum,
} from '../../src/autogenerated-gql/graphql';

export const getUserResponse = (): gp2.UserResponse => ({
  id: 'user-id-1',
  createdDate: '2020-09-23T20:45:22.000Z',
  displayName: 'Tony Stark',
  email: 'T@ark.io',
  firstName: 'Tony',
  lastName: 'Stark',
  region: 'Europe',
  degrees: ['MPH'],
  role: 'Trainee',
  city: 'Madrid',
  country: 'Spain',
  positions: [
    {
      role: 'CEO',
      department: 'Research',
      institution: 'Stark Industries',
    },
  ],
  onboarded: true,
});

export const fetchExpectation: gp2.ListUserResponse = {
  total: 2,
  items: [
    getUserResponse(),
    {
      id: 'user-id-2',
      createdDate: '2020-09-23T20:45:22.000Z',
      displayName: 'Tony Stark',
      email: 'T@ark.io',
      firstName: 'Tony',
      lastName: 'Stark',
      region: 'North America',
      degrees: ['MSc'],
      role: 'Network Investigator',
      country: 'Spain',
      positions: [
        {
          role: 'CEO',
          department: 'Research',
          institution: 'Stark Industries',
        },
      ],
      onboarded: true,
    },
  ],
};
export const getUserWebhookPayload = (
  id: string,
  type: UserEvent,
): WebhookPayload<SquidexGp2.User> => ({
  type,
  timestamp: '2021-02-15T13:11:25Z',
  payload: {
    $type: 'EnrichedContentEvent',
    type: 'Updated',
    id,
    created: '2020-07-31T15:52:33Z',
    lastModified: '2020-07-31T15:52:33Z',
    version: 42,
    data: {
      avatar: { iv: ['https://www.example.com/avatar.jpg'] },
      connections: { iv: [] },
      email: { iv: 'test@test.com' },
      firstName: { iv: 'Tony' },
      lastName: { iv: 'Stark' },
      role: { iv: UsersDataRoleEnum.Trainee },
    },
  },
});

export const patchResponse = (): SquidexGp2.InputUser => ({
  id: 'userId',
  data: {
    role: { iv: UsersDataRoleEnum.Trainee },
    email: { iv: 'peter@parker.com' },
    firstName: { iv: 'Peter' },
    lastName: { iv: 'parker' },
    region: { iv: UsersDataRegionEnum.Europe },
    avatar: { iv: ['squidex-asset-id'] },
    connections: { iv: [] },
    degree: { iv: [UsersDataDegreeEnum.Mph] },
  },
  created: '2020-09-25T09:42:51Z',
  lastModified: '2020-09-25T09:42:51Z',
  version: 42,
});

export const getUserDataObject = (): gp2.UserDataObject => ({
  id: 'user-id-1',
  createdDate: '2020-09-23T20:45:22.000Z',
  email: 'T@ark.io',
  firstName: 'Tony',
  lastName: 'Stark',
  region: 'Europe',
  degrees: ['MPH' as const],
  role: 'Trainee',
  country: 'Spain',
  city: 'Madrid',
  positions: [
    {
      role: 'CEO',
      department: 'Research',
      institution: 'Stark Industries',
    },
  ],
  onboarded: true,
});

export const fetchUserResponse = () => patchResponse();
export const fetchUserResponseDataObject = (): gp2.UserDataObject => ({
  createdDate: '2020-09-25T09:42:51.000Z',
  email: 'peter@parker.com',
  firstName: 'Peter',
  id: 'userId',
  lastName: 'Parker',
  role: 'Trainee',
  region: 'Europe',
  country: 'Spain',
  positions: [
    {
      role: 'Photographer',
      department: 'Newsdesk',
      institution: 'Daily Bugle',
    },
  ],
  onboarded: true,
});

export const getGraphQLUser = (
  user: Partial<NonNullable<FetchUserQuery['findUsersContent']>> = {},
): NonNullable<FetchUserQuery['findUsersContent']> => ({
  id: 'user-id-1',
  lastModified: '2020-10-26T15:33:18Z',
  version: 42,
  created: '2020-09-23T20:45:22Z',
  ...user,
  flatData: {
    avatar: [],
    email: 'T@ark.io',
    firstName: 'Tony',
    lastName: 'Stark',
    region: UsersDataRegionEnum.Europe,
    degree: [UsersDataDegreeEnum.Mph],
    role: UsersDataRoleEnum.Trainee,
    country: 'Spain',
    positions: [
      {
        role: 'CEO',
        department: 'Research',
        institution: 'Stark Industries',
      },
    ],
    city: 'Madrid',
    onboarded: true,
    ...user?.flatData,
  },
});

export const generateGraphqlFetchUsersResponse = (
  items: NonNullable<FetchUserQuery['findUsersContent']>[],
): FetchUsersQuery => ({
  queryUsersContentsWithTotal: {
    total: items.length,
    items,
  },
});
export const getSquidexUsersGraphqlResponse = (): FetchUsersQuery =>
  generateGraphqlFetchUsersResponse([getGraphQLUser()]);

export const getSquidexUserGraphqlResponse = (
  findUsersContent = getGraphQLUser(),
): FetchUserQuery => ({
  findUsersContent,
});
