import { UserDataObject, UserResponse } from '@asap-hub/model';
import { UserEvent } from '@asap-hub/server-common';
import { RestUser, User, WebhookPayload } from '@asap-hub/squidex';
import {
  FetchUserQuery,
  FetchUsersQuery,
} from '../../src/autogenerated-gql/graphql';
import { appName, baseUrl } from '../../src/config';

export const getUserResponse = (): UserResponse => ({
  id: 'user-id-1',
  biography: 'some bio',
  onboarded: true,
  dismissedGettingStarted: false,
  createdDate: '2020-09-23T20:45:22.000Z',
  questions: ['Question 1', 'Question 2'],
  expertiseAndResourceTags: [
    'expertise 1',
    'expertise 2',
    'expertise 3',
    'expertise 4',
    'expertise 5',
  ],
  displayName: 'Tom Hardy',
  institution: 'some institution',
  jobTitle: 'some job title',
  reachOut: 'some reach out',
  responsibilities: 'some responsibilities',
  researchInterests: 'some research interests',
  email: 'H@rdy.io',
  contactEmail: 'T@rdy.io',
  firstName: 'Tom',
  lastName: 'Hardy',
  country: 'United Kingdom',
  city: 'London',
  lastModifiedDate: '2020-09-23T20:45:22.000Z',
  orcidWorks: [
    {
      doi: 'test-doi',
      id: '123-456-789',
      lastModifiedDate: '2020-10-26T15:33:18Z',
      publicationDate: {},
      type: 'ANNOTATION',
      title: 'orcid work title',
    },
  ],
  orcid: '123-456-789',
  degree: 'MPH',
  social: {
    orcid: '123-456-789',
  },
  teams: [],
  role: 'Grantee',
  labs: [],
});

export const getUserWebhookPayload = (
  id: string,
  type: UserEvent,
): WebhookPayload<User> => ({
  type,
  timestamp: '2021-02-15T13:11:25Z',
  payload: {
    $type: 'EnrichedContentEvent',
    type: 'Updated',
    id,
    created: '2020-07-31T15:52:33Z',
    lastModified: '2020-07-31T15:52:33Z',
    version: 42,
    data: {
      onboarded: { iv: true },
      dismissedGettingStarted: { iv: false },
      jobTitle: { iv: 'some job title' },
      avatar: { iv: ['https://www.example.com/avatar.jpg'] },
      connections: { iv: [] },
      email: { iv: 'test@test.com' },
      firstName: { iv: 'Tom' },
      lastName: { iv: 'Hardy' },
      questions: { iv: [] },
      role: { iv: 'Grantee' },
      teams: { iv: [] },
      labs: { iv: [] },
    },
  },
});

export const patchResponse = (): RestUser => ({
  id: 'userId',
  data: {
    onboarded: { iv: true },
    dismissedGettingStarted: { iv: false },
    reachOut: { iv: 'some reach out' },
    responsibilities: { iv: 'some responsibilities' },
    expertiseAndResourceDescription: { iv: 'some expertiseAndResourceTags' },
    role: { iv: 'Grantee' },
    lastModifiedDate: { iv: '2020-09-25T09:42:51.132Z' },
    email: { iv: 'cristiano@ronaldo.com' },
    firstName: { iv: 'Cristiano' },
    lastName: { iv: 'Ronaldo' },
    jobTitle: { iv: 'Junior' },
    orcid: { iv: '363-98-9330' },
    institution: { iv: 'Dollar General Corporation' },
    country: { iv: 'United Kingdom' },
    city: { iv: 'Brighton' },
    avatar: { iv: ['squidex-asset-id'] },
    expertiseAndResourceTags: { iv: [] },
    orcidWorks: { iv: [] },
    teams: {
      iv: [],
    },
    connections: { iv: [] },
    questions: { iv: [] },
    labs: { iv: [] },
  },
  created: '2020-09-25T09:42:51Z',
  lastModified: '2020-09-25T09:42:51Z',
  version: 42,
});
export const restUserMock = patchResponse;

export const getUserDataObject = (): UserDataObject => ({
  id: 'user-id-1',
  biography: 'some bio',
  onboarded: true,
  dismissedGettingStarted: false,
  createdDate: '2020-09-23T20:45:22.000Z',
  questions: ['Question 1', 'Question 2'],
  expertiseAndResourceTags: [
    'expertise 1',
    'expertise 2',
    'expertise 3',
    'expertise 4',
    'expertise 5',
  ],
  institution: 'some institution',
  jobTitle: 'some job title',
  reachOut: 'some reach out',
  responsibilities: 'some responsibilities',
  researchInterests: 'some research interests',
  email: 'H@rdy.io',
  contactEmail: 'T@rdy.io',
  firstName: 'Tom',
  lastName: 'Hardy',
  country: 'United Kingdom',
  city: 'London',
  lastModifiedDate: '2020-09-23T20:45:22.000Z',
  orcidWorks: [
    {
      doi: 'test-doi',
      id: '123-456-789',
      lastModifiedDate: '2020-10-26T15:33:18Z',
      publicationDate: {},
      type: 'ANNOTATION',
      title: 'orcid work title',
    },
  ],
  orcid: '123-456-789',
  degree: 'MPH',
  social: {
    orcid: '123-456-789',
  },
  teams: [],
  role: 'Grantee',
  labs: [],
});

export const fetchUserResponse = () => patchResponse();
export const fetchUserResponseDataObject = (): UserDataObject => ({
  avatarUrl: `${baseUrl}/api/assets/${appName}/squidex-asset-id`,
  createdDate: '2020-09-25T09:42:51.000Z',
  email: 'cristiano@ronaldo.com',
  expertiseAndResourceDescription: 'some expertiseAndResourceTags',
  expertiseAndResourceTags: [],
  firstName: 'Cristiano',
  id: 'userId',
  institution: 'Dollar General Corporation',
  jobTitle: 'Junior',
  labs: [],
  lastModifiedDate: '2020-09-25T09:42:51.132Z',
  lastName: 'Ronaldo',
  onboarded: true,
  dismissedGettingStarted: false,
  orcid: '363-98-9330',
  orcidWorks: [],
  questions: [],
  reachOut: 'some reach out',
  responsibilities: 'some responsibilities',
  role: 'Grantee',
  social: {
    orcid: '363-98-9330',
  },
  teams: [],
  connections: [],
});

export const getGraphQLUser = (
  user: Partial<NonNullable<FetchUserQuery['findUsersContent']>> = {},
): NonNullable<FetchUserQuery['findUsersContent']> => ({
  id: 'user-id-1',
  lastModified: '2020-10-26T15:33:18Z',
  version: 42,
  created: '2020-09-23T20:45:22Z',
  ...user,
  flatData: {
    biography: 'some bio',
    institution: 'some institution',
    jobTitle: 'some job title',
    onboarded: true,
    dismissedGettingStarted: false,
    orcidLastModifiedDate: null,
    orcidLastSyncDate: null,
    reachOut: 'some reach out',
    responsibilities: 'some responsibilities',
    researchInterests: 'some research interests',
    avatar: [],
    email: 'H@rdy.io',
    contactEmail: 'T@rdy.io',
    firstName: 'Tom',
    lastName: 'Hardy',
    country: 'United Kingdom',
    city: 'London',
    lastModifiedDate: '',
    questions: [{ question: 'Question 1' }, { question: 'Question 2' }],
    expertiseAndResourceDescription: null,
    orcid: '123-456-789',
    social: null,
    degree: 'MPH',
    role: 'Grantee',
    ...user?.flatData,
    expertiseAndResourceTags: user?.flatData?.expertiseAndResourceTags || [
      'expertise 1',
      'expertise 2',
      'expertise 3',
      'expertise 4',
      'expertise 5',
    ],
    orcidWorks: user?.flatData?.orcidWorks || [
      {
        id: '123-456-789',
        doi: 'test-doi',
        type: 'ANNOTATION',
        lastModifiedDate: '2020-10-26T15:33:18Z',
        publicationDate: {},
        title: 'orcid work title',
      },
    ],
  },
});

export const generateGraphqlFetchUsersResponse = (
  items: NonNullable<FetchUserQuery['findUsersContent']>[],
): FetchUsersQuery => ({
  queryUsersContentsWithTotal: {
    total: items.length,
    items,
  },
});
export const getSquidexUsersGraphqlResponse = (): FetchUsersQuery =>
  generateGraphqlFetchUsersResponse([getGraphQLUser()]);

export const getSquidexUserGraphqlResponse = (
  findUsersContent = getGraphQLUser(),
): FetchUserQuery => ({
  findUsersContent,
});
