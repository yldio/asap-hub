import { SquidexGraphqlClient } from '@asap-hub/squidex';
import { GraphQLFileLoader } from '@graphql-tools/graphql-file-loader';
import { loadSchemaSync } from '@graphql-tools/load';
import { addMocksToSchema, createMockStore } from '@graphql-tools/mock';
import {
  ASTNode,
  DocumentNode,
  ExecutionResult,
  graphql,
  print,
} from 'graphql';
import { getSquidexGraphqlCalendar } from '../fixtures/calendar.fixtures';
import { getGraphQLContributingCohort } from '../fixtures/contributing-cohort.fixtures';
import { getSquidexGraphqlEvent } from '../fixtures/event.fixtures';
import { getGraphQLNews } from '../fixtures/news.fixtures';
import { getSquidexGraphqlOutput } from '../fixtures/output.fixtures';
import { getGraphQLProject } from '../fixtures/project.fixtures';
import { getGraphQLUser } from '../fixtures/user.fixtures';
import { getGraphQLWorkingGroupNetwork } from '../fixtures/working-group-network.fixtures';
import { getGraphQLWorkingGroup } from '../fixtures/working-group.fixtures';

export const getSquidexGraphqlClientMockServer = (): SquidexGraphqlClient => {
  const schema = loadSchemaSync(
    '../../src/schema/autogenerated-schema.graphql',
    {
      cwd: __dirname,
      loaders: [new GraphQLFileLoader()],
    },
  );
  const resultDto = () => ({
    items: [...new Array(1)],
    total: 1,
  });
  const mocks = {
    Int: () => 8,
    Instant: () => '2021-10-12T15:42:05Z',
    JsonScalar: () => {},
    NewsAndEvents: () => getGraphQLNews(),
    NewsAndEventsResultDto: resultDto,
    ContributingCohorts: () => getGraphQLContributingCohort(),
    ContributingCohortsResultDto: resultDto,
    Projects: () => getGraphQLProject(),
    ProjectsResultDto: resultDto,
    Calendars: () => getSquidexGraphqlCalendar(),
    CalendarsResultDto: resultDto,
    Events: () => getSquidexGraphqlEvent(),
    EventsResultDto: resultDto,
    Users: () => getGraphQLUser(),
    UsersResultDto: resultDto,
    WorkingGroupNetwork: () => getGraphQLWorkingGroupNetwork(),
    WorkingGroupNetworkResultDto: resultDto,
    WorkingGroups: () => getGraphQLWorkingGroup(),
    WorkingGroupsResultDto: resultDto,
    Outputs: () => getSquidexGraphqlOutput(),
    OutputsResultDto: resultDto,
    // ExternalAuthors: () => getGraphQLExternalAuthor(),
    // ExternalAuthorsDto: () => resultDto,
  };
  const store = createMockStore({
    schema,
    mocks,
  });
  const schemaWithMocks = addMocksToSchema({
    schema,
    store,
  });

  return {
    request: async <
      T extends { [key: string]: any } = { [key: string]: any },
      V extends { [key: string]: any } = { [key: string]: any },
    >(
      query: string | DocumentNode,
      variables?: V,
    ): Promise<T> => {
      const result = (await graphql(
        schemaWithMocks,
        print(query as ASTNode),
        undefined,
        undefined,
        variables,
      )) as ExecutionResult<T>;

      if (Array.isArray(result.errors) && result.errors.length > 0) {
        throw new Error(JSON.stringify(result.errors));
      }

      return result.data as T;
    },
  };
};
