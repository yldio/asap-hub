variables:
  INTEGRATION_DOCKER_IMAGE: $ECR_REGISTRY/$ECR_PROJECT/node-python-sq:24fd3be959653a9b5ff966e104e74396bcb0e8c1@sha256:5426a5b0f9eceb566f14a1e916979648cf4c80087a77dc34f020d346125bca76
  SQUIDEX_BASE_DOCKER_IMAGE: $ECR_REGISTRY/s$ECR_PROJECT/squidex-utils:24fd3be959653a9b5ff966e104e74396bcb0e8c1@sha256:33738ffb44bf423a7733276fde543a44bfcc4d9f1f04c567ab21f4feb943b72d

test:integration:
  image: $INTEGRATION_DOCKER_IMAGE
  before_script:
    - export BASE_APP_NAME=${CI_EXTERNAL_PULL_REQUEST_IID:-$CI_COMMIT_BRANCH}
    - export SQUIDEX_APP_NAME=$BASE_APP_NAME-$CI_JOB_ID
    - export SQUIDEX_CLIENT_ID=$SQUIDEX_TEST_CLIENT_ID
    - export SQUIDEX_CLIENT_SECRET=$SQUIDEX_TEST_CLIENT_SECRET
    - python ci/integration/scripts/create-app.py
  script:
    - echo "Running Integration tests against $SQUIDEX_APP_NAME"
    # Prevent failing tests from exiting the job
    - yarn test:integration || test_exit_code=$?
    - echo "Deleting $SQUIDEX_APP_NAME"
    - python ci/integration/scripts/delete-app.py
    # If tests fail return exit code now
    - exit $test_exit_code
  stage: test
  needs: []

.tmpl:sync: &tmpl_sync
  image: $SQUIDEX_BASE_DOCKER_IMAGE
  before_script:
    - ./ci/config-squidex-rules.sh
  script:
    - sq config add $SQUIDEX_APP_NAME $SQUIDEX_CLIENT_ID $SQUIDEX_CLIENT_SECRET -u $SQUIDEX_BASE_URL
    - sq config use $SQUIDEX_APP_NAME
    - sq sync in packages/squidex/schema -t schemas -t rules --delete
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'

sync:squidex:dev:
  <<: *tmpl_sync
  stage: deploy-dev

sync:squidex:production:
  <<: *tmpl_sync
  stage: prepare-prod
  environment:
    name: production
