/* eslint-disable no-console */

import { Environment, Asset as ContentfulAsset } from 'contentful-management';
import { Asset } from '../autogenerated-gql/graphql';

const checkIfAssetAlreadyExistsInContentful = async (
  contentfulEnvironment: Environment,
  id: string,
) => {
  try {
    const asset = await contentfulEnvironment.getAsset(id);
    return !!asset;
  } catch (error) {
    if (error instanceof Error) {
      const errorParsed = JSON.parse(error?.message);
      if (errorParsed.status === 404) {
        return false;
      }
    }

    throw error;
  }
};

export const migrateAsset = async (
  contentfulEnvironment: Environment,
  thumbnail: Pick<
    Asset,
    'id' | 'fileName' | 'thumbnailUrl' | 'mimeType' | 'fileType'
  >[],
) => {
  if (thumbnail.length) {
    const assets = await Promise.all(
      thumbnail.map(
        async ({ id, fileName, thumbnailUrl, mimeType, fileType }) => {
          const isAssetAlreadyInContentful =
            await checkIfAssetAlreadyExistsInContentful(
              contentfulEnvironment,
              id,
            );

          if (!isAssetAlreadyInContentful && thumbnailUrl) {
            console.log(`Creating asset with id ${id}.`);

            return contentfulEnvironment.createAssetWithId(id, {
              fields: {
                title: {
                  'en-US': fileName.replace(`.${fileType}`, ''),
                },
                file: {
                  'en-US': {
                    contentType: mimeType,
                    fileName,
                    upload: thumbnailUrl,
                  },
                },
              },
            });
          }

          return null;
        },
      ),
    );

    await Promise.all(
      assets
        .filter((asset): asset is ContentfulAsset => asset !== null)
        .map(async (asset) => {
          const processedAsset = await asset.processForAllLocales();
          processedAsset.publish();
        }),
    );
  }
};
