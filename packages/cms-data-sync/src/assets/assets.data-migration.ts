/* eslint-disable no-console */
/* eslint-disable no-restricted-syntax */

import { Environment, Asset as ContentfulAsset } from 'contentful-management';
import { Asset } from '../autogenerated-gql/graphql';

const checkIfAssetAlreadyExistsInContentful = async (
  contentfulEnvironment: Environment,
  id: string,
) => {
  try {
    const asset = await contentfulEnvironment.getAsset(id);
    return !!asset;
  } catch (error) {
    if (error instanceof Error) {
      const errorParsed = JSON.parse(error?.message);
      if (errorParsed.status === 404) {
        return false;
      }
    }

    throw error;
  }
};

export const migrateAsset = async (
  contentfulEnvironment: Environment,
  thumbnail: Pick<
    Asset,
    'id' | 'fileName' | 'thumbnailUrl' | 'mimeType' | 'fileType'
  >[],
) => {
  if (thumbnail.length) {
    const assetPromises: Promise<ContentfulAsset>[] = [];

    for await (const thumb of thumbnail) {
      const { id, fileName, thumbnailUrl, mimeType, fileType } = thumb;
      const isAssetAlreadyInContentful =
        await checkIfAssetAlreadyExistsInContentful(contentfulEnvironment, id);

      if (!isAssetAlreadyInContentful && thumbnailUrl) {
        console.log(`Creating asset with id ${id}.`);

        assetPromises.push(
          contentfulEnvironment.createAssetWithId(id, {
            fields: {
              title: {
                'en-US': fileName.replace(`.${fileType}`, ''),
              },
              file: {
                'en-US': {
                  contentType: mimeType,
                  fileName,
                  upload: thumbnailUrl,
                },
              },
            },
          }),
        );
      }
    }

    const assets = await Promise.all(assetPromises);

    const createdAssetsPromises: Promise<ContentfulAsset>[] = [];
    assets.forEach((asset) =>
      createdAssetsPromises.push(asset.processForAllLocales()),
    );
    const processedAssets = await Promise.all(createdAssetsPromises);

    const processedAssetsPromises: Promise<ContentfulAsset>[] = [];
    processedAssets.forEach((asset) =>
      processedAssetsPromises.push(asset.publish()),
    );
    await Promise.all(processedAssetsPromises);
  }
};
