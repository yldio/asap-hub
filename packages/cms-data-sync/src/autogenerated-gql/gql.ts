/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
  '\n  query FetchCalendars {\n    queryCalendarsContents(top: 100) {\n      id\n      status\n      flatData {\n        googleCalendarId\n        name\n        color\n      }\n    }\n  }\n':
    types.FetchCalendarsDocument,
  '\n  query FetchDiscover {\n    queryDiscoverContents {\n      id\n      status\n      flatData {\n        aboutUs\n        training {\n          id\n        }\n        pages {\n          id\n        }\n        members {\n          id\n        }\n        membersTeam {\n          id\n        }\n        scientificAdvisoryBoard {\n          id\n        }\n      }\n    }\n  }\n':
    types.FetchDiscoverDocument,
  '\n  query FetchEvents($take: Int, $skip: Int) {\n    queryEventsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        status\n        lastModified\n        flatData {\n          googleId\n          description\n          endDate\n          endDateTimeZone\n          startDate\n          startDateTimeZone\n          meetingLink\n          hideMeetingLink\n          eventLink\n          status\n          hidden\n          tags\n          title\n          notesPermanentlyUnavailable\n          notes\n          notesUpdatedAt\n          videoRecordingPermanentlyUnavailable\n          videoRecording\n          videoRecordingUpdatedAt\n          presentationPermanentlyUnavailable\n          presentation\n          presentationUpdatedAt\n          meetingMaterialsPermanentlyUnavailable\n          meetingMaterials {\n            url\n            title\n          }\n          calendar {\n            id\n          }\n          thumbnail {\n            id\n            fileName\n            thumbnailUrl\n            mimeType\n            fileType\n          }\n          speakers {\n            team {\n              id\n            }\n            user {\n              __typename\n              ... on Users {\n                id\n              }\n              ... on ExternalAuthors {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchEventsDocument,
  '\n  query FetchExternalAuthors($take: Int, $skip: Int) {\n    queryExternalAuthorsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        status\n        flatData {\n          name\n          orcid\n        }\n      }\n    }\n  }\n':
    types.FetchExternalAuthorsDocument,
  '\n  query FetchGroups($take: Int, $skip: Int) {\n    queryGroupsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        version\n        status\n        flatData {\n          name\n          active\n          tags\n          description\n          thumbnail {\n            id\n            fileName\n            mimeType\n            fileType\n          }\n          tools {\n            slack\n            googleDrive\n          }\n          calendars {\n            id\n          }\n          teams {\n            id\n          }\n          leaders {\n            user {\n              id\n            }\n            role\n            inactiveSinceDate\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchGroupsDocument,
  '\n  query FetchLabs($take: Int, $skip: Int) {\n    queryLabsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        version\n        status\n        flatData {\n          name\n        }\n      }\n    }\n  }\n':
    types.FetchLabsDocument,
  '\n  query FetchNews {\n    queryNewsAndEventsContents(top: 100) {\n      id\n      created\n      status\n      flatData {\n        title\n        shortText\n        text\n        thumbnail {\n          id\n          fileName\n          thumbnailUrl\n          mimeType\n          fileType\n        }\n        frequency\n        link\n        linkText\n      }\n    }\n  }\n':
    types.FetchNewsDocument,
  '\n  query FetchPages {\n    queryPagesContents(top: 100) {\n      id\n      status\n      flatData {\n        title\n        path\n        shortText\n        text\n        link\n        linkText\n      }\n    }\n  }\n':
    types.FetchPagesDocument,
  '\n  query FetchResearchOutputs($take: Int, $skip: Int) {\n    queryResearchOutputsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        status\n        flatData {\n          title\n          documentType\n          type\n          description\n          descriptionMD\n          addedDate\n          lastUpdatedPartial\n          link\n          asapFunded\n          sharingStatus\n          usedInAPublication\n          publishDate\n          rrid\n          accession\n          doi\n          labCatalogNumber\n          adminNotes\n          usageNotes\n          authors {\n            ... on Users {\n              id\n              status\n            }\n            ... on ExternalAuthors {\n              id\n              status\n            }\n          }\n          relatedResearch {\n            id\n            status\n          }\n          relatedEvents {\n            id\n            status\n          }\n          labs {\n            id\n            status\n          }\n          workingGroups {\n            id\n            status\n          }\n          teams {\n            id\n            status\n          }\n          methods {\n            id\n            status\n          }\n          organisms {\n            id\n            status\n          }\n          environments {\n            id\n            status\n          }\n          subtype {\n            id\n            status\n          }\n          keywords {\n            id\n            status\n          }\n          statusChangedBy {\n            id\n          }\n          isInReview\n          statusChangedAt\n        }\n      }\n    }\n  }\n':
    types.FetchResearchOutputsDocument,
  '\n  query FetchResearchTags($take: Int, $skip: Int) {\n    queryResearchTagsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        status\n        flatData {\n          name\n          category\n          types\n          entities\n        }\n      }\n    }\n  }\n':
    types.FetchResearchTagsDocument,
  '\n  query FetchTeams {\n    queryTeamsContents(top: 100) {\n      id\n      created\n      lastModified\n      version\n      status\n      flatData {\n        applicationNumber\n        displayName\n        inactiveSince\n        projectSummary\n        projectTitle\n        expertiseAndResourceTags\n        tools {\n          description\n          name\n          url\n        }\n        proposal {\n          id\n        }\n      }\n    }\n  }\n':
    types.FetchTeamsDocument,
  '\n  query FetchTutorials($take: Int, $skip: Int) {\n    queryTutorialsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        status\n        flatData {\n          title\n          shortText\n          text\n          thumbnail {\n            id\n            fileName\n            mimeType\n            fileType\n          }\n          link\n          linkText\n        }\n      }\n    }\n  }\n':
    types.FetchTutorialsDocument,
  '\n  query FetchUsers($take: Int, $skip: Int) {\n    queryUsersContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        version\n        status\n        flatData {\n          alumniSinceDate\n          alumniLocation\n          avatar {\n            id\n            fileName\n            mimeType\n            fileType\n          }\n          biography\n          connections {\n            code\n          }\n          degree\n          email\n          contactEmail\n          dismissedGettingStarted\n          firstName\n          institution\n          jobTitle\n          lastName\n          country\n          city\n          onboarded\n          orcid\n          orcidLastModifiedDate\n          orcidLastSyncDate\n          orcidWorks {\n            doi\n            id\n            lastModifiedDate\n            publicationDate\n            title\n            type\n          }\n          questions {\n            question\n          }\n          expertiseAndResourceTags\n          expertiseAndResourceDescription\n          teams {\n            inactiveSinceDate\n            role\n            id {\n              id\n              flatData {\n                displayName\n                inactiveSince\n                proposal {\n                  id\n                }\n              }\n            }\n          }\n\n          social {\n            github\n            googleScholar\n            linkedIn\n            researcherId\n            researchGate\n            twitter\n            website1\n            website2\n          }\n          role\n          responsibilities\n          researchInterests\n          reachOut\n          labs {\n            id\n            flatData {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchUsersDocument,
  '\n  query FetchWorkingGroups($take: Int, $skip: Int) {\n    queryWorkingGroupsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        status\n        lastModified\n        flatData {\n          title\n          description\n          externalLink\n          shortText\n          complete\n          deliverables {\n            status\n            description\n          }\n          leaders {\n            workstreamRole\n            role\n            inactiveSinceDate\n            user {\n              id\n            }\n          }\n          members {\n            inactiveSinceDate\n            user {\n              id\n            }\n          }\n          calendars {\n            id\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchWorkingGroupsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchCalendars {\n    queryCalendarsContents(top: 100) {\n      id\n      status\n      flatData {\n        googleCalendarId\n        name\n        color\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchCalendars {\n    queryCalendarsContents(top: 100) {\n      id\n      status\n      flatData {\n        googleCalendarId\n        name\n        color\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchDiscover {\n    queryDiscoverContents {\n      id\n      status\n      flatData {\n        aboutUs\n        training {\n          id\n        }\n        pages {\n          id\n        }\n        members {\n          id\n        }\n        membersTeam {\n          id\n        }\n        scientificAdvisoryBoard {\n          id\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchDiscover {\n    queryDiscoverContents {\n      id\n      status\n      flatData {\n        aboutUs\n        training {\n          id\n        }\n        pages {\n          id\n        }\n        members {\n          id\n        }\n        membersTeam {\n          id\n        }\n        scientificAdvisoryBoard {\n          id\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchEvents($take: Int, $skip: Int) {\n    queryEventsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        status\n        lastModified\n        flatData {\n          googleId\n          description\n          endDate\n          endDateTimeZone\n          startDate\n          startDateTimeZone\n          meetingLink\n          hideMeetingLink\n          eventLink\n          status\n          hidden\n          tags\n          title\n          notesPermanentlyUnavailable\n          notes\n          notesUpdatedAt\n          videoRecordingPermanentlyUnavailable\n          videoRecording\n          videoRecordingUpdatedAt\n          presentationPermanentlyUnavailable\n          presentation\n          presentationUpdatedAt\n          meetingMaterialsPermanentlyUnavailable\n          meetingMaterials {\n            url\n            title\n          }\n          calendar {\n            id\n          }\n          thumbnail {\n            id\n            fileName\n            thumbnailUrl\n            mimeType\n            fileType\n          }\n          speakers {\n            team {\n              id\n            }\n            user {\n              __typename\n              ... on Users {\n                id\n              }\n              ... on ExternalAuthors {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchEvents($take: Int, $skip: Int) {\n    queryEventsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        status\n        lastModified\n        flatData {\n          googleId\n          description\n          endDate\n          endDateTimeZone\n          startDate\n          startDateTimeZone\n          meetingLink\n          hideMeetingLink\n          eventLink\n          status\n          hidden\n          tags\n          title\n          notesPermanentlyUnavailable\n          notes\n          notesUpdatedAt\n          videoRecordingPermanentlyUnavailable\n          videoRecording\n          videoRecordingUpdatedAt\n          presentationPermanentlyUnavailable\n          presentation\n          presentationUpdatedAt\n          meetingMaterialsPermanentlyUnavailable\n          meetingMaterials {\n            url\n            title\n          }\n          calendar {\n            id\n          }\n          thumbnail {\n            id\n            fileName\n            thumbnailUrl\n            mimeType\n            fileType\n          }\n          speakers {\n            team {\n              id\n            }\n            user {\n              __typename\n              ... on Users {\n                id\n              }\n              ... on ExternalAuthors {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchExternalAuthors($take: Int, $skip: Int) {\n    queryExternalAuthorsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        status\n        flatData {\n          name\n          orcid\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchExternalAuthors($take: Int, $skip: Int) {\n    queryExternalAuthorsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        status\n        flatData {\n          name\n          orcid\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchGroups($take: Int, $skip: Int) {\n    queryGroupsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        version\n        status\n        flatData {\n          name\n          active\n          tags\n          description\n          thumbnail {\n            id\n            fileName\n            mimeType\n            fileType\n          }\n          tools {\n            slack\n            googleDrive\n          }\n          calendars {\n            id\n          }\n          teams {\n            id\n          }\n          leaders {\n            user {\n              id\n            }\n            role\n            inactiveSinceDate\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchGroups($take: Int, $skip: Int) {\n    queryGroupsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        version\n        status\n        flatData {\n          name\n          active\n          tags\n          description\n          thumbnail {\n            id\n            fileName\n            mimeType\n            fileType\n          }\n          tools {\n            slack\n            googleDrive\n          }\n          calendars {\n            id\n          }\n          teams {\n            id\n          }\n          leaders {\n            user {\n              id\n            }\n            role\n            inactiveSinceDate\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchLabs($take: Int, $skip: Int) {\n    queryLabsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        version\n        status\n        flatData {\n          name\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchLabs($take: Int, $skip: Int) {\n    queryLabsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        version\n        status\n        flatData {\n          name\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchNews {\n    queryNewsAndEventsContents(top: 100) {\n      id\n      created\n      status\n      flatData {\n        title\n        shortText\n        text\n        thumbnail {\n          id\n          fileName\n          thumbnailUrl\n          mimeType\n          fileType\n        }\n        frequency\n        link\n        linkText\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchNews {\n    queryNewsAndEventsContents(top: 100) {\n      id\n      created\n      status\n      flatData {\n        title\n        shortText\n        text\n        thumbnail {\n          id\n          fileName\n          thumbnailUrl\n          mimeType\n          fileType\n        }\n        frequency\n        link\n        linkText\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchPages {\n    queryPagesContents(top: 100) {\n      id\n      status\n      flatData {\n        title\n        path\n        shortText\n        text\n        link\n        linkText\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchPages {\n    queryPagesContents(top: 100) {\n      id\n      status\n      flatData {\n        title\n        path\n        shortText\n        text\n        link\n        linkText\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchResearchOutputs($take: Int, $skip: Int) {\n    queryResearchOutputsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        status\n        flatData {\n          title\n          documentType\n          type\n          description\n          descriptionMD\n          addedDate\n          lastUpdatedPartial\n          link\n          asapFunded\n          sharingStatus\n          usedInAPublication\n          publishDate\n          rrid\n          accession\n          doi\n          labCatalogNumber\n          adminNotes\n          usageNotes\n          authors {\n            ... on Users {\n              id\n              status\n            }\n            ... on ExternalAuthors {\n              id\n              status\n            }\n          }\n          relatedResearch {\n            id\n            status\n          }\n          relatedEvents {\n            id\n            status\n          }\n          labs {\n            id\n            status\n          }\n          workingGroups {\n            id\n            status\n          }\n          teams {\n            id\n            status\n          }\n          methods {\n            id\n            status\n          }\n          organisms {\n            id\n            status\n          }\n          environments {\n            id\n            status\n          }\n          subtype {\n            id\n            status\n          }\n          keywords {\n            id\n            status\n          }\n          statusChangedBy {\n            id\n          }\n          isInReview\n          statusChangedAt\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchResearchOutputs($take: Int, $skip: Int) {\n    queryResearchOutputsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        status\n        flatData {\n          title\n          documentType\n          type\n          description\n          descriptionMD\n          addedDate\n          lastUpdatedPartial\n          link\n          asapFunded\n          sharingStatus\n          usedInAPublication\n          publishDate\n          rrid\n          accession\n          doi\n          labCatalogNumber\n          adminNotes\n          usageNotes\n          authors {\n            ... on Users {\n              id\n              status\n            }\n            ... on ExternalAuthors {\n              id\n              status\n            }\n          }\n          relatedResearch {\n            id\n            status\n          }\n          relatedEvents {\n            id\n            status\n          }\n          labs {\n            id\n            status\n          }\n          workingGroups {\n            id\n            status\n          }\n          teams {\n            id\n            status\n          }\n          methods {\n            id\n            status\n          }\n          organisms {\n            id\n            status\n          }\n          environments {\n            id\n            status\n          }\n          subtype {\n            id\n            status\n          }\n          keywords {\n            id\n            status\n          }\n          statusChangedBy {\n            id\n          }\n          isInReview\n          statusChangedAt\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchResearchTags($take: Int, $skip: Int) {\n    queryResearchTagsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        status\n        flatData {\n          name\n          category\n          types\n          entities\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchResearchTags($take: Int, $skip: Int) {\n    queryResearchTagsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        status\n        flatData {\n          name\n          category\n          types\n          entities\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchTeams {\n    queryTeamsContents(top: 100) {\n      id\n      created\n      lastModified\n      version\n      status\n      flatData {\n        applicationNumber\n        displayName\n        inactiveSince\n        projectSummary\n        projectTitle\n        expertiseAndResourceTags\n        tools {\n          description\n          name\n          url\n        }\n        proposal {\n          id\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchTeams {\n    queryTeamsContents(top: 100) {\n      id\n      created\n      lastModified\n      version\n      status\n      flatData {\n        applicationNumber\n        displayName\n        inactiveSince\n        projectSummary\n        projectTitle\n        expertiseAndResourceTags\n        tools {\n          description\n          name\n          url\n        }\n        proposal {\n          id\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchTutorials($take: Int, $skip: Int) {\n    queryTutorialsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        status\n        flatData {\n          title\n          shortText\n          text\n          thumbnail {\n            id\n            fileName\n            mimeType\n            fileType\n          }\n          link\n          linkText\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchTutorials($take: Int, $skip: Int) {\n    queryTutorialsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        status\n        flatData {\n          title\n          shortText\n          text\n          thumbnail {\n            id\n            fileName\n            mimeType\n            fileType\n          }\n          link\n          linkText\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchUsers($take: Int, $skip: Int) {\n    queryUsersContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        version\n        status\n        flatData {\n          alumniSinceDate\n          alumniLocation\n          avatar {\n            id\n            fileName\n            mimeType\n            fileType\n          }\n          biography\n          connections {\n            code\n          }\n          degree\n          email\n          contactEmail\n          dismissedGettingStarted\n          firstName\n          institution\n          jobTitle\n          lastName\n          country\n          city\n          onboarded\n          orcid\n          orcidLastModifiedDate\n          orcidLastSyncDate\n          orcidWorks {\n            doi\n            id\n            lastModifiedDate\n            publicationDate\n            title\n            type\n          }\n          questions {\n            question\n          }\n          expertiseAndResourceTags\n          expertiseAndResourceDescription\n          teams {\n            inactiveSinceDate\n            role\n            id {\n              id\n              flatData {\n                displayName\n                inactiveSince\n                proposal {\n                  id\n                }\n              }\n            }\n          }\n\n          social {\n            github\n            googleScholar\n            linkedIn\n            researcherId\n            researchGate\n            twitter\n            website1\n            website2\n          }\n          role\n          responsibilities\n          researchInterests\n          reachOut\n          labs {\n            id\n            flatData {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchUsers($take: Int, $skip: Int) {\n    queryUsersContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        version\n        status\n        flatData {\n          alumniSinceDate\n          alumniLocation\n          avatar {\n            id\n            fileName\n            mimeType\n            fileType\n          }\n          biography\n          connections {\n            code\n          }\n          degree\n          email\n          contactEmail\n          dismissedGettingStarted\n          firstName\n          institution\n          jobTitle\n          lastName\n          country\n          city\n          onboarded\n          orcid\n          orcidLastModifiedDate\n          orcidLastSyncDate\n          orcidWorks {\n            doi\n            id\n            lastModifiedDate\n            publicationDate\n            title\n            type\n          }\n          questions {\n            question\n          }\n          expertiseAndResourceTags\n          expertiseAndResourceDescription\n          teams {\n            inactiveSinceDate\n            role\n            id {\n              id\n              flatData {\n                displayName\n                inactiveSince\n                proposal {\n                  id\n                }\n              }\n            }\n          }\n\n          social {\n            github\n            googleScholar\n            linkedIn\n            researcherId\n            researchGate\n            twitter\n            website1\n            website2\n          }\n          role\n          responsibilities\n          researchInterests\n          reachOut\n          labs {\n            id\n            flatData {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchWorkingGroups($take: Int, $skip: Int) {\n    queryWorkingGroupsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        status\n        lastModified\n        flatData {\n          title\n          description\n          externalLink\n          shortText\n          complete\n          deliverables {\n            status\n            description\n          }\n          leaders {\n            workstreamRole\n            role\n            inactiveSinceDate\n            user {\n              id\n            }\n          }\n          members {\n            inactiveSinceDate\n            user {\n              id\n            }\n          }\n          calendars {\n            id\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchWorkingGroups($take: Int, $skip: Int) {\n    queryWorkingGroupsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        status\n        lastModified\n        flatData {\n          title\n          description\n          externalLink\n          shortText\n          complete\n          deliverables {\n            status\n            description\n          }\n          leaders {\n            workstreamRole\n            role\n            inactiveSinceDate\n            user {\n              id\n            }\n          }\n          members {\n            inactiveSinceDate\n            user {\n              id\n            }\n          }\n          calendars {\n            id\n          }\n        }\n      }\n    }\n  }\n'];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
