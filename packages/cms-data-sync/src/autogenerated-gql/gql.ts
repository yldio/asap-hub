/* eslint-disable */
import * as graphql from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
  '\n  query FetchCalendars {\n    queryCalendarsContents(top: 100) {\n      id\n      flatData {\n        googleCalendarId\n        name\n        color\n      }\n    }\n  }\n':
    graphql.FetchCalendarsDocument,
  '\n  query FetchExternalAuthors($take: Int, $skip: Int) {\n    queryExternalAuthorsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        flatData {\n          name\n          orcid\n        }\n      }\n    }\n  }\n':
    graphql.FetchExternalAuthorsDocument,
  '\n  query FetchLabs($take: Int, $skip: Int) {\n    queryLabsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        version\n        flatData {\n          name\n        }\n      }\n    }\n  }\n':
    graphql.FetchLabsDocument,
  '\n  query FetchNews {\n    queryNewsAndEventsContents(top: 100) {\n      id\n      created\n      flatData {\n        title\n        shortText\n        text\n        thumbnail {\n          id\n          fileName\n          thumbnailUrl\n          mimeType\n          fileType\n        }\n        frequency\n        link\n        linkText\n      }\n    }\n  }\n':
    graphql.FetchNewsDocument,
  '\n  query FetchPages {\n    queryPagesContents(top: 100) {\n      id\n      flatData {\n        title\n        path\n        shortText\n        text\n        link\n        linkText\n      }\n    }\n  }\n':
    graphql.FetchPagesDocument,
  '\n  query FetchTeams {\n    queryTeamsContents(top: 100) {\n      id\n      created\n      lastModified\n      version\n      flatData {\n        applicationNumber\n        displayName\n        inactiveSince\n        projectSummary\n        projectTitle\n        expertiseAndResourceTags\n        tools {\n          description\n          name\n          url\n        }\n      }\n    }\n  }\n':
    graphql.FetchTeamsDocument,
  '\n  query FetchUsers($take: Int, $skip: Int) {\n    queryUsersContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        version\n        flatData {\n          alumniSinceDate\n          alumniLocation\n          avatar {\n            id\n            fileName\n            mimeType\n            fileType\n          }\n          biography\n          connections {\n            code\n          }\n          degree\n          email\n          contactEmail\n          dismissedGettingStarted\n          firstName\n          institution\n          jobTitle\n          lastName\n          country\n          city\n          onboarded\n          orcid\n          orcidLastModifiedDate\n          orcidLastSyncDate\n          orcidWorks {\n            doi\n            id\n            lastModifiedDate\n            publicationDate\n            title\n            type\n          }\n          questions {\n            question\n          }\n          expertiseAndResourceTags\n          expertiseAndResourceDescription\n          teams {\n            inactiveSinceDate\n            role\n            id {\n              id\n              flatData {\n                displayName\n                inactiveSince\n                proposal {\n                  id\n                }\n              }\n            }\n          }\n\n          social {\n            github\n            googleScholar\n            linkedIn\n            researcherId\n            researchGate\n            twitter\n            website1\n            website2\n          }\n          role\n          responsibilities\n          researchInterests\n          reachOut\n          labs {\n            id\n            flatData {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n':
    graphql.FetchUsersDocument,
};

export function gql(
  source: '\n  query FetchCalendars {\n    queryCalendarsContents(top: 100) {\n      id\n      flatData {\n        googleCalendarId\n        name\n        color\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchCalendars {\n    queryCalendarsContents(top: 100) {\n      id\n      flatData {\n        googleCalendarId\n        name\n        color\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchExternalAuthors($take: Int, $skip: Int) {\n    queryExternalAuthorsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        flatData {\n          name\n          orcid\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchExternalAuthors($take: Int, $skip: Int) {\n    queryExternalAuthorsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        flatData {\n          name\n          orcid\n        }\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchLabs($take: Int, $skip: Int) {\n    queryLabsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        version\n        flatData {\n          name\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchLabs($take: Int, $skip: Int) {\n    queryLabsContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        version\n        flatData {\n          name\n        }\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchNews {\n    queryNewsAndEventsContents(top: 100) {\n      id\n      created\n      flatData {\n        title\n        shortText\n        text\n        thumbnail {\n          id\n          fileName\n          thumbnailUrl\n          mimeType\n          fileType\n        }\n        frequency\n        link\n        linkText\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchNews {\n    queryNewsAndEventsContents(top: 100) {\n      id\n      created\n      flatData {\n        title\n        shortText\n        text\n        thumbnail {\n          id\n          fileName\n          thumbnailUrl\n          mimeType\n          fileType\n        }\n        frequency\n        link\n        linkText\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchPages {\n    queryPagesContents(top: 100) {\n      id\n      flatData {\n        title\n        path\n        shortText\n        text\n        link\n        linkText\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchPages {\n    queryPagesContents(top: 100) {\n      id\n      flatData {\n        title\n        path\n        shortText\n        text\n        link\n        linkText\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchTeams {\n    queryTeamsContents(top: 100) {\n      id\n      created\n      lastModified\n      version\n      flatData {\n        applicationNumber\n        displayName\n        inactiveSince\n        projectSummary\n        projectTitle\n        expertiseAndResourceTags\n        tools {\n          description\n          name\n          url\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchTeams {\n    queryTeamsContents(top: 100) {\n      id\n      created\n      lastModified\n      version\n      flatData {\n        applicationNumber\n        displayName\n        inactiveSince\n        projectSummary\n        projectTitle\n        expertiseAndResourceTags\n        tools {\n          description\n          name\n          url\n        }\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchUsers($take: Int, $skip: Int) {\n    queryUsersContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        version\n        flatData {\n          alumniSinceDate\n          alumniLocation\n          avatar {\n            id\n            fileName\n            mimeType\n            fileType\n          }\n          biography\n          connections {\n            code\n          }\n          degree\n          email\n          contactEmail\n          dismissedGettingStarted\n          firstName\n          institution\n          jobTitle\n          lastName\n          country\n          city\n          onboarded\n          orcid\n          orcidLastModifiedDate\n          orcidLastSyncDate\n          orcidWorks {\n            doi\n            id\n            lastModifiedDate\n            publicationDate\n            title\n            type\n          }\n          questions {\n            question\n          }\n          expertiseAndResourceTags\n          expertiseAndResourceDescription\n          teams {\n            inactiveSinceDate\n            role\n            id {\n              id\n              flatData {\n                displayName\n                inactiveSince\n                proposal {\n                  id\n                }\n              }\n            }\n          }\n\n          social {\n            github\n            googleScholar\n            linkedIn\n            researcherId\n            researchGate\n            twitter\n            website1\n            website2\n          }\n          role\n          responsibilities\n          researchInterests\n          reachOut\n          labs {\n            id\n            flatData {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchUsers($take: Int, $skip: Int) {\n    queryUsersContentsWithTotal(top: $take, skip: $skip) {\n      total\n      items {\n        id\n        created\n        lastModified\n        version\n        flatData {\n          alumniSinceDate\n          alumniLocation\n          avatar {\n            id\n            fileName\n            mimeType\n            fileType\n          }\n          biography\n          connections {\n            code\n          }\n          degree\n          email\n          contactEmail\n          dismissedGettingStarted\n          firstName\n          institution\n          jobTitle\n          lastName\n          country\n          city\n          onboarded\n          orcid\n          orcidLastModifiedDate\n          orcidLastSyncDate\n          orcidWorks {\n            doi\n            id\n            lastModifiedDate\n            publicationDate\n            title\n            type\n          }\n          questions {\n            question\n          }\n          expertiseAndResourceTags\n          expertiseAndResourceDescription\n          teams {\n            inactiveSinceDate\n            role\n            id {\n              id\n              flatData {\n                displayName\n                inactiveSince\n                proposal {\n                  id\n                }\n              }\n            }\n          }\n\n          social {\n            github\n            googleScholar\n            linkedIn\n            researcherId\n            researchGate\n            twitter\n            website1\n            website2\n          }\n          role\n          responsibilities\n          researchInterests\n          reachOut\n          labs {\n            id\n            flatData {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n'];

export function gql(source: string): unknown;
export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
