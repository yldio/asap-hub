import { calendarsQuery } from './calendars.queries';
import {
  FetchCalendarsQuery,
  FetchCalendarsQueryVariables,
} from '../autogenerated-gql/graphql';
import { getSquidexAndContentfulClients, logger } from '../utils';
import { migrateFromSquidexToContentfulFactory } from '../utils/migration';

type CalendarItem = NonNullable<
  FetchCalendarsQuery['queryCalendarsContents']
>[number];

export const migrateCalendars = async () => {
  const { contentfulEnvironment, squidexGraphqlClient } =
    await getSquidexAndContentfulClients();

  const migrateFromSquidexToContentful = migrateFromSquidexToContentfulFactory(
    contentfulEnvironment,
    logger,
  );

  const fetchData = async () => {
    const gqlCalendars = await squidexGraphqlClient.request<
      FetchCalendarsQuery,
      FetchCalendarsQueryVariables
    >(calendarsQuery);

    return gqlCalendars.queryCalendarsContents || [];
  };

  const parseCalendarItem = async (calendar: CalendarItem) => ({
    id: calendar.id,
    ...calendar.flatData,
  });

  await migrateFromSquidexToContentful<CalendarItem>(
    'calendars',
    fetchData,
    parseCalendarItem,
  );
};
