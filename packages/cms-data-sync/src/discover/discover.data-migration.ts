import { Link } from '@asap-hub/contentful';
import {
  FetchDiscoverQuery,
  FetchDiscoverQueryVariables,
} from '../autogenerated-gql/graphql';
import { createDocumentIfNeeded } from '../utils';
import { logger } from '../utils/logs';
import { migrateFromSquidexToContentfulFactory } from '../utils/migration';
import { getSquidexAndContentfulClients } from '../utils/setup';
import { discoverQuery } from './discover.queries';

type LinkedEntity = { id: string } | null;
type DiscoverItem = NonNullable<
  FetchDiscoverQuery['queryDiscoverContents']
>[number];

export const migrateDiscover = async () => {
  const { contentfulEnvironment, squidexGraphqlClient } =
    await getSquidexAndContentfulClients();

  const migrateFromSquidexToContentful = migrateFromSquidexToContentfulFactory(
    contentfulEnvironment,
    logger,
  );

  const fetchData = async (): Promise<DiscoverItem[]> => {
    const { queryDiscoverContents } = await squidexGraphqlClient.request<
      FetchDiscoverQuery,
      FetchDiscoverQueryVariables
    >(discoverQuery);
    const entries = queryDiscoverContents || [];
    logger(`Loaded ${entries.length} entries...`, 'INFO');
    return entries;
  };

  const createLink = (entity: NonNullable<LinkedEntity>): Link<'Entry'> => ({
    sys: {
      type: 'Link',
      linkType: 'Entry',
      id: entity.id,
    },
  });

  const createLinks = (entities: LinkedEntity[] | null): Link<'Entry'>[] => {
    if (!entities) {
      return [];
    }
    return entities.reduce((arr: Link<'Entry'>[], entity: LinkedEntity) => {
      if (!entity) {
        return arr;
      }
      return [...arr, createLink(entity)];
    }, []);
  };

  const parseDiscoverItem = async (page: DiscoverItem) => {
    const { flatData: squidexDiscoverItem, id } = page;

    const {
      aboutUs,
      training,
      members,
      pages,
      scientificAdvisoryBoard,
      membersTeam,
    } = squidexDiscoverItem;

    return {
      id,
      aboutUs: await createDocumentIfNeeded(contentfulEnvironment, aboutUs),
      members: createLinks(members),
      pages: createLinks(pages),
      scientificAdvisoryBoard: createLinks(scientificAdvisoryBoard),
      training: createLinks(training),
      membersTeam: createLinks(membersTeam)[0],
    };
  };

  await migrateFromSquidexToContentful<DiscoverItem>(
    'discover',
    fetchData,
    parseDiscoverItem,
    true,
  );
};
