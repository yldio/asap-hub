import { externalAuthorsQuery } from './external-authors.queries';
import {
  FetchExternalAuthorsQuery,
  FetchExternalAuthorsQueryVariables,
} from '../autogenerated-gql/graphql';
import { getSquidexAndContentfulClients, logger } from '../utils';
import { migrateFromSquidexToContentfulFactory } from '../utils/migration';

type ExternalAuthorItem = NonNullable<
  FetchExternalAuthorsQuery['queryExternalAuthorsContents']
>[number];

export const migrateExternalAuthors = async () => {
  const { contentfulEnvironment, squidexGraphqlClient } =
    await getSquidexAndContentfulClients();

  const migrateFromSquidexToContentful = migrateFromSquidexToContentfulFactory(
    contentfulEnvironment,
    logger,
  );

  const fetchData = async () => {
    const gqlExternalAuthors = await squidexGraphqlClient.request<
      FetchExternalAuthorsQuery,
      FetchExternalAuthorsQueryVariables
    >(externalAuthorsQuery);

    return gqlExternalAuthors.queryExternalAuthorsContents || [];
  };

  const parseExternalAuthorItem = async (
    externalAuthor: ExternalAuthorItem,
  ) => {
    const {
      id,
      flatData: { name, orcid },
    } = externalAuthor;

    const regex = new RegExp('^\\d{4}-\\d{4}-\\d{4}-\\d{3}(\\d|X)$');
    if (orcid && !regex.test(orcid)) {
      logger(
        `Invalid ORCID number (${orcid}) linked to external author with id: ${id}`,
        'ERROR',
      );
      return { id, name, orcid: null };
    }

    return { id, name, orcid };
  };

  await migrateFromSquidexToContentful<ExternalAuthorItem>(
    'externalAuthors',
    fetchData,
    parseExternalAuthorItem,
  );
};
