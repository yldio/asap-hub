import { RateLimiter } from 'limiter';
import { externalAuthorsQuery } from './external-authors.queries';
import {
  FetchExternalAuthorsQuery,
  FetchExternalAuthorsQueryVariables,
} from '../autogenerated-gql/graphql';
import {
  getSquidexAndContentfulClients,
  logger,
  paginatedFetch,
} from '../utils';
import { migrateFromSquidexToContentfulFactory } from '../utils/migration';

type ExternalAuthorItem = NonNullable<
  NonNullable<
    FetchExternalAuthorsQuery['queryExternalAuthorsContentsWithTotal']
  >['items']
>[number];

const limiter = new RateLimiter({ tokensPerInterval: 5, interval: 'second' });

export const migrateExternalAuthors = async () => {
  const { contentfulEnvironment, squidexGraphqlClient } =
    await getSquidexAndContentfulClients();

  const migrateFromSquidexToContentful = migrateFromSquidexToContentfulFactory(
    contentfulEnvironment,
    logger,
    limiter,
  );

  const fetchData = async () =>
    paginatedFetch<ExternalAuthorItem>(async (take: number, skip: number) => {
      const { queryExternalAuthorsContentsWithTotal } =
        await squidexGraphqlClient.request<
          FetchExternalAuthorsQuery,
          FetchExternalAuthorsQueryVariables
        >(externalAuthorsQuery, { take, skip });

      return queryExternalAuthorsContentsWithTotal;
    });

  const parseExternalAuthorItem = async (
    externalAuthor: ExternalAuthorItem,
  ) => {
    const {
      id,
      flatData: { name, orcid },
    } = externalAuthor;

    const regex = new RegExp('^\\d{4}-\\d{4}-\\d{4}-\\d{3}(\\d|X)$');
    if (orcid && !regex.test(orcid)) {
      logger(
        `Invalid ORCID number (${orcid}) linked to external author with id: ${id}`,
        'ERROR',
      );
      return { id, name, orcid: null };
    }

    return { id, name, orcid };
  };

  await migrateFromSquidexToContentful<ExternalAuthorItem>(
    'externalAuthors',
    fetchData,
    parseExternalAuthorItem,
  );
};
