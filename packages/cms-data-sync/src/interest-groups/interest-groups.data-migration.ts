import { addLocaleToFields } from '@asap-hub/contentful';
import { interestGroupsQuery } from './interest-groups.queries';
import {
  FetchGroupsQuery,
  FetchGroupsQueryVariables,
} from '../autogenerated-gql/graphql';
import {
  getSquidexAndContentfulClients,
  logger,
  createAssetUrl,
  createAsset,
  paginatedFetch,
  clearContentfulEntries,
  createCalendarLink,
} from '../utils';
import { migrateFromSquidexToContentfulFactory } from '../utils/migration';

type InterestGroupItem = NonNullable<
  NonNullable<FetchGroupsQuery['queryGroupsContentsWithTotal']>['items']
>[number];

export const migrateInterestGroups = async () => {
  const { contentfulEnvironment, squidexGraphqlClient } =
    await getSquidexAndContentfulClients();

  const migrateFromSquidexToContentful = migrateFromSquidexToContentfulFactory(
    contentfulEnvironment,
    logger,
  );

  const fetchAllData = async (): Promise<InterestGroupItem[]> =>
    paginatedFetch<InterestGroupItem>(async (take: number, skip: number) => {
      const { queryGroupsContentsWithTotal } =
        await squidexGraphqlClient.request<
          FetchGroupsQuery,
          FetchGroupsQueryVariables
        >(interestGroupsQuery, { take, skip });
      return queryGroupsContentsWithTotal;
    });

  const fetchData = async (): Promise<InterestGroupItem[]> => {
    const entries = await fetchAllData();
    logger(`Loaded ${entries.length} entries...`, 'INFO');
    return entries;
  };

  const parseInterestGroupItem = async (group: InterestGroupItem) => {
    const { id, lastModified, flatData } = group;
    const { teams, calendars, leaders, tools, thumbnail, ...props } = flatData;

    const leaderLinks = await Promise.all(
      (leaders || []).map(async (leader) => {
        if (leader.user && leader.user[0]) {
          const leaderEntry = await contentfulEnvironment.createEntry(
            'interestGroupLeaders',
            {
              fields: addLocaleToFields({
                role: leader.role,
                inactiveSinceDate: leader.inactiveSinceDate,
                user: {
                  sys: {
                    type: 'Link',
                    linkType: 'Entry',
                    id: leader.user[0].id,
                  },
                },
              }),
            },
          );
          await leaderEntry.publish();
          return {
            sys: {
              type: 'Link',
              linkType: 'Entry',
              id: leaderEntry.sys.id,
            },
          };
        }
        return null;
      }),
    );

    const teamLinks = (teams || []).map((team) => {
      if (team.id) {
        return {
          sys: {
            type: 'Link',
            linkType: 'Entry',
            id: team.id,
          },
        };
      }
      return null;
    });

    let thumbnailAsset;
    if (thumbnail) {
      const urls = createAssetUrl(thumbnail.map((asset) => asset.id));
      if (urls.length > 0) {
        thumbnailAsset = await createAsset(contentfulEnvironment, [
          { ...thumbnail[0], thumbnailUrl: urls[0] },
        ]);
      }
    }

    return {
      id,
      slack: tools?.[0]?.slack,
      googleDrive: tools?.[0]?.googleDrive,
      teams: teamLinks.filter(Boolean),
      leaders: leaderLinks.filter(Boolean),
      thumbnail: thumbnailAsset,
      calendar: calendars?.[0]?.id
        ? await createCalendarLink(
            contentfulEnvironment,
            calendars[0].id,
            `Interest Group with id ${id} is going to be created without a calendar.`,
          )
        : null,
      lastUpdated: lastModified,
      ...props,
    };
  };

  await clearContentfulEntries(contentfulEnvironment, 'interestGroupLeaders');

  await migrateFromSquidexToContentful<InterestGroupItem>(
    'interestGroups',
    fetchData,
    parseInterestGroupItem,
  );
};
