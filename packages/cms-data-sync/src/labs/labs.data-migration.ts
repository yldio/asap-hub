import { Labs } from '@asap-hub/contentful';
import { labsQuery } from './labs.queries';
import {
  FetchLabsQuery,
  FetchLabsQueryVariables,
} from '../autogenerated-gql/graphql';
import { getSquidexAndContentfulClients, logger } from '../utils';
import { migrateFromSquidexToContentfulFactory } from '../utils/migration';

type LabItem = NonNullable<
  NonNullable<FetchLabsQuery['queryLabsContentsWithTotal']>['items']
>[number];
type ContentfulLab = Omit<Labs, 'sys' | 'contentfulMetadata'> & { id: string };

export const migrateLabs = async () => {
  const { contentfulEnvironment, squidexGraphqlClient } =
    await getSquidexAndContentfulClients();

  const migrateFromSquidexToContentful = migrateFromSquidexToContentfulFactory(
    contentfulEnvironment,
    logger,
  );

  const fetchAllData = async (skip: number = 0): Promise<LabItem[]> => {
    const PAGE_SIZE = 100;
    const { queryLabsContentsWithTotal } = await squidexGraphqlClient.request<
      FetchLabsQuery,
      FetchLabsQueryVariables
    >(labsQuery, { take: PAGE_SIZE, skip });
    if (!queryLabsContentsWithTotal || !queryLabsContentsWithTotal.items) {
      return [];
    }
    if (
      queryLabsContentsWithTotal.total >
      skip + queryLabsContentsWithTotal.items.length
    ) {
      const nextPage: LabItem[] = await fetchAllData(skip + PAGE_SIZE);
      return [...(queryLabsContentsWithTotal.items || []), ...nextPage];
    }
    return queryLabsContentsWithTotal.items || [];
  };

  const fetchData = async (): Promise<LabItem[]> => {
    const entries = await fetchAllData();
    logger(`Loaded ${entries.length} entries...`, 'INFO');
    return entries;
  };

  const parseLabItem = async (lab: LabItem): Promise<ContentfulLab> => {
    const { flatData: squidexLabItem, id } = lab;

    const { name } = squidexLabItem;

    return { id, name };
  };

  await migrateFromSquidexToContentful<LabItem>(
    'labs',
    fetchData,
    parseLabItem,
  );
};
