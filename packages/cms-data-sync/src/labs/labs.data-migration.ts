import { Labs } from '@asap-hub/contentful';
import { RateLimiter } from 'limiter';
import { labsQuery } from './labs.queries';
import {
  FetchLabsQuery,
  FetchLabsQueryVariables,
} from '../autogenerated-gql/graphql';
import {
  getSquidexAndContentfulClients,
  logger,
  paginatedFetch,
} from '../utils';
import { migrateFromSquidexToContentfulFactory } from '../utils/migration';

const limiter = new RateLimiter({ tokensPerInterval: 5, interval: 'second' });

type LabItem = NonNullable<
  NonNullable<FetchLabsQuery['queryLabsContentsWithTotal']>['items']
>[number];
type ContentfulLab = Omit<Labs, 'sys' | 'contentfulMetadata'> & { id: string };

export const migrateLabs = async () => {
  const { contentfulEnvironment, squidexGraphqlClient } =
    await getSquidexAndContentfulClients();

  const migrateFromSquidexToContentful = migrateFromSquidexToContentfulFactory(
    contentfulEnvironment,
    logger,
    limiter,
  );

  const fetchAllData = async (): Promise<LabItem[]> =>
    paginatedFetch<LabItem>(async (take: number, skip: number) => {
      const { queryLabsContentsWithTotal } = await squidexGraphqlClient.request<
        FetchLabsQuery,
        FetchLabsQueryVariables
      >(labsQuery, { take, skip });
      return queryLabsContentsWithTotal;
    });

  const fetchData = async (): Promise<LabItem[]> => {
    const entries = await fetchAllData();
    logger(`Loaded ${entries.length} entries...`, 'INFO');
    return entries;
  };

  const parseLabItem = async (lab: LabItem): Promise<ContentfulLab> => {
    const { flatData: squidexLabItem, id } = lab;

    const { name } = squidexLabItem;

    return { id, name };
  };

  await migrateFromSquidexToContentful<LabItem>(
    'labs',
    fetchData,
    parseLabItem,
  );
};
