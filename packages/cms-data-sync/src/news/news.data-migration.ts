/* eslint-disable no-await-in-loop */
/* eslint-disable no-restricted-syntax */
/* eslint-disable @typescript-eslint/no-non-null-assertion */

import { Entry, SysLink } from 'contentful-management';
import { Document } from '@contentful/rich-text-types';

import { newsQuery } from './news.queries';
import {
  FetchNewsQuery,
  FetchNewsQueryVariables,
} from '../autogenerated-gql/graphql';

import {
  clearContentfulEntries,
  convertHtmlToContentfulFormat,
  createAsset,
  getSquidexAndContentfulClients,
  logger,
  publishContentfulEntries,
} from '../utils';

type NewsPayload = {
  title: { 'en-US': string };
  shortText: { 'en-US': string | null };
  frequency: { 'en-US': string | null };
  link: { 'en-US': string | undefined };
  linkText: { 'en-US': string | undefined };
  text: { 'en-US': Document | null };
  thumbnail: { 'en-US': SysLink | null };
};

export const migrateNews = async () => {
  const clients = await getSquidexAndContentfulClients();
  if (clients) {
    const { contentfulEnvironment, squidexGraphqlClient } = clients;
    const gqlNews = await squidexGraphqlClient.request<
      FetchNewsQuery,
      FetchNewsQueryVariables
    >(newsQuery);

    await clearContentfulEntries(contentfulEnvironment, 'news');

    const entries: Entry[] = [];

    const newsItems = gqlNews.queryNewsAndEventsContents || [];
    for (const news of newsItems) {
      const { flatData: squidexNewsItem, id } = news;

      const { title, shortText, frequency, link, linkText, thumbnail, text } =
        squidexNewsItem;

      const newsPayload: NewsPayload = {
        title: { 'en-US': title! },
        shortText: { 'en-US': shortText },
        frequency: { 'en-US': frequency || 'News Articles' },
        link: { 'en-US': link! },
        linkText: { 'en-US': linkText! },
        text: { 'en-US': null },
        thumbnail: { 'en-US': null },
      };

      if (thumbnail?.length) {
        newsPayload.thumbnail['en-US'] = await createAsset(
          contentfulEnvironment,
          thumbnail,
        );
      }

      if (text) {
        try {
          newsPayload.text['en-US'] = convertHtmlToContentfulFormat(text);
        } catch {
          logger(
            `There is a problem converting rich text from entry ${id}`,
            'ERROR',
          );
        }
      }

      try {
        const entry = await contentfulEnvironment.createEntryWithId(
          'news',
          id,
          {
            fields: newsPayload,
          },
        );
        entries.push(entry);
      } catch (err) {
        logger(`Error details of entry ${id}:\n${err}`, 'ERROR-DEBUG');
        try {
          // Most probably it failed because the rich text could not be
          // processed, so here we will try to create the entry
          // without the rich text
          newsPayload.text = { 'en-US': null };
          const entryWithoutRichText =
            await contentfulEnvironment.createEntryWithId('news', id, {
              fields: newsPayload,
            });
          logger(`Entry with ID ${id} was uploaded without rich text`, 'ERROR');

          entries.push(entryWithoutRichText);
        } catch {
          logger(`There is a problem creating entry ${id}`, 'ERROR');
        }
      }
    }
    await publishContentfulEntries(entries);
  }
};

migrateNews();
