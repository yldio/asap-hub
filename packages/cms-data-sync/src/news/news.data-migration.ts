/* eslint-disable @typescript-eslint/no-non-null-assertion */
/* eslint-disable no-console */
import assert from 'assert';
import {
  createClient,
  Environment,
  Entry,
  SysLink,
} from 'contentful-management';
import { parseHtml } from 'contentful-html-rich-text-converter';
import { Document } from '@contentful/rich-text-types';

import { getAccessTokenFactory, SquidexGraphql } from '@asap-hub/squidex';

import { newsQuery } from './news.queries';
import {
  FetchNewsQuery,
  FetchNewsQueryVariables,
} from '../autogenerated-gql/graphql';

import { migrateAsset } from '../assets/assets.data-migration';

type NewsPayload = {
  title: { 'en-US': string };
  shortText: { 'en-US': string | null };
  frequency: { 'en-US': string | null };
  link: { 'en-US': string | undefined };
  linkText: { 'en-US': string | undefined };
  text: { 'en-US': Document | null };
  thumbnail: { 'en-US': SysLink | null };
};

const clearContentfulEntries = async (contentfulEnvironment: Environment) => {
  const news = await contentfulEnvironment.getEntries({
    content_type: 'news',
  });
  console.log('Cleaning Contentful Entries...');

  const unpublishPromises: Promise<Entry>[] = [];
  news.items.forEach(async (entry) => {
    if (entry.isPublished()) {
      unpublishPromises.push(entry.unpublish());
    }
  });

  await Promise.all(unpublishPromises);

  const deletePromises: Promise<Entry>[] = [];
  news.items.forEach(async (entry) => {
    deletePromises.push(entry.delete());
    console.log('entry', entry.sys.id, 'deleted');
  });

  await Promise.all(deletePromises);
};

const clearRichText = (htmlDocument: Document) => ({
  ...htmlDocument,
  content: htmlDocument?.content
    .map((node) =>
      node.nodeType === 'unordered-list' || node.nodeType === 'ordered-list'
        ? {
            ...node,
            content: node.content.filter(
              (childNode: { nodeType: string }) =>
                childNode.nodeType === 'list-item',
            ),
          }
        : node,
    )
    // The external lib 'parseHtml' we are using may return
    // an output with incorrect nodeType, that's why
    // we need to overwrite its type to any and filter
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    .filter((node: any) => node?.nodeType !== 'text'),
});

const publishEntries = async (entries: Entry[]) => {
  entries.forEach(async (entry) => {
    try {
      const published = await entry.publish();
      console.log(`Published entry ${published.sys.id}.`);
    } catch {
      console.log(`Entry with id ${entry.sys.id} could not be published.`);
    }
  });
};

// const bulkPublishEntries = async (
//   contentfulEnvironment: Environment,
//   entries: Entry[],
// ) => {
//   const payload: VersionedLink<'Entry'>[] = entries.map((entry) => ({
//     sys: {
//       linkType: 'Entry',
//       type: 'Link',
//       id: entry.sys.id,
//       version: entry.sys.version,
//     },
//   }));

//   const bulkActionInProgress =
//     await contentfulEnvironment.createPublishBulkAction({
//       entities: {
//         sys: { type: 'Array' },
//         items: payload,
//       },
//     });

//   const bulkActionCompleted = await bulkActionInProgress.waitProcessing();
//   console.log(bulkActionCompleted);
// };

const migrateNews = async () => {
  [
    'CONTENTFUL_MANAGEMENT_ACCESS_TOKEN',
    'CONTENTFUL_SPACE_ID',
    'CONTENTFUL_ENV_ID',
    'CRN_SQUIDEX_APP_NAME',
    'CRN_SQUIDEX_CLIENT_ID',
    'CRN_SQUIDEX_CLIENT_SECRET',
    'SQUIDEX_BASE_URL',
  ].forEach((env) => {
    assert.ok(process.env[env], `${env} not defined`);
  });

  const {
    CONTENTFUL_MANAGEMENT_ACCESS_TOKEN,
    CONTENTFUL_SPACE_ID,
    CONTENTFUL_ENV_ID,
    CRN_SQUIDEX_APP_NAME,
    CRN_SQUIDEX_CLIENT_ID,
    CRN_SQUIDEX_CLIENT_SECRET,
    SQUIDEX_BASE_URL,
  } = process.env;

  const getAuthToken = getAccessTokenFactory({
    clientId: CRN_SQUIDEX_CLIENT_ID!,
    clientSecret: CRN_SQUIDEX_CLIENT_SECRET!,
    baseUrl: SQUIDEX_BASE_URL!,
  });

  const squidexGraphqlClient = new SquidexGraphql(getAuthToken, {
    appName: CRN_SQUIDEX_APP_NAME!,
    baseUrl: SQUIDEX_BASE_URL!,
  });

  const gqlNews = await squidexGraphqlClient.request<
    FetchNewsQuery,
    FetchNewsQueryVariables
  >(newsQuery);

  console.log('gqlNews', gqlNews);

  const contentfulClient = createClient({
    accessToken: CONTENTFUL_MANAGEMENT_ACCESS_TOKEN!,
  });

  const contentfulSpace = await contentfulClient.getSpace(CONTENTFUL_SPACE_ID!);
  const contentfulEnvironment = await contentfulSpace.getEnvironment(
    CONTENTFUL_ENV_ID!,
  );

  await clearContentfulEntries(contentfulEnvironment);

  const entries: Entry[] = [];

  const newsItems = gqlNews.queryNewsAndEventsContents || [];
  for await (const news of newsItems) {
    const { flatData: squidexNewsItem, id } = news;

    const { title, shortText, frequency, link, linkText, thumbnail } =
      squidexNewsItem;

    const newsPayload: NewsPayload = {
      title: { 'en-US': title! },
      shortText: { 'en-US': shortText },
      frequency: { 'en-US': frequency || 'News Articles' },
      link: { 'en-US': link! },
      linkText: { 'en-US': linkText! },
      text: { 'en-US': null },
      thumbnail: { 'en-US': null },
    };

    if (thumbnail?.length) {
      await migrateAsset(contentfulEnvironment, thumbnail);
      newsPayload.thumbnail = {
        'en-US': {
          sys: {
            type: 'Link',
            linkType: 'Asset',
            id: thumbnail[0]?.id!,
          },
        },
      };
    }

    if (squidexNewsItem.text) {
      const textWithoutDivTag = squidexNewsItem.text.replace(
        /<[\\/]{0,1}(div)[^><]*>/g,
        '',
      );

      try {
        const parsedHtml = parseHtml(textWithoutDivTag) as Document;

        newsPayload.text = {
          'en-US': clearRichText(parsedHtml),
        };
      } catch {
        console.log(`There is a problem converting rich text from entry ${id}`);
      }
    }

    try {
      const entry = await contentfulEnvironment.createEntryWithId('news', id, {
        fields: newsPayload,
      });
      entries.push(entry);
    } catch {
      console.log(`There is a problem creating entry ${id}`);
    }
  }

  await publishEntries(entries);
};

migrateNews();
