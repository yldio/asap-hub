/* eslint-disable no-console */
/* eslint-disable no-param-reassign */
/* eslint-disable no-restricted-syntax */
/* eslint-disable @typescript-eslint/no-non-null-assertion */

import { Entry, SysLink } from 'contentful-management';
import { Document } from '@contentful/rich-text-types';

import { newsQuery } from './news.queries';
import {
  FetchNewsQuery,
  FetchNewsQueryVariables,
} from '../autogenerated-gql/graphql';

import {
  clearContentfulEntries,
  convertHtmlToContentfulFormat,
  createAssetLink,
  getSquidexAndContentfulClients,
  publishContentfulEntries,
} from '../utils';

type NewsPayload = {
  title: { 'en-US': string };
  shortText: { 'en-US': string | null };
  frequency: { 'en-US': string | null };
  link: { 'en-US': string | undefined };
  linkText: { 'en-US': string | undefined };
  text: { 'en-US': Document | null };
  thumbnail: { 'en-US': SysLink | null };
};

const migrateNews = async () => {
  const { contentfulEnvironment, squidexGraphqlClient } =
    await getSquidexAndContentfulClients();

  const gqlNews = await squidexGraphqlClient.request<
    FetchNewsQuery,
    FetchNewsQueryVariables
  >(newsQuery);

  await clearContentfulEntries(contentfulEnvironment, 'news');

  const entries: Entry[] = [];

  const newsItems = gqlNews.queryNewsAndEventsContents || [];
  for await (const news of newsItems) {
    const { flatData: squidexNewsItem, id } = news;

    const { title, shortText, frequency, link, linkText, thumbnail, text } =
      squidexNewsItem;

    const newsPayload: NewsPayload = {
      title: { 'en-US': title! },
      shortText: { 'en-US': shortText },
      frequency: { 'en-US': frequency || 'News Articles' },
      link: { 'en-US': link! },
      linkText: { 'en-US': linkText! },
      text: { 'en-US': null },
      thumbnail: { 'en-US': null },
    };

    newsPayload.thumbnail['en-US'] = await createAssetLink(
      contentfulEnvironment,
      thumbnail,
    );

    if (text) {
      try {
        newsPayload.text['en-US'] = convertHtmlToContentfulFormat(text);
      } catch {
        console.log(`There is a problem converting rich text from entry ${id}`);
      }
    }

    try {
      const entry = await contentfulEnvironment.createEntryWithId('news', id, {
        fields: newsPayload,
      });
      entries.push(entry);
    } catch {
      try {
        // Most probably it failed because the rich text could not be
        // processed, so here we will try to create the entry
        // without the rich text
        newsPayload.text = { 'en-US': null };
        const entryWithoutRichText =
          await contentfulEnvironment.createEntryWithId('news', id, {
            fields: newsPayload,
          });
        entries.push(entryWithoutRichText);
      } catch {
        console.log(`There is a problem creating entry ${id}`);
      }
    }
  }

  await publishContentfulEntries(entries);
};

migrateNews();
