import { Document } from '@contentful/rich-text-types';
import {
  FetchPagesQuery,
  FetchPagesQueryVariables,
} from '../autogenerated-gql/graphql';
import { logger } from '../utils/logs';
import { migrateFromSquidexToContentfulFactory } from '../utils/migration';
import { convertHtmlToContentfulFormat } from '../utils/rich-text';
import { getSquidexAndContentfulClients } from '../utils/setup';
import { pagesQuery } from './pages.queries';

type PageItem = NonNullable<FetchPagesQuery['queryPagesContents']>[number];

export const migratePages = async () => {
  const { contentfulEnvironment, squidexGraphqlClient } =
    await getSquidexAndContentfulClients();

  const migrateFromSquidexToContentful = migrateFromSquidexToContentfulFactory(
    contentfulEnvironment,
    logger,
  );

  const fetchData = async () => {
    const gqlNews = await squidexGraphqlClient.request<
      FetchPagesQuery,
      FetchPagesQueryVariables
    >(pagesQuery);

    return gqlNews.queryPagesContents || [];
  };

  const parsePagesItem = async (page: PageItem) => {
    const { flatData: squidexPageItem, id } = page;

    const { title, shortText, link, linkText, text, path } = squidexPageItem;

    const pagePayload = {
      title: title!,
      path: path!,
      shortText: shortText,
      link: link!,
      linkText: linkText!,
      text: null as Document | null,
    };

    if (text) {
      try {
        pagePayload.text = convertHtmlToContentfulFormat(text);
      } catch {
        logger(
          `There is a problem converting rich text from entry ${id}`,
          'ERROR',
        );
      }
    }

    return { id, ...pagePayload };
  };

  const fallbackParsePageItem = async (
    page: Record<string, unknown>,
  ): Promise<Record<string, unknown>> => {
    // Most probably it failed because the rich text could not be
    // processed, so here we will try to create the entry
    // without the rich text
    page.text = null;

    return page;
  };

  await migrateFromSquidexToContentful<PageItem>(
    'pages',
    fetchData,
    parsePagesItem,
    fallbackParsePageItem,
  );
};
