import { getLinkEntity, getLinkEntities } from '@asap-hub/contentful';
import { researchOutputsQuery } from './research-outputs.queries';
import {
  FetchResearchOutputsQuery,
  FetchResearchOutputsQueryVariables,
} from '../autogenerated-gql/graphql';
import {
  createDocumentIfNeeded,
  getSquidexAndContentfulClients,
  logger,
  paginatedFetch,
} from '../utils';
import { migrateFromSquidexToContentfulFactory } from '../utils/migration';

type OutputItem = NonNullable<
  NonNullable<
    FetchResearchOutputsQuery['queryResearchOutputsContentsWithTotal']
  >['items']
>[number];

export const migrateResearchOutputs = async () => {
  const { contentfulEnvironment, squidexGraphqlClient } =
    await getSquidexAndContentfulClients();

  const migrateFromSquidexToContentful = migrateFromSquidexToContentfulFactory(
    contentfulEnvironment,
    logger,
  );

  const fetchAllData = async (): Promise<OutputItem[]> =>
    paginatedFetch<OutputItem>(async (take: number, skip: number) => {
      const { queryResearchOutputsContentsWithTotal } =
        await squidexGraphqlClient.request<
          FetchResearchOutputsQuery,
          FetchResearchOutputsQueryVariables
        >(researchOutputsQuery, { take, skip }, { includeDrafts: true });
      return queryResearchOutputsContentsWithTotal;
    });

  const fetchData = async (): Promise<OutputItem[]> => {
    const entries = await fetchAllData();
    logger(`Loaded ${entries.length} entries...`, 'INFO');
    return entries;
  };

  const getPublishedIds = (arr: { status: string; id: string }[]): string[] =>
    arr.filter(({ status }) => status === 'PUBLISHED').map(({ id }) => id);

  const parseOutputItem = async (output: OutputItem) => {
    const { flatData: squidexOutputItem, id, created } = output;

    const {
      authors,
      relatedResearch,
      description,
      relatedEvents,
      labs,
      workingGroups,
      teams,
      methods,
      organisms,
      environments,
      subtype,
      keywords,
      link,
      rrid,
      doi,
      accession,
      ...fields
    } = squidexOutputItem;

    const outputPayload = {
      createdDate: created,
      description: await createDocumentIfNeeded(
        contentfulEnvironment,
        description,
      ),
      link: link?.trim() ? link.trim() : null,
      rrid: rrid?.trim() ? rrid.trim() : null,
      doi: doi?.trim() ? doi.trim() : null,
      accession: accession?.trim() ? accession.trim() : null,
      relatedResearch: getLinkEntities(getPublishedIds(relatedResearch || [])),
      relatedEvents: getLinkEntities(getPublishedIds(relatedEvents || [])),
      labs: getLinkEntities(getPublishedIds(labs || [])),
      workingGroup:
        workingGroups?.[0]?.id && workingGroups?.[0]?.status === 'PUBLISHED'
          ? getLinkEntity(workingGroups?.[0]?.id)
          : undefined,
      teams: getLinkEntities(getPublishedIds(teams || [])),
      methods: getLinkEntities(getPublishedIds(methods || [])),
      organisms: getLinkEntities(getPublishedIds(organisms || [])),
      environments: getLinkEntities(getPublishedIds(environments || [])),
      subtype:
        subtype?.[0]?.id && subtype?.[0]?.status === 'PUBLISHED'
          ? getLinkEntity(subtype?.[0]?.id)
          : undefined,
      keywords: getLinkEntities(getPublishedIds(keywords || [])),
      authors: getLinkEntities(getPublishedIds(authors || [])),
      ...fields,
    };

    return {
      id,
      ...outputPayload,
    };
  };

  await migrateFromSquidexToContentful<OutputItem>(
    'researchOutputs',
    fetchData,
    parseOutputItem,
  );
};
