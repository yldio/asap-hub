import { ResearchTags } from '@asap-hub/contentful';
import { researchTagsQuery } from './research-tags.queries';
import {
  FetchResearchTagsQuery,
  FetchResearchTagsQueryVariables,
} from '../autogenerated-gql/graphql';
import {
  getSquidexAndContentfulClients,
  logger,
  paginatedFetch,
} from '../utils';
import { migrateFromSquidexToContentfulFactory } from '../utils/migration';

type TagItem = NonNullable<
  NonNullable<
    FetchResearchTagsQuery['queryResearchTagsContentsWithTotal']
  >['items']
>[number];
type ContentfulTag = Omit<ResearchTags, 'sys' | 'contentfulMetadata'> & {
  id: string;
};

export const migrateResearchTags = async () => {
  const { contentfulEnvironment, squidexGraphqlClient } =
    await getSquidexAndContentfulClients();

  const migrateFromSquidexToContentful = migrateFromSquidexToContentfulFactory(
    contentfulEnvironment,
    logger,
  );

  const fetchAllData = async (): Promise<TagItem[]> =>
    paginatedFetch<TagItem>(async (take: number, skip: number) => {
      const { queryResearchTagsContentsWithTotal } =
        await squidexGraphqlClient.request<
          FetchResearchTagsQuery,
          FetchResearchTagsQueryVariables
        >(researchTagsQuery, { take, skip });
      return queryResearchTagsContentsWithTotal;
    });

  const fetchData = async (): Promise<TagItem[]> => {
    const entries = await fetchAllData();
    logger(`Loaded ${entries.length} entries...`, 'INFO');
    return entries;
  };

  const parseTagItem = async (tag: TagItem): Promise<ContentfulTag> => {
    const { flatData: squidexTagItem, id } = tag;

    const { name, category, types, entities } = squidexTagItem;

    return { id, name, category, types, entities };
  };

  await migrateFromSquidexToContentful<TagItem>(
    'researchTags',
    fetchData,
    parseTagItem,
  );
};
