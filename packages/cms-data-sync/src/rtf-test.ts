import {
  FetchNewsQuery,
  FetchNewsQueryVariables,
  FetchPagesQuery,
  FetchPagesQueryVariables,
} from './autogenerated-gql/graphql';
import { newsQuery } from './news/news.queries';
import { pagesQuery } from './pages/pages.queries';
import {
  convertHtmlToContentfulFormat,
  createInlineAssets,
  getSquidexAndContentfulClients,
} from './utils';
import { migrateFromSquidexToContentfulFactory } from './utils/migration';

type NewsItem = NonNullable<
  FetchNewsQuery['queryNewsAndEventsContents']
>[number];

type PageItem = NonNullable<FetchPagesQuery['queryPagesContents']>[number];

(async () => {
  const { contentfulEnvironment, squidexGraphqlClient } =
    await getSquidexAndContentfulClients();
  const migrateFromSquidexToContentful = migrateFromSquidexToContentfulFactory(
    contentfulEnvironment,
    (message, level) => {
      if (level === 'ERROR-DEBUG') {
        // throw new Error(message);
      }
      console.debug(message);
    },
  );

  let total = 0;
  let successful = 0;
  let failed = 0;

  const fetchData = async () => {
    const gqlNews = await squidexGraphqlClient.request<
      FetchNewsQuery,
      FetchNewsQueryVariables
    >(newsQuery);

    const gqlPages = await squidexGraphqlClient.request<
      FetchPagesQuery,
      FetchPagesQueryVariables
    >(pagesQuery);

    total =
      (gqlNews.queryNewsAndEventsContents?.length || 0) +
      (gqlPages.queryPagesContents?.length || 0);

    return [
      ...(gqlNews.queryNewsAndEventsContents || []),
      ...(gqlPages.queryPagesContents || []),
    ];
  };

  const parseNewsItem = async (item: NewsItem | PageItem) => {
    const {
      flatData: { text },
      id,
    } = item;

    let content: any;

    if (!text) {
      return {
        id,
        content: null,
      };
    }

    try {
      const { document, inlineAssetBodies } =
        convertHtmlToContentfulFormat(text);
      content = document;
      await createInlineAssets(contentfulEnvironment, inlineAssetBodies);
    } catch (error) {
      console.error(error);
    }

    return {
      id,
      content,
    };
  };

  let failedEmptyContent = 0;

  const onComplete = async (error: any) => {
    if (error) {
      failed++;

      const errorMessage = JSON.parse(error.message);
      if (errorMessage.status === 422) {
        if (errorMessage.details?.errors?.length > 0) {
          const errorList = errorMessage.details.errors;
          if (
            errorList.some(
              (err: any) =>
                err.expected &&
                err.expected[0]['$ref'] === '#/definitions/Inline',
            )
          ) {
            failedEmptyContent++;
          }
        }
      }
    } else {
      successful++;
    }
  };

  await migrateFromSquidexToContentful<NewsItem | PageItem>(
    'testModel',
    fetchData,
    parseNewsItem,
    undefined,
    onComplete,
  );

  console.log(
    `Total: ${total}, Successful: ${successful}, Failed: ${failed}, Failed empty content: ${failedEmptyContent}`,
  );
})();
