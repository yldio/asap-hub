import { teamsQuery } from './teams.queries';
import {
  FetchTeamsQuery,
  FetchTeamsQueryVariables,
} from '../autogenerated-gql/graphql';
import {
  clearContentfulEntries,
  createExternalToolLinks,
  getSquidexAndContentfulClients,
  logger,
} from '../utils';
import { migrateFromSquidexToContentfulFactory } from '../utils/migration';

type TeamItem = NonNullable<FetchTeamsQuery['queryTeamsContents']>[number];

export const migrateTeams = async () => {
  const { contentfulEnvironment, squidexGraphqlClient } =
    await getSquidexAndContentfulClients();

  await clearContentfulEntries(contentfulEnvironment, 'externalTools');

  const migrateFromSquidexToContentful = migrateFromSquidexToContentfulFactory(
    contentfulEnvironment,
    logger,
  );

  const fetchData = async () => {
    const gqlTeams = await squidexGraphqlClient.request<
      FetchTeamsQuery,
      FetchTeamsQueryVariables
    >(teamsQuery);
    return gqlTeams.queryTeamsContents || [];
  };

  const parseTeamItem = async (team: TeamItem) => {
    const { flatData: squidexTeamItem, id } = team;

    const {
      applicationNumber,
      displayName,
      expertiseAndResourceTags,
      inactiveSince,
      projectSummary,
      projectTitle,
      tools,
    } = squidexTeamItem;

    const toolLinks = tools?.length
      ? await createExternalToolLinks(contentfulEnvironment, tools)
      : [];

    const teamPayload = {
      applicationNumber,
      displayName,
      expertiseAndResourceTags,
      inactiveSince,
      projectSummary,
      projectTitle,
      tools: toolLinks,
    };

    return { id, ...teamPayload };
  };

  await migrateFromSquidexToContentful<TeamItem>(
    'teams',
    fetchData,
    parseTeamItem,
  );
};
