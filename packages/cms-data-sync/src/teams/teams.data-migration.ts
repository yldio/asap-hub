/* eslint-disable @typescript-eslint/no-non-null-assertion */

import { Document } from '@contentful/rich-text-types';
import { teamsQuery } from './teams.queries';
import {
  FetchTeamsQuery,
  FetchTeamsQueryVariables,
} from '../autogenerated-gql/graphql';
import {
  convertHtmlToContentfulFormat,
  createAsset,
  createInlineAssets,
  createMediaEntries,
  getSquidexAndContentfulClients,
  logger,
} from '../utils';
import { migrateFromSquidexToContentfulFactory } from '../utils/migration';

type TeamsItem = NonNullable<
FetchTeamsQuery['queryTeamsContents']
>[number];

export const migrateNews = async () => {
  const { contentfulEnvironment, squidexGraphqlClient } =
    await getSquidexAndContentfulClients();

  const migrateFromSquidexToContentful = migrateFromSquidexToContentfulFactory(
    contentfulEnvironment,
    logger,
  );

  const fetchData = async () => {
    const gqlTeams = await squidexGraphqlClient.request<
      FetchTeamsQuery,
      FetchTeamsQueryVariables
    >(teamsQuery);

    return gqlTeams. || [];
  };

  const parseTeamsItem = async (news: TeamsItem) => {
    const { flatData: squidexTeamsItem, id, created } = news;

    const { title, shortText, frequency, link, linkText, thumbnail, text } =
      squidexTeamsItem;

    const newsPayload = {
      title: title!,
      shortText,
      frequency: frequency || 'News Articles',
      link: link!,
      linkText: linkText!,
      text: null as Document | null,
      thumbnail: thumbnail?.length
        ? await createAsset(contentfulEnvironment, thumbnail)
        : null,
      publishDate: created,
    };

    if (text) {
      try {
        const { document, inlineAssetBodies, inlineIFramesBodies } =
          convertHtmlToContentfulFormat(text);
        newsPayload.text = document;
        await createInlineAssets(contentfulEnvironment, inlineAssetBodies);
        await createMediaEntries(contentfulEnvironment, inlineIFramesBodies);
      } catch {
        logger(
          `There is a problem converting rich text from entry ${id}`,
          'ERROR',
        );
      }
    }

    return { id, ...newsPayload };
  };

  const fallbackParseTeamsItem = async (
    news: Record<string, unknown>,
  ): Promise<Record<string, unknown>> => {
    // Most probably it failed because the rich text could not be
    // processed, so here we will try to create the entry
    // without the rich text
    // eslint-disable-next-line no-param-reassign
    news.text = null;

    return news;
  };

  await migrateFromSquidexToContentful<TeamsItem>(
    'news',
    fetchData,
    parseTeamsItem,
    fallbackParseTeamsItem,
  );
};
