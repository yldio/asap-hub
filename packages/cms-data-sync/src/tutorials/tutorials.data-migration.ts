import { Document } from '@contentful/rich-text-types';
import {
  FetchTutorialsQuery,
  FetchTutorialsQueryVariables,
} from '../autogenerated-gql/graphql';
import {
  createDocumentIfNeeded,
  paginatedFetch,
  createAsset,
  createAssetUrl,
} from '../utils';
import { logger } from '../utils/logs';
import { migrateFromSquidexToContentfulFactory } from '../utils/migration';
import { getSquidexAndContentfulClients } from '../utils/setup';
import { tutorialsQuery } from './tutorials.queries';

type TutorialItem = NonNullable<
  NonNullable<FetchTutorialsQuery['queryTutorialsContentsWithTotal']>['items']
>[number];

export const migrateTutorials = async () => {
  const { contentfulEnvironment, squidexGraphqlClient } =
    await getSquidexAndContentfulClients();

  const migrateFromSquidexToContentful = migrateFromSquidexToContentfulFactory(
    contentfulEnvironment,
    logger,
  );

  const fetchAllData = async (): Promise<TutorialItem[]> =>
    paginatedFetch<TutorialItem>(async (take: number, skip: number) => {
      const { queryTutorialsContentsWithTotal } =
        await squidexGraphqlClient.request<
          FetchTutorialsQuery,
          FetchTutorialsQueryVariables
        >(tutorialsQuery, { take, skip });
      return queryTutorialsContentsWithTotal;
    });

  const fetchData = async (): Promise<TutorialItem[]> => {
    const entries = await fetchAllData();
    logger(`Loaded ${entries.length} entries...`, 'INFO');
    return entries;
  };

  const parseTutorialsItem = async (page: TutorialItem) => {
    const { flatData: squidexTutorialItem, id, created } = page;

    const { title, shortText, link, linkText, text, thumbnail } =
      squidexTutorialItem;

    const payload = {
      title,
      shortText,
      link,
      linkText,
      text: null as Document | null,
    };

    let thumbnailAsset;
    if (thumbnail) {
      const urls = createAssetUrl(thumbnail.map((asset) => asset.id));
      if (urls.length > 0) {
        thumbnailAsset = await createAsset(contentfulEnvironment, [
          { ...thumbnail[0], thumbnailUrl: urls[0] },
        ]);
      }
    }

    return {
      id,
      ...payload,
      text: await createDocumentIfNeeded(contentfulEnvironment, text),
      thumbnail: thumbnailAsset,
      link: payload.link || null,
      publishDate: created,
    };
  };

  await migrateFromSquidexToContentful<TutorialItem>(
    'tutorials',
    fetchData,
    parseTutorialsItem,
    true,
  );
};
