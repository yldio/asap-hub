import { Users, SysLink, addLocaleToFields } from '@asap-hub/contentful';
import { usersQuery } from './users.queries';
import {
  FetchUsersQuery,
  FetchUsersQueryVariables,
} from '../autogenerated-gql/graphql';
import {
  getSquidexAndContentfulClients,
  clearContentfulEntries,
  logger,
  createAssetUrl,
  createAsset,
  paginatedFetch,
} from '../utils';
import { migrateFromSquidexToContentfulFactory } from '../utils/migration';
import { date } from '../utils/normalise';
import { contentfulRateLimiter } from '../contentful-rate-limiter';

type UserItem = NonNullable<
  NonNullable<FetchUsersQuery['queryUsersContentsWithTotal']>['items']
>[number];
type ContentfulUser = Omit<Users, 'sys' | 'contentfulMetadata' | 'avatar'> & {
  id: string;
  avatar: SysLink | undefined;
};
type SocialLinks = Partial<NonNullable<UserItem['flatData']['social']>[number]>;

export const migrateUsers = async () => {
  const { contentfulEnvironment, squidexGraphqlClient } =
    await getSquidexAndContentfulClients();

  const migrateFromSquidexToContentful = migrateFromSquidexToContentfulFactory(
    contentfulEnvironment,
    logger,
  );

  await clearContentfulEntries(contentfulEnvironment, 'teamMembership');

  const fetchAllData = async (): Promise<UserItem[]> =>
    paginatedFetch<UserItem>(async (take: number, skip: number) => {
      const { queryUsersContentsWithTotal } =
        await squidexGraphqlClient.request<
          FetchUsersQuery,
          FetchUsersQueryVariables
        >(usersQuery, { take, skip });
      return queryUsersContentsWithTotal;
    });

  const fetchData = async (): Promise<UserItem[]> => {
    const entries = await fetchAllData();
    logger(`Loaded ${entries.length} entries...`, 'INFO');
    return entries;
  };

  const parseUserItem = async (user: UserItem): Promise<ContentfulUser> => {
    const { flatData: squidexUserItem, id, created } = user;

    const {
      avatar,
      connections,
      teams,
      questions,
      labs,
      orcidWorks: _orcidWorks,
      social,
      orcid,
      contactEmail,
      orcidLastSyncDate,
      orcidLastModifiedDate,
      ...props
    } = squidexUserItem;

    let avatarAsset;

    if (avatar) {
      const urls = createAssetUrl(avatar.map((asset) => asset.id));
      if (urls.length > 0) {
        avatarAsset = await createAsset(contentfulEnvironment, [
          { ...avatar[0], thumbnailUrl: urls[0] },
        ]);
      }
    }

    const teamLinks = await Promise.all(
      (teams || []).map(async (team) => {
        if (team.id && team.id.length) {
          const membership = await contentfulEnvironment.createEntry(
            'teamMembership',
            {
              fields: addLocaleToFields({
                role: team.role,
                inactiveSinceDate: team.inactiveSinceDate,
                team: {
                  sys: {
                    type: 'Link',
                    linkType: 'Entry',
                    id: team.id[0].id,
                  },
                },
              }),
            },
          );
          await contentfulRateLimiter.removeTokens(1);

          await membership.publish();
          await contentfulRateLimiter.removeTokens(1);
          return {
            sys: {
              type: 'Link',
              linkType: 'Entry',
              id: membership.sys.id,
            },
          };
        }
        return null;
      }),
    );

    const socialLinks: SocialLinks = social?.[0] || {};
    // these field have pattern validation that fails on an empty string
    // so replace empty values with null
    socialLinks.website1 = socialLinks.website1 || null;
    socialLinks.website2 = socialLinks.website2 || null;

    const userPayload = {
      ...props,
      ...socialLinks,
      createdDate: created,
      // these field have pattern validation that fails on an empty string
      // so replace empty values with null
      orcid: orcid || null,
      contactEmail: contactEmail || null,
      // fields are coded as a plain text input in Squidex, so normalise any non-datelike values
      orcidLastModifiedDate: date(orcidLastModifiedDate),
      orcidLastSyncDate: date(orcidLastSyncDate),
      questions: questions?.map(({ question }) => question) || null,
      connections: connections?.map(({ code }) => code) || null,
      labs:
        labs?.map((lab) => ({
          sys: {
            type: 'Link',
            linkType: 'Entry',
            id: lab.id,
          },
        })) || null,
      avatar: avatarAsset,
      teams: teamLinks.filter(Boolean),
    };

    return { id, ...userPayload };
  };

  await migrateFromSquidexToContentful<UserItem>(
    'users',
    fetchData,
    parseUserItem,
  );
};
