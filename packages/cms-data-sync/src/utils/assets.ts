/* eslint-disable no-console */

import { InlineAssetBody } from 'contentful-html-rich-text-converter';
import {
  Asset as ContentfulAsset,
  Environment,
  SysLink,
} from 'contentful-management';
import { Asset } from '../autogenerated-gql/graphql';

export const checkIfAssetAlreadyExistsInContentful = async (
  contentfulEnvironment: Environment,
  id: string,
) => {
  try {
    const asset = await contentfulEnvironment.getAsset(id);
    return !!asset;
  } catch (error) {
    if (error instanceof Error) {
      const errorParsed = JSON.parse(error?.message);
      if (errorParsed.status === 404) {
        return false;
      }
    }

    throw error;
  }
};

export const createInlineAssets = async (
  contentfulEnvironment: Environment,
  inlineAssetBodies: InlineAssetBody[],
) => {
  const assets = await Promise.all(
    inlineAssetBodies.map(async ([id, fields]) => {
      console.log(`Creating asset with id ${id}.`);
      const isAssetAlreadyInContentful =
        await checkIfAssetAlreadyExistsInContentful(contentfulEnvironment, id);
      if (!isAssetAlreadyInContentful) {
        console.log(`Creating asset with id ${id}.`);
        return contentfulEnvironment.createAssetWithId(id, fields);
      }
      return null;
    }),
  );

  console.log(assets);

  await Promise.all(
    assets
      .filter((asset): asset is ContentfulAsset => asset !== null)
      .map(async (asset) => {
        const processedAsset = await asset.processForAllLocales();
        processedAsset.publish();
      }),
  );
};

export const migrateAsset = async (
  contentfulEnvironment: Environment,
  thumbnail: Pick<
    Asset,
    'id' | 'fileName' | 'thumbnailUrl' | 'mimeType' | 'fileType'
  >[],
) => {
  const assets = await Promise.all(
    thumbnail.map(
      async ({ id, fileName, thumbnailUrl, mimeType, fileType }) => {
        const isAssetAlreadyInContentful =
          await checkIfAssetAlreadyExistsInContentful(
            contentfulEnvironment,
            id,
          );
        if (!isAssetAlreadyInContentful && thumbnailUrl) {
          console.log(`Creating asset with id ${id}.`);

          return contentfulEnvironment.createAssetWithId(id, {
            fields: {
              title: {
                'en-US': fileName.replace(`.${fileType}`, ''),
              },
              file: {
                'en-US': {
                  contentType: mimeType,
                  fileName,
                  upload: thumbnailUrl,
                },
              },
            },
          });
        }

        return null;
      },
    ),
  );

  await Promise.all(
    assets
      .filter((asset): asset is ContentfulAsset => asset !== null)
      .map(async (asset) => {
        const processedAsset = await asset.processForAllLocales();
        processedAsset.publish();
      }),
  );
};

export const createAsset = async (
  contentfulEnvironment: Environment,
  asset: Pick<
    Asset,
    'id' | 'fileName' | 'thumbnailUrl' | 'mimeType' | 'fileType'
  >[],
): Promise<SysLink> => {
  await migrateAsset(contentfulEnvironment, asset);
  return {
    sys: {
      type: 'Link',
      linkType: 'Asset',
      // in thumbnail it's possible to load only one asset
      id: asset[0]?.id,
    },
  };
};
