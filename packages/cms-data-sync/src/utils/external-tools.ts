import { addLocaleToFields } from '@asap-hub/contentful';
import { TeamTool } from '@asap-hub/model';
import { Environment, SysLink } from 'contentful-management';
import { TeamsDataToolsChildDto } from '../autogenerated-gql/graphql';
import { logger } from './logs';

export const createExternalTool = async (
  contentfulEnvironment: Environment,
  tools: TeamTool[],
) => {
  const publishedTools = await Promise.all(
    tools.map(async (tool) => {
      const entry = await contentfulEnvironment.createEntry('externalTools', {
        fields: addLocaleToFields(tool),
      });
      return entry.publish();
    }),
  );

  return publishedTools;
};

export const createExternalToolLinks = async (
  contentfulEnvironment: Environment,
  tools: Pick<TeamsDataToolsChildDto, 'description' | 'name' | 'url'>[],
  teamId: string,
): Promise<SysLink[]> => {
  const cleanTools = tools.reduce((toolsWithValidURLs: TeamTool[], tool) => {
    const regex = new RegExp(
      '^(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?$',
    );

    if (tool.url && !regex.test(tool.url)) {
      logger(
        `Invalid tool URL (${tool.url}) linked to team with id: ${teamId}`,
        'ERROR',
      );
      return toolsWithValidURLs;
    }

    toolsWithValidURLs.push({
      name: tool.name ?? '',
      url: tool.url ?? '',
      ...(tool.description ? { description: tool.description } : {}),
    });
    return toolsWithValidURLs;
  }, []);

  const contentfulPublishedTools = await createExternalTool(
    contentfulEnvironment,
    cleanTools,
  );
  return contentfulPublishedTools.map((contentfulPublishedTool) => ({
    sys: {
      type: 'Link',
      linkType: 'Entry',
      id: contentfulPublishedTool.sys.id,
    },
  }));
};
