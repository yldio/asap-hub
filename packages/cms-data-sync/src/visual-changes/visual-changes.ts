/* istanbul ignore file */
/* eslint-disable no-param-reassign */
/* eslint-disable no-console */
/* eslint-disable @typescript-eslint/no-non-null-assertion */

// import { getAccessTokenFactory, SquidexGraphql } from '@asap-hub/squidex';
/* eslint-disable-next-line import/no-unresolved */
import puppeteer, { Page } from 'puppeteer';
import fs from 'fs';
import pixelmatch from 'pixelmatch';
import { PNG, PNGWithMetadata } from 'pngjs';
// import {
//   FetchResearchOutputIdsQuery,
//   FetchResearchOutputIdsQueryVariables,
// } from '../autogenerated-gql/graphql';
// import { researchOutputIdsQuery } from './visual-changes.queries';

const {
  PR_URL,
  CMS_MIGRATION_USER_EMAIL,
  CMS_MIGRATION_USER_PASSWORD,
  // CRN_SQUIDEX_CLIENT_ID,
  // CRN_SQUIDEX_CLIENT_SECRET,
  // SQUIDEX_BASE_URL,
} = process.env;

const PROD_URL = 'https://hub.asap.science';

const takeScreenshot = async (page: Page, filePath: string) => {
  await page.screenshot({ path: filePath, fullPage: true });
};

const resizeIfNeeded = (
  img: PNGWithMetadata,
  maxHeight: number,
  maxWidth: number,
) => {
  if (img.height === maxHeight && img.width === maxWidth) return;

  const imageCopy = Buffer.alloc(maxHeight * maxWidth * 4);
  img.data.copy(imageCopy);

  img.height = maxHeight;
  img.width = maxWidth;
  img.data = imageCopy;
};

const compareImages = async (
  imagePath1: string,
  imagePath2: string,
  diffPath: string,
) => {
  const img1 = PNG.sync.read(fs.readFileSync(imagePath1));
  const img2 = PNG.sync.read(fs.readFileSync(imagePath2));

  const maxHeight = img1.height > img2.height ? img1.height : img2.height;
  const maxWidth = img1.width > img2.width ? img1.width : img2.width;

  resizeIfNeeded(img1, maxHeight, maxWidth);
  resizeIfNeeded(img2, maxHeight, maxWidth);

  const diff = new PNG({ width: maxWidth, height: maxHeight });

  const numDiffPixels = pixelmatch(
    img1.data,
    img2.data,
    diff.data,
    maxWidth,
    maxHeight,
    { threshold: 0.1 },
  );

  fs.writeFileSync(diffPath, PNG.sync.write(diff));

  return numDiffPixels;
};

const login = async (page: Page) => {
  const signInButtonHome = 'button[type="submit"]';
  await page.waitForSelector(signInButtonHome);
  await page.click(signInButtonHome);

  await page.waitForNavigation({ waitUntil: 'networkidle0' });

  const emailInputSelector = 'input[type="email"]';
  await page.waitForSelector(emailInputSelector);
  await page.type(emailInputSelector, CMS_MIGRATION_USER_EMAIL!);

  const passwordInputSelector = 'input[type="password"]';
  await page.waitForSelector(passwordInputSelector);
  await page.type(passwordInputSelector, CMS_MIGRATION_USER_PASSWORD!);

  const signInButtonLoginPage = 'button[type="submit"]';
  await page.waitForSelector(signInButtonLoginPage);
  await page.click(signInButtonLoginPage);

  await page.waitForNavigation({ waitUntil: 'networkidle0' });

  await new Promise((r) => setTimeout(r, 5000));
};

(async () => {
  // const getAuthToken = getAccessTokenFactory({
  //   clientId: CRN_SQUIDEX_CLIENT_ID!,
  //   clientSecret: CRN_SQUIDEX_CLIENT_SECRET!,
  //   baseUrl: SQUIDEX_BASE_URL!,
  // });

  // const squidexGraphqlClient = new SquidexGraphql(getAuthToken, {
  //   appName: 'asap-hub',
  //   baseUrl: SQUIDEX_BASE_URL!,
  // });

  // const { queryResearchOutputsContentsWithTotal } =
  //   await squidexGraphqlClient.request<
  //     FetchResearchOutputIdsQuery,
  //     FetchResearchOutputIdsQueryVariables
  //   >(researchOutputIdsQuery);

  // console.log(
  //   'Total research outputs:',
  //   queryResearchOutputsContentsWithTotal?.total,
  // );

  // const researchOutputIds = (
  //   queryResearchOutputsContentsWithTotal?.items || []
  // ).map((item) => item.id);

  const researchOutputIds = [
    '465d8240-75a7-4e5c-a80f-2c5a47948828',
    'f8560029-8c36-4108-852a-3cabcdce8645',
    'f0a69c58-666d-4a28-8fd9-56529c0f1914',
    'c36b49e8-1938-4c91-ba56-1596aecdeee1',
    'e1c5bac1-6528-46cd-9ebf-129c490a1703',
    '100f57e3-6846-464c-8b77-01c0080a35ac',
    'fbcacbad-b4f2-42f1-a6f1-8627fe35eaa1',
    '79f4e2a7-e451-4112-99a4-a5c8620647b5',
    'b8e83b10-f5ea-4996-b5b0-2b2f5d8ba0ac',
    'be696734-ab87-46c6-91ae-b100a2865b1a',
    'a3fd3949-950c-4749-89fa-86d6dbb6d4a0',
    'c9dfcd57-cc31-4a32-9463-014094081a90',
    'd4e08221-edcb-4b2c-8883-790f9eebbf77',
    'af5b8057-3345-416b-b175-17934e35217b',
    '495e63ec-40f7-4d5e-9699-a13101b3ef80',
    'f5e38357-0cec-4ed1-9013-eb3aa6c778b6',
    '3849d407-7395-49f4-abf2-4782b1abff22',
    'fff7004f-8337-4d02-968d-75386aa97d08',
    '3f03ae39-8738-4b18-bb12-4cb5887e0805',
    'c969d244-b2dd-4ae7-b098-85fafe55fb3a',
    'c9b40052-04e3-4b6d-9d69-7365c61cdf27',
    'a5b455a7-b26e-4005-b785-b4e8dd761f62',
    'd321383c-d08e-4916-b978-ef6977090fbd',
    '6d2ce44a-ef9b-4ddb-8b11-87b707b6d7a0',
  ];

  fs.mkdir('screenshots', (err) => {
    if (err) {
      console.error(err);
    }
  });

  const nonMatchingResearchOutputIds: string[] = [];
  try {
    const browser = await puppeteer.launch({ headless: false });
    const page = await browser.newPage();

    for (let i = 0; i < researchOutputIds.length; i += 1) {
      const researchOutputId = researchOutputIds[i];
      console.log(`Analyzing research Output: ${researchOutputId}...`);

      const prEnvScreenshotFilename = `screenshots/${researchOutputId}_pr.png`;
      const prodScreenshotFilename = `screenshots/${researchOutputId}_prod.png`;
      const diffScreenshotFilename = `screenshots/${researchOutputId}_diff.png`;

      await page.goto(`${PR_URL}/shared-research/${researchOutputId}`, {
        waitUntil: 'networkidle0',
      });
      if (i === 0) {
        await login(page);
      }
      await takeScreenshot(page, prEnvScreenshotFilename);

      await page.goto(`${PROD_URL}/shared-research/${researchOutputId}`, {
        waitUntil: 'networkidle0',
      });
      if (i === 0) {
        await login(page);
      }
      await takeScreenshot(page, prodScreenshotFilename);

      const numDiffPixels = await compareImages(
        prEnvScreenshotFilename,
        prodScreenshotFilename,
        diffScreenshotFilename,
      );

      if (numDiffPixels > 0) {
        nonMatchingResearchOutputIds.push(researchOutputId);
      } else {
        for (const file of [
          prEnvScreenshotFilename,
          prodScreenshotFilename,
          diffScreenshotFilename,
        ]) {
          fs.unlink(file, (err) => {
            if (err) {
              console.log(
                'Error deleting screenshot from a matching research output',
                err,
              );
            }
          });
        }
      }

      console.log(`Number of different pixels: ${numDiffPixels}`);
    }
    await browser.close();
  } catch (error) {
    console.error('Error:', error);
  }
  console.log(
    'Number of non matching research outputs',
    nonMatchingResearchOutputIds.length,
  );
  console.log('nonMatchingResearchOutputIds', nonMatchingResearchOutputIds);

  fs.writeFile(
    'nonMatchingResearchOutputIds.json',
    JSON.stringify(nonMatchingResearchOutputIds),
    (err) => {
      if (err)
        console.log('Error creating nonMatchingResearchOutputIds.json', err);
    },
  );
})();
