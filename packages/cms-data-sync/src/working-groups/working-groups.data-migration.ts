import { addLocaleToFields, createLink, Entry } from '@asap-hub/contentful';
import { workingGroupsQuery as squidexWorkingGroupsQuery } from './working-groups.queries';
import {
  FetchWorkingGroupsQuery as SquidexFetchWorkingGroupsQuery,
  FetchWorkingGroupsQueryVariables as SquidexFetchWorkingGroupsQueryVariables,
} from '../autogenerated-gql/graphql';
import {
  createDocumentIfNeeded,
  getSquidexAndContentfulClients,
  logger,
  paginatedFetch,
  createCalendarLink,
  clearContentfulEntries,
} from '../utils';
import { migrateFromSquidexToContentfulFactory } from '../utils/migration';

export type WorkingGroupItem = NonNullable<
  NonNullable<
    SquidexFetchWorkingGroupsQuery['queryWorkingGroupsContentsWithTotal']
  >['items']
>[number];

export const migrateWorkingGroups = async () => {
  const { contentfulEnvironment, squidexGraphqlClient } =
    await getSquidexAndContentfulClients();

  await clearContentfulEntries(
    contentfulEnvironment,
    'workingGroupDeliverables',
  );

  await clearContentfulEntries(contentfulEnvironment, 'workingGroupLeaders');

  await clearContentfulEntries(contentfulEnvironment, 'workingGroupMembers');

  const migrateFromSquidexToContentful = migrateFromSquidexToContentfulFactory(
    contentfulEnvironment,
    logger,
  );
  const fetchAllData = async (): Promise<WorkingGroupItem[]> =>
    paginatedFetch<WorkingGroupItem>(async (take: number, skip: number) => {
      const { queryWorkingGroupsContentsWithTotal } =
        await squidexGraphqlClient.request<
          SquidexFetchWorkingGroupsQuery,
          SquidexFetchWorkingGroupsQueryVariables
        >(squidexWorkingGroupsQuery, { take, skip });
      return queryWorkingGroupsContentsWithTotal;
    });

  const fetchData = async () => {
    const entries = await fetchAllData();
    logger(`Loaded ${entries.length} entries...`, 'INFO');
    return entries;
  };

  const parseWorkingGroupItem = async (workingGroup: WorkingGroupItem) => {
    const {
      id,
      lastModified,
      flatData: {
        description,
        calendars,
        deliverables,
        leaders,
        members,
        ...squidexFlatData
      },
    } = workingGroup;

    const deliverableEntries = await Promise.all(
      (deliverables || []).map(async (deliverable) => {
        const entry = await contentfulEnvironment.createEntry(
          'workingGroupDeliverables',
          {
            fields: addLocaleToFields(deliverable),
          },
        );

        return entry.publish();
      }),
    );

    const createMembersEntries = async (
      contentfulContentModel: string,
      squidexMemberData:
        | WorkingGroupItem['flatData']['leaders']
        | WorkingGroupItem['flatData']['members'],
    ) =>
      Promise.all(
        (squidexMemberData || []).map(async (memberData) => {
          if (memberData.user && memberData.user[0]) {
            const { user, ...memberDataFields } = memberData;
            const entry = await contentfulEnvironment.createEntry(
              contentfulContentModel,
              {
                fields: addLocaleToFields({
                  ...memberDataFields,
                  user: createLink(user[0].id),
                }),
              },
            );

            return entry.publish();
          }
          return null;
        }),
      );

    const leadersEntries = await createMembersEntries(
      'workingGroupLeaders',
      leaders,
    );

    const membersEntries = await createMembersEntries(
      'workingGroupMembers',
      members,
    );

    return {
      id,
      ...squidexFlatData,
      description: await createDocumentIfNeeded(
        contentfulEnvironment,
        description,
      ),
      calendars: calendars?.[0]?.id
        ? await createCalendarLink(
            contentfulEnvironment,
            calendars[0].id,
            `Working Group with id ${id} is going to be created without a linked calendar.`,
          )
        : null,
      deliverables: deliverableEntries.map((entry) => createLink(entry.sys.id)),
      members: [...leadersEntries, ...membersEntries]
        .filter((x): x is Entry => x !== null)
        .map((entry) => createLink(entry.sys.id)),
      lastUpdated: lastModified,
    };
  };

  await migrateFromSquidexToContentful<WorkingGroupItem>(
    'workingGroups',
    fetchData,
    parseWorkingGroupItem,
  );
};
