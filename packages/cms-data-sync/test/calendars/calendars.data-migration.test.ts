import { SquidexGraphqlClient } from '@asap-hub/squidex';
import { Environment } from 'contentful-management';
import { migrateCalendars } from '../../src/calendars/calendars.data-migration';
import { calendarEntry } from '../fixtures';
import {
  clearContentfulEntries,
  publishContentfulEntries,
  getSquidexAndContentfulClients,
} from '../../src/utils';
import { getContentfulEnvironmentMock } from '../mocks/contentful.mocks';
import { FetchCalendarsQuery } from '../../src/autogenerated-gql/graphql';

jest.mock('../../src/utils/setup');
jest.mock('../../src/utils/entries');

const getCalendarSquidexResponse: () => NonNullable<
  FetchCalendarsQuery['queryCalendarsContents']
>[number] = () => ({
  id: 'calendar-1',
  status: 'PUBLISHED',
  flatData: {
    googleCalendarId: '3@group.calendar.google.com',
    color: '#2952A3',
    name: 'Tech 4a - iPSCs - 3D & Co-cultures',
  },
});

const squidexResponse: FetchCalendarsQuery = {
  queryCalendarsContents: [getCalendarSquidexResponse()],
};

describe('Migrate calendars', () => {
  let contenfulEnv: Environment;
  let squidexGraphqlClientMock: jest.Mocked<SquidexGraphqlClient>;

  beforeEach(() => {
    contenfulEnv = getContentfulEnvironmentMock();
    squidexGraphqlClientMock = {
      request: jest.fn(),
    };

    (getSquidexAndContentfulClients as jest.Mock).mockResolvedValueOnce({
      contentfulEnvironment: contenfulEnv,
      squidexGraphqlClient: squidexGraphqlClientMock,
    });

    jest.spyOn(contenfulEnv, 'getEntries').mockResolvedValueOnce({
      total: 1,
      items: [calendarEntry],
      skip: 0,
      limit: 10,
      toPlainObject: jest.fn(),
      sys: { type: 'Array' },
    });

    jest
      .spyOn(calendarEntry, 'publish')
      .mockImplementationOnce(() => Promise.resolve(calendarEntry));
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('clears contentful calendars entries', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(squidexResponse);

    await migrateCalendars();

    const clearContentfulEntriesMock = clearContentfulEntries as jest.Mock;
    expect(clearContentfulEntriesMock).toHaveBeenCalledTimes(1);
    expect(clearContentfulEntriesMock).toHaveBeenCalledWith(
      expect.anything(),
      'calendars',
    );
  });

  it('creates a calendar entry', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(squidexResponse);

    await migrateCalendars();

    expect(contenfulEnv.createEntryWithId).toHaveBeenCalledWith(
      'calendars',
      'calendar-1',
      {
        fields: {
          color: { 'en-US': '#2952A3' },
          googleCalendarId: { 'en-US': '3@group.calendar.google.com' },
          name: { 'en-US': 'Tech 4a - iPSCs - 3D & Co-cultures' },
        },
      },
    );
  });

  it('does not fail if squidex does not return anything', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce({});
    const publishContentfulEntriesMock = publishContentfulEntries as jest.Mock;

    await migrateCalendars();

    expect(contenfulEnv.createEntryWithId).not.toHaveBeenCalled();
    expect(publishContentfulEntriesMock).toHaveBeenCalled();
  });

  it('publish contentful entries', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(squidexResponse);
    const publishContentfulEntriesMock = publishContentfulEntries as jest.Mock;

    await migrateCalendars();

    expect(publishContentfulEntriesMock).toHaveBeenCalled();
  });
});
