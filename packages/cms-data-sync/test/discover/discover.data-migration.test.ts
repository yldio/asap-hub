import { SquidexGraphqlClient, createUrlFactory } from '@asap-hub/squidex';
import { Environment } from 'contentful-management';
import { migrateDiscover } from '../../src/discover/discover.data-migration';
import { getEntry, discoverEntry } from '../fixtures';
import {
  clearContentfulEntries,
  publishContentfulEntries,
  getSquidexAndContentfulClients,
} from '../../src/utils';
import { getContentfulEnvironmentMock } from '../mocks/contentful.mocks';
import { FetchDiscoverQuery } from '../../src/autogenerated-gql/graphql';

jest.mock('../../src/utils/setup');
jest.mock('../../src/utils/entries');

const getDiscoverSquidex: (
  props: Record<string, unknown>,
) => FetchDiscoverQuery['queryDiscoverContents']['items'][number] = (
  props = {},
) => ({
  id: 'discover-1',
  created: '2023-03-15T00:00:00.0000Z',
  lastModified: '2023-03-15T00:00:00.0000Z',
  version: 10,
  status: 'PUBLISHED',
  flatData: {
    training: [{ id: 'tutorial-1' }, { id: 'tutorial-2' }],
    members: [{ id: 'member-1' }, { id: 'member-2' }],
    membersTeam: [{ id: 'team-1' }],
    scientificAdvisoryBoard: [{ id: 'sab-1' }, { id: 'sab-2' }],
    pages: [{ id: 'page-1' }, { id: 'page-2' }],
    aboutUs: '<p>Hello world</p>',
    ...props,
  },
});

const getDiscoverSquidexResponse: (
  props: Record<string, unknown>,
) => NonNullable<FetchDiscoverQuery['queryDiscoverContents']> = (props) => ({
  queryDiscoverContents: [getDiscoverSquidex(props)],
});

describe('Migrate discover page', () => {
  let contentfulEnv: Environment;
  let squidexGraphqlClientMock: jest.Mocked<SquidexGraphqlClient>;

  const consoleLogRef = console.log;

  beforeEach(() => {
    console.log = jest.fn();

    contentfulEnv = getContentfulEnvironmentMock();
    contentfulEnv.createEntryWithId.mockResolvedValue(discoverEntry);
    squidexGraphqlClientMock = {
      request: jest.fn(),
    };

    (getSquidexAndContentfulClients as jest.Mock).mockResolvedValueOnce({
      contentfulEnvironment: contentfulEnv,
      squidexGraphqlClient: squidexGraphqlClientMock,
    });

    jest.spyOn(contentfulEnv, 'getEntries').mockResolvedValueOnce({
      total: 1,
      items: [discoverEntry],
      skip: 0,
      limit: 10,
      toPlainObject: jest.fn(),
      sys: { type: 'Array' },
    });

    jest
      .spyOn(discoverEntry, 'publish')
      .mockImplementationOnce(() => Promise.resolve(discoverEntry));
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  afterAll(() => {
    console.log = consoleLogRef;
  });

  it('clears contentful discover entries', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getDiscoverSquidexResponse(),
    );

    await migrateDiscover();

    const clearContentfulEntriesMock = clearContentfulEntries as jest.Mock;
    expect(clearContentfulEntriesMock).toHaveBeenCalledTimes(1);
    expect(clearContentfulEntriesMock).toHaveBeenCalledWith(
      expect.anything(),
      'discover',
    );
  });

  it('does not fail if no data in squidex', async () => {
    squidexGraphqlClientMock.request.mockResolvedValue({
      queryDiscoverContents: null,
    });

    await migrateDiscover();

    expect(contentfulEnv.createEntryWithId).not.toHaveBeenCalled();
  });

  it('does not fail if entries are null', async () => {
    squidexGraphqlClientMock.request.mockResolvedValue(
      getDiscoverSquidexResponse({ members: null }),
    );

    await migrateDiscover();

    expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
      'discover',
      'discover-1',
      {
        fields: expect.objectContaining({
          members: {
            'en-US': [],
          },
        }),
      },
    );
  });

  describe('creates contentful entries', () => {
    it('for a tutorial', async () => {
      squidexGraphqlClientMock.request.mockResolvedValueOnce(
        getDiscoverSquidexResponse(),
      );

      await migrateDiscover();

      const textDocument = {
        content: [
          {
            content: [
              {
                data: {},
                marks: [],
                value: 'Hello world',
                nodeType: 'text',
              },
            ],
            data: {},
            nodeType: 'paragraph',
          },
        ],
        data: {},
        nodeType: 'document',
      };

      expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
        'discover',
        'discover-1',
        {
          fields: {
            training: {
              'en-US': [
                { sys: { id: 'tutorial-1', linkType: 'Entry', type: 'Link' } },
                { sys: { id: 'tutorial-2', linkType: 'Entry', type: 'Link' } },
              ],
            },
            members: {
              'en-US': [
                { sys: { id: 'member-1', linkType: 'Entry', type: 'Link' } },
                { sys: { id: 'member-2', linkType: 'Entry', type: 'Link' } },
              ],
            },
            membersTeam: {
              'en-US': {
                sys: { id: 'team-1', linkType: 'Entry', type: 'Link' },
              },
            },
            scientificAdvisoryBoard: {
              'en-US': [
                { sys: { id: 'sab-1', linkType: 'Entry', type: 'Link' } },
                { sys: { id: 'sab-2', linkType: 'Entry', type: 'Link' } },
              ],
            },
            pages: {
              'en-US': [
                { sys: { id: 'page-1', linkType: 'Entry', type: 'Link' } },
                { sys: { id: 'page-2', linkType: 'Entry', type: 'Link' } },
              ],
            },
            aboutUs: { 'en-US': textDocument },
          },
        },
      );
    });
  });

  it('only migrates one team if it finds multiple', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getDiscoverSquidexResponse({
        membersTeam: [{ id: 'team-1' }, { id: 'team-2' }],
      }),
    );

    await migrateDiscover();

    expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
      'discover',
      'discover-1',
      {
        fields: expect.objectContaining({
          membersTeam: {
            'en-US': {
              sys: { id: 'team-1', linkType: 'Entry', type: 'Link' },
            },
          },
        }),
      },
    );
  });

  it('filters out null entries', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getDiscoverSquidexResponse({
        members: [{ id: 'user-1' }, null, { id: 'user-2' }],
      }),
    );

    await migrateDiscover();

    expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
      'discover',
      'discover-1',
      {
        fields: expect.objectContaining({
          members: {
            'en-US': [
              { sys: { id: 'user-1', linkType: 'Entry', type: 'Link' } },
              { sys: { id: 'user-2', linkType: 'Entry', type: 'Link' } },
            ],
          },
        }),
      },
    );
  });

  it('publishes contentful entries', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getDiscoverSquidexResponse(),
    );
    const publishContentfulEntriesMock = publishContentfulEntries as jest.Mock;

    await migrateDiscover();

    expect(publishContentfulEntriesMock).toHaveBeenCalledWith([discoverEntry]);
  });
});
