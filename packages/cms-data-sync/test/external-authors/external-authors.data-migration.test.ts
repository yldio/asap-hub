/* eslint-disable no-console */
import { SquidexGraphqlClient } from '@asap-hub/squidex';
import { Environment } from 'contentful-management';
import { migrateExternalAuthors } from '../../src/external-authors/external-authors.data-migration';
import { externalAuthorEntry } from '../fixtures';
import {
  clearContentfulEntries,
  publishContentfulEntries,
  getSquidexAndContentfulClients,
} from '../../src/utils';
import { getContentfulEnvironmentMock } from '../mocks/contentful.mocks';
import { FetchExternalAuthorsQuery } from '../../src/autogenerated-gql/graphql';

jest.mock('../../src/utils/setup');
jest.mock('../../src/utils/entries');

const getExternalAuthorSquidexResponse: () => NonNullable<
  FetchExternalAuthorsQuery['queryExternalAuthorsContents']
>[number] = () => ({
  id: 'external-author-1',
  status: 'PUBLISHED',
  flatData: {
    name: 'External Person',
    orcid: '0000-0000-0000-0000',
  },
});

const externalAuthorWithOrcid = getExternalAuthorSquidexResponse();
const squidexResponseWithOrcid: FetchExternalAuthorsQuery = {
  queryExternalAuthorsContentsWithTotal: {
    total: 1,
    items: [externalAuthorWithOrcid],
  },
};

const externalAuthorWithoutOrcid = getExternalAuthorSquidexResponse();
externalAuthorWithoutOrcid.flatData.orcid = null;
const squidexResponseWithoutOrcid: FetchExternalAuthorsQuery = {
  queryExternalAuthorsContentsWithTotal: {
    total: 1,
    items: [externalAuthorWithoutOrcid],
  },
};

describe('Migrate external authors', () => {
  let contenfulEnv: Environment;
  let squidexGraphqlClientMock: jest.Mocked<SquidexGraphqlClient>;

  const consoleLogRef = console.log;

  beforeEach(() => {
    console.log = jest.fn();

    contenfulEnv = getContentfulEnvironmentMock();
    squidexGraphqlClientMock = {
      request: jest.fn(),
    };

    (getSquidexAndContentfulClients as jest.Mock).mockResolvedValueOnce({
      contentfulEnvironment: contenfulEnv,
      squidexGraphqlClient: squidexGraphqlClientMock,
    });

    jest.spyOn(contenfulEnv, 'getEntries').mockResolvedValueOnce({
      total: 1,
      items: [externalAuthorEntry],
      skip: 0,
      limit: 10,
      toPlainObject: jest.fn(),
      sys: { type: 'Array' },
    });

    jest
      .spyOn(externalAuthorEntry, 'publish')
      .mockImplementationOnce(() => Promise.resolve(externalAuthorEntry));
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  afterAll(() => {
    console.log = consoleLogRef;
  });

  it('clears contentful externalAuthors entries', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      squidexResponseWithOrcid,
    );

    await migrateExternalAuthors();

    const clearContentfulEntriesMock = clearContentfulEntries as jest.Mock;
    expect(clearContentfulEntriesMock).toHaveBeenCalledTimes(1);
    expect(clearContentfulEntriesMock).toHaveBeenCalledWith(
      expect.anything(),
      'externalAuthors',
    );
  });

  it('fetches all pages of data from squidex', async () => {
    squidexGraphqlClientMock.request.mockResolvedValue({
      queryExternalAuthorsContentsWithTotal: {
        total: 200,
        items: Array(100).fill(externalAuthorWithOrcid),
      },
    });

    await migrateExternalAuthors();

    expect(squidexGraphqlClientMock.request).toHaveBeenCalledWith(
      expect.anything(),
      { take: 100, skip: 0 },
    );
    expect(squidexGraphqlClientMock.request).toHaveBeenCalledWith(
      expect.anything(),
      { take: 100, skip: 100 },
    );
  }, 100000);

  describe('creates contentful entries', () => {
    it('for an external author that does not contain orcid number', async () => {
      squidexGraphqlClientMock.request.mockResolvedValueOnce(
        squidexResponseWithoutOrcid,
      );

      await migrateExternalAuthors();

      expect(contenfulEnv.createEntryWithId).toHaveBeenCalledWith(
        'externalAuthors',
        'external-author-1',
        {
          fields: {
            name: { 'en-US': 'External Person' },
            orcid: { 'en-US': null },
          },
        },
      );
    });

    it('for an external author that contains orcid number', async () => {
      squidexGraphqlClientMock.request.mockResolvedValueOnce(
        squidexResponseWithOrcid,
      );

      await migrateExternalAuthors();

      expect(contenfulEnv.createEntryWithId).toHaveBeenCalledWith(
        'externalAuthors',
        'external-author-1',
        {
          fields: {
            name: { 'en-US': 'External Person' },
            orcid: { 'en-US': '0000-0000-0000-0000' },
          },
        },
      );
    });
  });

  it('outputs an error message when trying to input an external author with invalid orcid number and publishes it without the orcid number', async () => {
    const externalAuthorWithInvalidOrcid = getExternalAuthorSquidexResponse();
    externalAuthorWithInvalidOrcid.id = 'invalid-external-author-orcid';
    externalAuthorWithInvalidOrcid.flatData.orcid = '1-2-3-4';
    const squidexResponseWithInvalidOrcid: FetchExternalAuthorsQuery = {
      queryExternalAuthorsContentsWithTotal: {
        total: 1,
        items: [externalAuthorWithInvalidOrcid],
      },
    };

    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      squidexResponseWithInvalidOrcid,
    );
    await migrateExternalAuthors();

    expect(console.log).toHaveBeenCalledWith(
      '\x1b[31m',
      '[ERROR] Invalid ORCID number (1-2-3-4) linked to external author with id: invalid-external-author-orcid',
    );

    expect(contenfulEnv.createEntryWithId).toHaveBeenCalledWith(
      'externalAuthors',
      'invalid-external-author-orcid',
      {
        fields: {
          name: { 'en-US': 'External Person' },
          orcid: { 'en-US': null },
        },
      },
    );
  });

  it('does not fail if squidex does not return anything', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce({});
    const publishContentfulEntriesMock = publishContentfulEntries as jest.Mock;

    await migrateExternalAuthors();

    expect(contenfulEnv.createEntryWithId).not.toHaveBeenCalled();
    expect(publishContentfulEntriesMock).toHaveBeenCalled();
  });

  it('publish contentful entries', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      squidexResponseWithOrcid,
    );
    const publishContentfulEntriesMock = publishContentfulEntries as jest.Mock;

    await migrateExternalAuthors();

    expect(publishContentfulEntriesMock).toHaveBeenCalled();
  });
});
