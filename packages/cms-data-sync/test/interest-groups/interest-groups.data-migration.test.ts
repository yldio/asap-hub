import { SquidexGraphqlClient, createUrlFactory } from '@asap-hub/squidex';
import { Environment } from 'contentful-management';
import { migrateInterestGroups } from '../../src/interest-groups/interest-groups.data-migration';
import {
  getEntry,
  interestGroupEntry,
  interestGroupLeaderEntry,
  contenfulAsset,
} from '../fixtures';
import {
  clearContentfulEntries,
  createAsset,
  createAssetUrl,
  publishContentfulEntries,
  getSquidexAndContentfulClients,
} from '../../src/utils';
import { getContentfulEnvironmentMock } from '../mocks/contentful.mocks';
import { FetchGroupsQuery } from '../../src/autogenerated-gql/graphql';

const mockCreateAssetUrl = createUrlFactory({
  appName: 'test',
  baseUrl: 'https://test.squidex.io',
});

jest.mock('../../src/utils/setup');
jest.mock('../../src/utils/assets-and-media');
jest.mock('../../src/utils/entries');

createAssetUrl.mockImplementation(mockCreateAssetUrl);

const getInterestGroupSquidex: (
  props: Record<string, unknown>,
) => FetchGroupsQuery['queryGroupsContentsWithTotal']['items'][number] = (
  props = {},
) => ({
  id: 'group-1',
  created: '2023-03-15T00:00:00.0000Z',
  lastModified: '2023-03-15T00:00:00.0000Z',
  version: 10,
  flatData: {
    name: 'Test Group',
    description: 'Group description',
    active: true,
    ...props,
  },
});

const getInterestGroupSquidexResponse: (
  props: Record<string, unknown>,
) => NonNullable<FetchGroupsQuery['queryGroupsContentsWithTotal']> = (
  props,
) => ({
  queryGroupsContentsWithTotal: {
    total: 1,
    items: [getInterestGroupSquidex(props)],
  },
});

describe('Migrate interest groups', () => {
  let contentfulEnv: Environment;
  let squidexGraphqlClientMock: jest.Mocked<SquidexGraphqlClient>;

  const consoleLogRef = console.log;

  beforeEach(() => {
    console.log = jest.fn();

    contentfulEnv = getContentfulEnvironmentMock();
    contentfulEnv.createEntryWithId.mockResolvedValue(interestGroupEntry);
    squidexGraphqlClientMock = {
      request: jest.fn(),
    };

    (getSquidexAndContentfulClients as jest.Mock).mockResolvedValueOnce({
      contentfulEnvironment: contentfulEnv,
      squidexGraphqlClient: squidexGraphqlClientMock,
    });

    jest.spyOn(contentfulEnv, 'getEntries').mockResolvedValueOnce({
      total: 1,
      items: [interestGroupEntry],
      skip: 0,
      limit: 10,
      toPlainObject: jest.fn(),
      sys: { type: 'Array' },
    });

    jest
      .spyOn(interestGroupEntry, 'publish')
      .mockImplementationOnce(() => Promise.resolve(interestGroupEntry));
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  afterAll(() => {
    console.log = consoleLogRef;
  });

  it('clears contentful interestGroups and interestGroupLeaders entries', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getInterestGroupSquidexResponse(),
    );

    await migrateInterestGroups();

    const clearContentfulEntriesMock = clearContentfulEntries as jest.Mock;
    expect(clearContentfulEntriesMock).toHaveBeenCalledTimes(2);
    expect(clearContentfulEntriesMock).toHaveBeenNthCalledWith(
      1,
      expect.anything(),
      'interestGroupLeaders',
    );
    expect(clearContentfulEntriesMock).toHaveBeenNthCalledWith(
      2,
      expect.anything(),
      'interestGroups',
    );
  });

  it('fetches all pages of data from squidex', async () => {
    squidexGraphqlClientMock.request.mockResolvedValue({
      queryGroupsContentsWithTotal: {
        total: 200,
        items: Array(100).fill(getInterestGroupSquidex()),
      },
    });

    await migrateInterestGroups();

    expect(squidexGraphqlClientMock.request).toHaveBeenCalledWith(
      expect.anything(),
      { take: 100, skip: 0 },
    );
    expect(squidexGraphqlClientMock.request).toHaveBeenCalledWith(
      expect.anything(),
      { take: 100, skip: 100 },
    );
  }, 100000);

  it('does not fail if no data in squidex', async () => {
    squidexGraphqlClientMock.request.mockResolvedValue({
      queryGroupsContentsWithTotal: null,
    });

    await migrateInterestGroups();

    expect(contentfulEnv.createEntryWithId).not.toHaveBeenCalled();
  });

  describe('creates contentful entries', () => {
    it('for a group', async () => {
      squidexGraphqlClientMock.request.mockResolvedValueOnce(
        getInterestGroupSquidexResponse(),
      );

      await migrateInterestGroups();

      expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
        'interestGroups',
        'group-1',
        {
          fields: {
            name: { 'en-US': 'Test Group' },
            description: { 'en-US': 'Group description' },
            active: { 'en-US': true },
            leaders: { 'en-US': [] },
            teams: { 'en-US': [] },
            slack: { 'en-US': undefined },
            googleDrive: { 'en-US': undefined },
            thumbnail: { 'en-US': undefined },
            calendar: { 'en-US': null },
          },
        },
      );
    });

    it('for a group with associated teams', async () => {
      squidexGraphqlClientMock.request.mockResolvedValueOnce(
        getInterestGroupSquidexResponse({
          teams: [{ id: 'team-1' }],
        }),
      );

      await migrateInterestGroups();

      expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
        'interestGroups',
        'group-1',
        {
          fields: expect.objectContaining({
            teams: {
              'en-US': [
                {
                  sys: {
                    type: 'Link',
                    linkType: 'Entry',
                    id: 'team-1',
                  },
                },
              ],
            },
          }),
        },
      );
    });

    it('for a group with associated calendars', async () => {
      squidexGraphqlClientMock.request.mockResolvedValueOnce(
        getInterestGroupSquidexResponse({
          calendars: [{ id: 'calendar-1' }],
        }),
      );

      await migrateInterestGroups();

      expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
        'interestGroups',
        'group-1',
        {
          fields: expect.objectContaining({
            calendar: {
              'en-US': {
                sys: {
                  type: 'Link',
                  linkType: 'Entry',
                  id: 'calendar-1',
                },
              },
            },
          }),
        },
      );
    });

    it('for a group with associated incomplete teams', async () => {
      squidexGraphqlClientMock.request.mockResolvedValueOnce(
        getInterestGroupSquidexResponse({
          teams: [{ id: 'team-1' }, {}],
        }),
      );

      await migrateInterestGroups();

      expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
        'interestGroups',
        'group-1',
        {
          fields: expect.objectContaining({
            teams: {
              'en-US': [
                {
                  sys: {
                    type: 'Link',
                    linkType: 'Entry',
                    id: 'team-1',
                  },
                },
              ],
            },
          }),
        },
      );
    });

    it('for a group with a thumbnail image', async () => {
      squidexGraphqlClientMock.request.mockResolvedValueOnce(
        getInterestGroupSquidexResponse({
          thumbnail: [
            {
              id: 'asset-1',
              fileName: 'thumbnail.jpg',
              mimeType: 'image/jpeg',
              fileType: 'jpeg',
            },
          ],
        }),
      );

      const createAssetMock = createAsset as jest.Mock;
      createAssetMock.mockResolvedValueOnce({
        sys: {
          type: 'Link',
          linkType: 'Asset',
          id: 'contentful-asset-id',
        },
      });

      await migrateInterestGroups();

      expect(createAssetMock).toHaveBeenCalledWith(expect.anything(), [
        {
          fileName: 'thumbnail.jpg',
          fileType: 'jpeg',
          id: 'asset-1',
          mimeType: 'image/jpeg',
          thumbnailUrl: 'https://test.squidex.io/api/assets/test/asset-1',
        },
      ]);

      expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
        'interestGroups',
        'group-1',
        {
          fields: expect.objectContaining({
            thumbnail: {
              'en-US': {
                sys: {
                  type: 'Link',
                  linkType: 'Asset',
                  id: 'contentful-asset-id',
                },
              },
            },
          }),
        },
      );
    });
  });

  it('for group leaders', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getInterestGroupSquidexResponse({
        leaders: [
          {
            role: 'Project Manager',
            inactiveSinceDate: '2021-12-23T12:00:00.000Z',
            user: [{ id: 'user-1' }],
          },
        ],
      }),
    );

    contentfulEnv.createEntry.mockResolvedValue(interestGroupLeaderEntry);

    await migrateInterestGroups();

    expect(contentfulEnv.createEntry).toHaveBeenCalledWith(
      'interestGroupLeaders',
      {
        fields: {
          role: { 'en-US': 'Project Manager' },
          inactiveSinceDate: { 'en-US': '2021-12-23T12:00:00.000Z' },
          user: {
            'en-US': {
              sys: { type: 'Link', linkType: 'Entry', id: 'user-1' },
            },
          },
        },
      },
    );

    expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
      'interestGroups',
      'group-1',
      {
        fields: expect.objectContaining({
          leaders: {
            'en-US': [
              {
                sys: {
                  type: 'Link',
                  linkType: 'Entry',
                  id: interestGroupLeaderEntry.sys.id,
                },
              },
            ],
          },
        }),
      },
    );
  });

  it('for incomplete group leaders', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getInterestGroupSquidexResponse({
        leaders: [
          {
            role: 'Project Manager',
            inactiveSinceDate: '2021-12-23T12:00:00.000Z',
            user: null,
          },
        ],
      }),
    );

    await migrateInterestGroups();

    expect(contentfulEnv.createEntry).not.toHaveBeenCalled;

    expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
      'interestGroups',
      'group-1',
      {
        fields: expect.objectContaining({
          leaders: {
            'en-US': [],
          },
        }),
      },
    );
  });

  it('publishes contentful entries', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getInterestGroupSquidexResponse(),
    );
    const publishContentfulEntriesMock = publishContentfulEntries as jest.Mock;

    await migrateInterestGroups();

    expect(publishContentfulEntriesMock).toHaveBeenCalledWith([
      interestGroupEntry,
    ]);
  });
});
