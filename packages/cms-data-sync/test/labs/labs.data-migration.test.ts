import { SquidexGraphqlClient } from '@asap-hub/squidex';
import { Environment } from 'contentful-management';
import { migrateLabs } from '../../src/labs/labs.data-migration';
import { labEntry } from '../fixtures';
import {
  clearContentfulEntries,
  publishContentfulEntries,
  getSquidexAndContentfulClients,
} from '../../src/utils';
import { getContentfulEnvironmentMock } from '../mocks/contentful.mocks';
import { FetchLabsQuery } from '../../src/autogenerated-gql/graphql';

jest.mock('../../src/utils/setup');
jest.mock('../../src/utils/entries');

const getLabsSquidexResponse: () => NonNullable<
  FetchLabsQuery['queryLabsContentsWithTotal']
> = () => ({
  queryLabsContentsWithTotal: {
    total: 2,
    items: [
      {
        id: 'lab-1',
        flatData: {
          name: 'Lab 1',
        },
      },
      {
        id: 'lab-2',
        flatData: {
          name: 'Lab 2',
        },
      },
    ],
  },
});

describe('Migrate labs', () => {
  let contentfulEnv: Environment;
  let squidexGraphqlClientMock: jest.Mocked<SquidexGraphqlClient>;

  const consoleLogRef = console.log;

  beforeEach(() => {
    console.log = jest.fn();

    contentfulEnv = getContentfulEnvironmentMock();
    contentfulEnv.createEntryWithId.mockResolvedValue(labEntry);
    squidexGraphqlClientMock = {
      request: jest.fn(),
    };

    (getSquidexAndContentfulClients as jest.Mock).mockResolvedValueOnce({
      contentfulEnvironment: contentfulEnv,
      squidexGraphqlClient: squidexGraphqlClientMock,
    });

    jest.spyOn(contentfulEnv, 'getEntries').mockResolvedValueOnce({
      total: 1,
      items: [labEntry],
      skip: 0,
      limit: 10,
      toPlainObject: jest.fn(),
      sys: { type: 'Array' },
    });

    jest
      .spyOn(labEntry, 'publish')
      .mockImplementationOnce(() => Promise.resolve(labEntry));
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  afterAll(() => {
    console.log = consoleLogRef;
  });

  it('clears contentful labs entries', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getLabsSquidexResponse(),
    );

    await migrateLabs();

    const clearContentfulEntriesMock = clearContentfulEntries as jest.Mock;
    expect(clearContentfulEntriesMock).toHaveBeenCalledTimes(1);
    expect(clearContentfulEntriesMock).toHaveBeenCalledWith(
      expect.anything(),
      'labs',
      expect.anything(),
    );
  });

  it('fetches all pages of data from squidex', async () => {
    squidexGraphqlClientMock.request.mockResolvedValue({
      queryLabsContentsWithTotal: {
        total: 200,
        items: Array(100).fill({ id: '1', flatData: { name: 'Test' } }),
      },
    });

    await migrateLabs();

    expect(squidexGraphqlClientMock.request).toHaveBeenCalledWith(
      expect.anything(),
      { take: 100, skip: 0 },
    );
    expect(squidexGraphqlClientMock.request).toHaveBeenCalledWith(
      expect.anything(),
      { take: 100, skip: 100 },
    );
  }, 100000);

  it('does not fail if no data in squidex', async () => {
    squidexGraphqlClientMock.request.mockResolvedValue({
      queryLabsContentsWithTotal: null,
    });

    await migrateLabs();

    expect(contentfulEnv.createEntryWithId).not.toHaveBeenCalled();
  });

  describe('creates contentful entries', () => {
    it('for a lab', async () => {
      squidexGraphqlClientMock.request.mockResolvedValueOnce(
        getLabsSquidexResponse(),
      );

      await migrateLabs();

      expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
        'labs',
        'lab-1',
        {
          fields: {
            name: { 'en-US': 'Lab 1' },
          },
        },
      );
      expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
        'labs',
        'lab-2',
        {
          fields: {
            name: { 'en-US': 'Lab 2' },
          },
        },
      );
    });
  });

  it('does not fail if squidex does not return anything', async () => {
    squidexGraphqlClientMock.request.mockResolvedValue({
      queryLabsContentsWithTotal: {
        total: 0,
        items: [],
      },
    });
    const publishContentfulEntriesMock = publishContentfulEntries as jest.Mock;

    await migrateLabs();

    expect(contentfulEnv.createEntryWithId).not.toHaveBeenCalled();
    expect(publishContentfulEntriesMock).toHaveBeenCalled();
  });

  it('publish contentful entries', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getLabsSquidexResponse(),
    );
    const publishContentfulEntriesMock = publishContentfulEntries as jest.Mock;

    await migrateLabs();

    expect(publishContentfulEntriesMock).toHaveBeenCalledWith(
      [labEntry, labEntry],
      expect.anything(),
    );
  });
});
