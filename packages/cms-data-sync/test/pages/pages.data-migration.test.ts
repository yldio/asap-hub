import { SquidexGraphqlClient } from '@asap-hub/squidex';
import { Entry, Environment } from 'contentful-management';
import { getSquidexAndContentfulClients } from '../../src/utils/setup';
import { getContentfulEnvironmentMock } from '../mocks/contentful.mocks';
import { migratePages } from '../../src/pages/pages.data-migration';
import { FetchPagesQuery } from '../../src/autogenerated-gql/graphql';

jest.mock('../../src/utils/setup');

describe('Migrate Pages', () => {
  const squidexGraphqlClientMock: jest.Mocked<SquidexGraphqlClient> = {
    request: jest.fn(),
  };
  const contentfulEnv: jest.Mocked<Environment> =
    getContentfulEnvironmentMock();
  const entry = {
    sys: {
      id: 'entry-id',
    },
  } as unknown as Entry;

  beforeEach(() => {
    (getSquidexAndContentfulClients as jest.Mock).mockResolvedValueOnce({
      contentfulEnvironment: contentfulEnv,
      squidexGraphqlClient: squidexGraphqlClientMock,
    });

    contentfulEnv.getEntries.mockResolvedValueOnce({
      total: 1,
      items: [],
      skip: 0,
      limit: 10,
      toPlainObject: jest.fn(),
      sys: { type: 'Array' },
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('Should fetch data from Squidex GraphQl API, parse it and create a record', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      pagesSquidexGraphqlResponse,
    );
    contentfulEnv.createEntryWithId.mockResolvedValueOnce(entry);

    await migratePages();

    expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
      'pages',
      'page-id-1',
      {
        fields: {
          title: { 'en-US': 'Page 1' },
          text: { 'en-US': textDocument },
          link: { 'en-US': 'https://www.example.com/page1' },
          linkText: { 'en-US': 'Page 1 link text' },
          path: { 'en-US': '/page1' },
          shortText: { 'en-US': 'Page 1 short text' },
        },
      },
    );
  });

  test('Should attempt to create a record without the text if it fails to create with the first attempt', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      pagesSquidexGraphqlResponse,
    );
    contentfulEnv.createEntryWithId.mockRejectedValueOnce(new Error('Error'));
    contentfulEnv.createEntryWithId.mockResolvedValueOnce(entry);

    await migratePages();

    expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
      'pages',
      'page-id-1',
      {
        fields: {
          title: { 'en-US': 'Page 1' },
          text: { 'en-US': null },
          link: { 'en-US': 'https://www.example.com/page1' },
          linkText: { 'en-US': 'Page 1 link text' },
          path: { 'en-US': '/page1' },
          shortText: { 'en-US': 'Page 1 short text' },
        },
      },
    );
  });
});

const pagesSquidexGraphqlResponse: FetchPagesQuery = {
  queryPagesContents: [
    {
      id: 'page-id-1',
      flatData: {
        title: 'Page 1',
        text: '<p>Hello world</p>',
        link: 'https://www.example.com/page1',
        linkText: 'Page 1 link text',
        path: '/page1',
        shortText: 'Page 1 short text',
      },
    },
  ],
};

const textDocument = {
  content: [
    {
      content: [
        {
          data: {},
          marks: [],
          value: 'Hello world',
          nodeType: 'text',
        },
      ],
      data: {},
      nodeType: 'paragraph',
    },
  ],
  data: {},
  nodeType: 'document',
};
