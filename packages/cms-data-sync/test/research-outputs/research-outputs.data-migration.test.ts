import { SquidexGraphqlClient, createUrlFactory } from '@asap-hub/squidex';
import { Environment } from 'contentful-management';
import { migrateResearchOutputs } from '../../src/research-outputs/research-outputs.data-migration';
import { getEntry, researchOutputEntry } from '../fixtures';
import {
  clearContentfulEntries,
  publishContentfulEntries,
  getSquidexAndContentfulClients,
} from '../../src/utils';
import { getContentfulEnvironmentMock } from '../mocks/contentful.mocks';
import { FetchResearchOutputsQuery } from '../../src/autogenerated-gql/graphql';

jest.mock('../../src/utils/setup');
jest.mock('../../src/utils/entries');

const getResearchOutputsSquidex: (
  props: Record<string, unknown>,
) => NonNullable<
  NonNullable<
    FetchResearchOutputsQuery['queryResearchOutputsContentsWithTotal']
  >['items']
>[number] = (props = {}) => ({
  id: 'output-1',
  created: '2023-03-15T00:00:00.0000Z',
  lastModified: '2023-03-15T00:00:00.0000Z',
  version: 10,
  status: 'PUBLISHED',
  flatData: {
    title: 'Test output',
    documentType: 'Article',
    type: 'Article',
    description: '<p>Description content</p>',
    descriptionMD: 'Description content',
    addedDate: '2023-03-15T00:00:00.0000Z',
    lastUpdatedPartial: '2023-03-15T00:00:00.0000Z',
    link: 'https://example.com',
    asapFunded: 'No',
    sharingStatus: 'Public',
    usedInAPublication: 'Yes',
    publishDate: '2023-02-15T00:00:00.0000Z',
    rrid: 'rrid',
    accession: 'accession',
    doi: 'doi',
    labCatalogNumber: 'lab catalogue number',
    adminNotes: 'Admin notes',
    usageNotes: '',
    isInReview: false,
    statusChangedAt: null,
    statusChangedBy: null,
    authors: [],
    relatedResearch: [],
    relatedEvents: [],
    labs: [],
    workingGroups: [],
    teams: [],
    methods: [],
    organisms: [],
    environments: [],
    subtype: [],
    keywords: [],
    ...props,
  },
});

const getResearchOutputsSquidexResponse: (
  props: Record<string, unknown>,
) => NonNullable<FetchResearchOutputsQuery> = (props) => ({
  queryResearchOutputsContentsWithTotal: {
    total: 1,
    items: [getResearchOutputsSquidex(props)],
  },
});

describe('Migrate research outputs', () => {
  let contentfulEnv: Environment;
  let squidexGraphqlClientMock: jest.Mocked<SquidexGraphqlClient>;

  const consoleLogRef = console.log;

  beforeEach(() => {
    console.log = jest.fn();

    contentfulEnv = getContentfulEnvironmentMock();
    contentfulEnv.createEntryWithId.mockResolvedValue(researchOutputEntry);
    squidexGraphqlClientMock = {
      request: jest.fn(),
    };

    (getSquidexAndContentfulClients as jest.Mock).mockResolvedValueOnce({
      contentfulEnvironment: contentfulEnv,
      squidexGraphqlClient: squidexGraphqlClientMock,
    });

    jest.spyOn(contentfulEnv, 'getEntries').mockResolvedValueOnce({
      total: 1,
      items: [researchOutputEntry],
      skip: 0,
      limit: 10,
      toPlainObject: jest.fn(),
      sys: { type: 'Array' },
    });

    jest
      .spyOn(researchOutputEntry, 'publish')
      .mockImplementationOnce(() => Promise.resolve(researchOutputEntry));
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  afterAll(() => {
    console.log = consoleLogRef;
  });

  it('clears contentful research output entries', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getResearchOutputsSquidexResponse({}),
    );

    await migrateResearchOutputs();

    const clearContentfulEntriesMock = clearContentfulEntries as jest.Mock;
    expect(clearContentfulEntriesMock).toHaveBeenCalledTimes(1);
    expect(clearContentfulEntriesMock).toHaveBeenCalledWith(
      expect.anything(),
      'researchOutputs',
    );
  });

  it('fetches all pages of data from squidex', async () => {
    squidexGraphqlClientMock.request.mockResolvedValue({
      queryResearchOutputsContentsWithTotal: {
        total: 200,
        items: Array(100).fill({ id: '1', flatData: { name: 'Test' } }),
      },
    });

    await migrateResearchOutputs();

    expect(squidexGraphqlClientMock.request).toHaveBeenCalledWith(
      expect.anything(),
      { take: 100, skip: 0 },
      { includeDrafts: true },
    );
    expect(squidexGraphqlClientMock.request).toHaveBeenCalledWith(
      expect.anything(),
      { take: 100, skip: 100 },
      { includeDrafts: true },
    );
  }, 100000);

  it('does not fail if no data in squidex', async () => {
    squidexGraphqlClientMock.request.mockResolvedValue({
      queryResearchOutputsContentsWithTotal: null,
    });

    await migrateResearchOutputs();

    expect(contentfulEnv.createEntryWithId).not.toHaveBeenCalled();
  });

  it('creates contentful entries', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getResearchOutputsSquidexResponse({}),
    );

    await migrateResearchOutputs();

    expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
      'researchOutputs',
      'output-1',
      {
        fields: {
          title: { 'en-US': 'Test output' },
          accession: {
            'en-US': 'accession',
          },
          addedDate: {
            'en-US': '2023-03-15T00:00:00.0000Z',
          },
          adminNotes: {
            'en-US': 'Admin notes',
          },
          asapFunded: {
            'en-US': 'No',
          },
          authors: {
            'en-US': [],
          },
          createdDate: {
            'en-US': '2023-03-15T00:00:00.0000Z',
          },
          description: {
            'en-US': {
              content: [
                {
                  content: [
                    {
                      data: {},
                      marks: [],
                      nodeType: 'text',
                      value: 'Description content',
                    },
                  ],
                  data: {},
                  nodeType: 'paragraph',
                },
              ],
              data: {},
              nodeType: 'document',
            },
          },
          descriptionMD: {
            'en-US': 'Description content',
          },
          documentType: {
            'en-US': 'Article',
          },
          doi: {
            'en-US': 'doi',
          },
          environments: {
            'en-US': [],
          },
          isInReview: {
            'en-US': false,
          },
          keywords: {
            'en-US': [],
          },
          labCatalogNumber: {
            'en-US': 'lab catalogue number',
          },
          labs: {
            'en-US': [],
          },
          lastUpdatedPartial: {
            'en-US': '2023-03-15T00:00:00.0000Z',
          },
          link: {
            'en-US': 'https://example.com',
          },
          methods: {
            'en-US': [],
          },
          organisms: {
            'en-US': [],
          },
          publishDate: {
            'en-US': '2023-02-15T00:00:00.0000Z',
          },
          relatedEvents: {
            'en-US': [],
          },
          relatedResearch: {
            'en-US': [],
          },
          rrid: {
            'en-US': 'rrid',
          },
          sharingStatus: {
            'en-US': 'Public',
          },
          statusChangedAt: {
            'en-US': null,
          },
          statusChangedBy: {
            'en-US': null,
          },
          subtype: {
            'en-US': undefined,
          },
          teams: {
            'en-US': [],
          },
          type: {
            'en-US': 'Article',
          },
          usageNotes: {
            'en-US': '',
          },
          usedInAPublication: {
            'en-US': 'Yes',
          },
          workingGroup: {
            'en-US': undefined,
          },
        },
      },
    );
  });

  it('publishes contentful entries when the squidex entry is published', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getResearchOutputsSquidexResponse({}),
    );
    const publishContentfulEntriesMock = publishContentfulEntries as jest.Mock;

    await migrateResearchOutputs();

    expect(publishContentfulEntriesMock).toHaveBeenCalledWith([
      researchOutputEntry,
    ]);
  });

  it('does not publish contentful entries when the squidex entry is draft', async () => {
    const response = getResearchOutputsSquidexResponse({});
    response.queryResearchOutputsContentsWithTotal!.items[0].status = 'DRAFT';
    squidexGraphqlClientMock.request.mockResolvedValueOnce(response);
    const publishContentfulEntriesMock = publishContentfulEntries as jest.Mock;

    await migrateResearchOutputs();

    expect(publishContentfulEntriesMock).not.toHaveBeenCalledWith([
      researchOutputEntry,
    ]);
  });

  it('inserts null values in place of empty strings for regex validated fields', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getResearchOutputsSquidexResponse({
        link: '',
        rrid: '',
        accession: '',
        doi: '',
      }),
    );

    await migrateResearchOutputs();

    expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
      'researchOutputs',
      'output-1',
      {
        fields: expect.objectContaining({
          link: { 'en-US': null },
          rrid: { 'en-US': null },
          accession: { 'en-US': null },
          doi: { 'en-US': null },
        }),
      },
    );
  });

  it('converts rich text in usageNotes field to markdown', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getResearchOutputsSquidexResponse({
        usageNotes:
          '<p>Some content with a <a href="https://hub.asap.science">link</a>.</p><p>And multiple paragraphs.</p>',
      }),
    );

    await migrateResearchOutputs();

    expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
      'researchOutputs',
      'output-1',
      {
        fields: expect.objectContaining({
          usageNotes: {
            'en-US': expect.stringContaining(
              'Some content with a [link](https://hub.asap.science).\n\nAnd multiple paragraphs.',
            ),
          },
        }),
      },
    );
  });

  it('removes all markup except <p> and <a> when converting to markdown.', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getResearchOutputsSquidexResponse({
        usageNotes:
          '<p>Some content with <em>em</em> and <strong>strong</strong> tags.</p>',
      }),
    );

    await migrateResearchOutputs();

    expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
      'researchOutputs',
      'output-1',
      {
        fields: expect.objectContaining({
          usageNotes: {
            'en-US': expect.stringContaining(
              'Some content with em and strong tags.',
            ),
          },
        }),
      },
    );
  });

  it('creates links for related entities', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getResearchOutputsSquidexResponse({
        workingGroups: [{ id: 'wg-1', status: 'PUBLISHED' }],
        subtype: [{ id: 'tag-1', status: 'PUBLISHED' }],
        teams: [{ id: 'team-1', status: 'PUBLISHED' }],
        relatedResearch: [{ id: 'ro-1', status: 'PUBLISHED' }],
        relatedEvents: [{ id: 're-1', status: 'PUBLISHED' }],
        labs: [{ id: 'lab-1', status: 'PUBLISHED' }],
        methods: [{ id: 'method-1', status: 'PUBLISHED' }],
        keywords: [{ id: 'keyword-1', status: 'PUBLISHED' }],
        environments: [{ id: 'environment-1', status: 'PUBLISHED' }],
        organisms: [{ id: 'organism-1', status: 'PUBLISHED' }],
        statusChangedBy: [{ id: 'user-1', status: 'PUBLISHED' }],
      }),
    );

    await migrateResearchOutputs();

    expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
      'researchOutputs',
      'output-1',
      {
        fields: expect.objectContaining({
          workingGroup: {
            'en-US': {
              sys: {
                id: 'wg-1',
                linkType: 'Entry',
                type: 'Link',
              },
            },
          },
          subtype: {
            'en-US': {
              sys: {
                id: 'tag-1',
                linkType: 'Entry',
                type: 'Link',
              },
            },
          },
          teams: {
            'en-US': [
              {
                sys: {
                  id: 'team-1',
                  linkType: 'Entry',
                  type: 'Link',
                },
              },
            ],
          },
          relatedResearch: {
            'en-US': [
              {
                sys: {
                  id: 'ro-1',
                  linkType: 'Entry',
                  type: 'Link',
                },
              },
            ],
          },
          relatedEvents: {
            'en-US': [
              {
                sys: {
                  id: 're-1',
                  linkType: 'Entry',
                  type: 'Link',
                },
              },
            ],
          },
          labs: {
            'en-US': [
              {
                sys: {
                  id: 'lab-1',
                  linkType: 'Entry',
                  type: 'Link',
                },
              },
            ],
          },
          methods: {
            'en-US': [
              {
                sys: {
                  id: 'method-1',
                  linkType: 'Entry',
                  type: 'Link',
                },
              },
            ],
          },
          keywords: {
            'en-US': [
              {
                sys: {
                  id: 'keyword-1',
                  linkType: 'Entry',
                  type: 'Link',
                },
              },
            ],
          },
          organisms: {
            'en-US': [
              {
                sys: {
                  id: 'organism-1',
                  linkType: 'Entry',
                  type: 'Link',
                },
              },
            ],
          },
          environments: {
            'en-US': [
              {
                sys: {
                  id: 'environment-1',
                  linkType: 'Entry',
                  type: 'Link',
                },
              },
            ],
          },
          statusChangedBy: {
            'en-US': {
              sys: {
                id: 'user-1',
                linkType: 'Entry',
                type: 'Link',
              },
            },
          },
        }),
      },
    );
  });

  it('does not link unpublished entities', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getResearchOutputsSquidexResponse({
        workingGroups: [{ id: 'wg-1', status: 'DRAFT' }],
        subtype: [{ id: 'tag-1', status: 'DRAFT' }],
        teams: [{ id: 'team-1', status: 'DRAFT' }],
        relatedResearch: [{ id: 'ro-1', status: 'DRAFT' }],
        relatedEvents: [{ id: 're-1', status: 'DRAFT' }],
        labs: [{ id: 'lab-1', status: 'DRAFT' }],
        methods: [{ id: 'method-1', status: 'DRAFT' }],
        keywords: [{ id: 'keyword-1', status: 'DRAFT' }],
        environments: [{ id: 'environment-1', status: 'DRAFT' }],
        organisms: [{ id: 'organism-1', status: 'DRAFT' }],
      }),
    );

    await migrateResearchOutputs();

    expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
      'researchOutputs',
      'output-1',
      {
        fields: expect.objectContaining({
          workingGroup: {
            'en-US': undefined,
          },
          subtype: {
            'en-US': undefined,
          },
          teams: {
            'en-US': [],
          },
          relatedResearch: {
            'en-US': [],
          },
          relatedEvents: {
            'en-US': [],
          },
          labs: {
            'en-US': [],
          },
          methods: {
            'en-US': [],
          },
          keywords: {
            'en-US': [],
          },
          organisms: {
            'en-US': [],
          },
          environments: {
            'en-US': [],
          },
        }),
      },
    );
  });
});
