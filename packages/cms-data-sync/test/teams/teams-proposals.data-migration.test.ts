/* eslint-disable no-console */
import { SquidexGraphqlClient } from '@asap-hub/squidex';
import { Environment } from 'contentful-management';
import { migrateTeamProposals } from '../../src/teams/teams-proposals.data-migration';
import { getEntry, teamEntry } from '../fixtures';
import {
  clearContentfulEntries,
  publishContentfulEntries,
  getSquidexAndContentfulClients,
} from '../../src/utils';
import { getContentfulEnvironmentMock } from '../mocks/contentful.mocks';
import { FetchTeamsQuery } from '../../src/autogenerated-gql/graphql';

jest.mock('../../src/utils/setup');
jest.mock('../../src/utils/entries');

const getTeamSquidexResponse: (
  props: Record<string, unknown>,
) => NonNullable<FetchTeamsQuery['queryTeamsContents']>[number] = (
  props = {},
) => ({
  id: 'team-1',
  created: '2023-03-15T00:00:00.0000Z',
  lastModified: '2023-03-15T00:00:00.0000Z',
  version: 10,
  status: 'PUBLISHED',
  flatData: {
    displayName: 'Team ASAP',
    applicationNumber: '2023',
    projectTitle: 'Beautiful Title',
    projectSummary: null,
    inactiveSince: null,
    expertiseAndResourceTags: [],
    tools: [],
    proposal: [{ id: 'output-1' }],
    ...props,
  },
});

const squidexResponse: FetchTeamsQuery = {
  queryTeamsContents: [getTeamSquidexResponse({})],
};

describe('Migrate team proposals', () => {
  let contenfulEnv: jest.Mocked<Environment>;
  let squidexGraphqlClientMock: jest.Mocked<SquidexGraphqlClient>;

  beforeEach(() => {
    contenfulEnv = getContentfulEnvironmentMock();
    squidexGraphqlClientMock = {
      request: jest.fn(),
    };

    (getSquidexAndContentfulClients as jest.Mock).mockResolvedValue({
      contentfulEnvironment: contenfulEnv,
      squidexGraphqlClient: squidexGraphqlClientMock,
    });

    contenfulEnv.getEntry.mockResolvedValue(teamEntry);
    teamEntry.update.mockResolvedValue(teamEntry);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('does not clear contentful entries', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(squidexResponse);

    await migrateTeamProposals();

    const clearContentfulEntriesMock = clearContentfulEntries as jest.Mock;
    expect(clearContentfulEntriesMock).not.toHaveBeenCalled();
  });

  it('updates contentful entries with proposal', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(squidexResponse);

    const mockSetter = jest.fn();

    Object.defineProperty(teamEntry.fields, 'proposal', {
      set: mockSetter,
    });

    await migrateTeamProposals();

    expect(contenfulEnv.createEntryWithId).not.toHaveBeenCalled();

    expect(contenfulEnv.getEntry).toHaveBeenCalledWith('team-1');
    expect(mockSetter).toHaveBeenCalledWith({
      'en-US': { sys: { id: 'output-1', type: 'Link', linkType: 'Entry' } },
    });
    expect(teamEntry.update).toHaveBeenCalled();
  });

  it('updates contentful entries with null proposal', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce({
      queryTeamsContents: [getTeamSquidexResponse({ proposal: [] })],
    });

    const mockSetter = jest.fn();

    Object.defineProperty(teamEntry.fields, 'proposal', {
      set: mockSetter,
    });

    await migrateTeamProposals();

    expect(contenfulEnv.createEntryWithId).not.toHaveBeenCalled();

    expect(contenfulEnv.getEntry).toHaveBeenCalledWith('team-1');
    expect(mockSetter).toHaveBeenCalledWith({
      'en-US': null,
    });
    expect(teamEntry.update).toHaveBeenCalled();
  });

  it('does not fail if squidex does not return anything', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce({});
    const publishContentfulEntriesMock = publishContentfulEntries as jest.Mock;

    await migrateTeamProposals();

    expect(teamEntry.update).not.toHaveBeenCalled();
    expect(publishContentfulEntriesMock).toHaveBeenCalledWith([]);
  });

  it('publishes contentful entries', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(squidexResponse);
    const publishContentfulEntriesMock = publishContentfulEntries as jest.Mock;

    await migrateTeamProposals();

    expect(publishContentfulEntriesMock).toHaveBeenCalledWith([teamEntry]);
  });
});
