import { SquidexGraphqlClient, createUrlFactory } from '@asap-hub/squidex';
import { Environment } from 'contentful-management';
import { migrateTutorials } from '../../src/tutorials/tutorials.data-migration';
import { getEntry, tutorialEntry, contenfulAsset } from '../fixtures';
import {
  clearContentfulEntries,
  createAsset,
  createAssetUrl,
  publishContentfulEntries,
  getSquidexAndContentfulClients,
} from '../../src/utils';
import { getContentfulEnvironmentMock } from '../mocks/contentful.mocks';
import { FetchTutorialsQuery } from '../../src/autogenerated-gql/graphql';

const mockCreateAssetUrl = createUrlFactory({
  appName: 'test',
  baseUrl: 'https://test.squidex.io',
});

jest.mock('../../src/utils/setup');
jest.mock('../../src/utils/assets-and-media');
jest.mock('../../src/utils/entries');

createAssetUrl.mockImplementation(mockCreateAssetUrl);

const getTutorialSquidex: (
  props: Record<string, unknown>,
) => FetchTutorialsQuery['queryTutorialsContentsWithTotal']['items'][number] = (
  props = {},
) => ({
  id: 'tutorial-1',
  created: '2023-03-15T00:00:00.0000Z',
  lastModified: '2023-03-15T00:00:00.0000Z',
  version: 10,
  status: 'PUBLISHED',
  flatData: {
    title: 'Tutorial',
    shortText: 'Short Text',
    shortText: 'Short Text',
    link: 'https://example.com',
    linkText: 'Example Dot Com',
    text: '<p>Hello world</p>',
    ...props,
  },
});

const getTutorialSquidexResponse: (
  props: Record<string, unknown>,
) => NonNullable<FetchTutorialsQuery['queryTutorialsContentsWithTotal']> = (
  props,
) => ({
  queryTutorialsContentsWithTotal: {
    total: 1,
    items: [getTutorialSquidex(props)],
  },
});

describe('Migrate tutorials', () => {
  let contentfulEnv: Environment;
  let squidexGraphqlClientMock: jest.Mocked<SquidexGraphqlClient>;

  const consoleLogRef = console.log;

  beforeEach(() => {
    console.log = jest.fn();

    contentfulEnv = getContentfulEnvironmentMock();
    contentfulEnv.createEntryWithId.mockResolvedValue(tutorialEntry);
    squidexGraphqlClientMock = {
      request: jest.fn(),
    };

    (getSquidexAndContentfulClients as jest.Mock).mockResolvedValueOnce({
      contentfulEnvironment: contentfulEnv,
      squidexGraphqlClient: squidexGraphqlClientMock,
    });

    jest.spyOn(contentfulEnv, 'getEntries').mockResolvedValueOnce({
      total: 1,
      items: [tutorialEntry],
      skip: 0,
      limit: 10,
      toPlainObject: jest.fn(),
      sys: { type: 'Array' },
    });

    jest
      .spyOn(tutorialEntry, 'publish')
      .mockImplementationOnce(() => Promise.resolve(tutorialEntry));
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  afterAll(() => {
    console.log = consoleLogRef;
  });

  it('clears contentful tutorials entries', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getTutorialSquidexResponse(),
    );

    await migrateTutorials();

    const clearContentfulEntriesMock = clearContentfulEntries as jest.Mock;
    expect(clearContentfulEntriesMock).toHaveBeenCalledTimes(1);
    expect(clearContentfulEntriesMock).toHaveBeenCalledWith(
      expect.anything(),
      'tutorials',
    );
  });

  it('fetches all pages of data from squidex', async () => {
    squidexGraphqlClientMock.request.mockResolvedValue({
      queryTutorialsContentsWithTotal: {
        total: 200,
        items: Array(100).fill(getTutorialSquidex()),
      },
    });

    await migrateTutorials();

    expect(squidexGraphqlClientMock.request).toHaveBeenCalledWith(
      expect.anything(),
      { take: 100, skip: 0 },
    );
    expect(squidexGraphqlClientMock.request).toHaveBeenCalledWith(
      expect.anything(),
      { take: 100, skip: 100 },
    );
  }, 100000);

  it('does not fail if no data in squidex', async () => {
    squidexGraphqlClientMock.request.mockResolvedValue({
      queryTutorialsContentsWithTotal: null,
    });

    await migrateTutorials();

    expect(contentfulEnv.createEntryWithId).not.toHaveBeenCalled();
  });

  describe('creates contentful entries', () => {
    it('for a tutorial', async () => {
      squidexGraphqlClientMock.request.mockResolvedValueOnce(
        getTutorialSquidexResponse(),
      );

      await migrateTutorials();

      const textDocument = {
        content: [
          {
            content: [
              {
                data: {},
                marks: [],
                value: 'Hello world',
                nodeType: 'text',
              },
            ],
            data: {},
            nodeType: 'paragraph',
          },
        ],
        data: {},
        nodeType: 'document',
      };

      expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
        'tutorials',
        'tutorial-1',
        {
          fields: {
            title: { 'en-US': 'Tutorial' },
            shortText: { 'en-US': 'Short Text' },
            link: { 'en-US': 'https://example.com' },
            linkText: { 'en-US': 'Example Dot Com' },
            text: { 'en-US': textDocument },
            thumbnail: { 'en-US': undefined },
          },
        },
      );
    });

    it('for a tutorial with a thumbnail image', async () => {
      squidexGraphqlClientMock.request.mockResolvedValueOnce(
        getTutorialSquidexResponse({
          thumbnail: [
            {
              id: 'asset-1',
              fileName: 'thumbnail.jpg',
              mimeType: 'image/jpeg',
              fileType: 'jpeg',
            },
          ],
        }),
      );

      const createAssetMock = createAsset as jest.Mock;
      createAssetMock.mockResolvedValueOnce({
        sys: {
          type: 'Link',
          linkType: 'Asset',
          id: 'contentful-asset-id',
        },
      });

      await migrateTutorials();

      expect(createAssetMock).toHaveBeenCalledWith(expect.anything(), [
        {
          fileName: 'thumbnail.jpg',
          fileType: 'jpeg',
          id: 'asset-1',
          mimeType: 'image/jpeg',
          thumbnailUrl: 'https://test.squidex.io/api/assets/test/asset-1',
        },
      ]);

      expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
        'tutorials',
        'tutorial-1',
        {
          fields: expect.objectContaining({
            thumbnail: {
              'en-US': {
                sys: {
                  type: 'Link',
                  linkType: 'Asset',
                  id: 'contentful-asset-id',
                },
              },
            },
          }),
        },
      );
    });
  });

  it('sets empty links to null', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getTutorialSquidexResponse({ link: '' }),
    );

    await migrateTutorials();

    expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
      'tutorials',
      'tutorial-1',
      {
        fields: expect.objectContaining({
          link: { 'en-US': null },
        }),
      },
    );
  });

  it('publishes contentful entries', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getTutorialSquidexResponse(),
    );
    const publishContentfulEntriesMock = publishContentfulEntries as jest.Mock;

    await migrateTutorials();

    expect(publishContentfulEntriesMock).toHaveBeenCalledWith([tutorialEntry]);
  });
});
