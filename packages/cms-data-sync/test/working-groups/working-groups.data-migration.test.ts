import { SquidexGraphqlClient } from '@asap-hub/squidex';
import { Environment } from 'contentful-management';
import { when } from 'jest-when';

import { migrateWorkingGroups } from '../../src/working-groups/working-groups.data-migration';
import type { WorkingGroupItem } from '../../src/working-groups/working-groups.data-migration';
import { getEntry, eventEntry } from '../fixtures';
import {
  clearContentfulEntries,
  getSquidexAndContentfulClients,
} from '../../src/utils';
import { getContentfulEnvironmentMock } from '../mocks/contentful.mocks';
import { FetchWorkingGroupsQuery } from '../../src/autogenerated-gql/graphql';

jest.mock('../../src/utils/setup');
jest.mock('../../src/utils/assets');
jest.mock('../../src/utils/entries');

const getWorkingGroupSquidex = (): WorkingGroupItem => ({
  id: 'wg-1',
  flatData: {
    title: 'Working Group 1',
    description: '<p><strong>Description</strong></p>',
    externalLink: 'https://www.example.com',
    shortText: 'Short text',
    complete: false,
    deliverables: [],
    leaders: [],
    members: [],
    calendars: [],
  },
});

const getWorkingGroupSquidexResponse = (): FetchWorkingGroupsQuery => ({
  queryWorkingGroupsContentsWithTotal: {
    total: 1,
    items: [getWorkingGroupSquidex()],
  },
});

const baseCreatePayload = {
  title: { 'en-US': 'Working Group 1' },
  description: {
    'en-US': {
      content: [
        {
          content: [
            {
              data: {},
              marks: [{ type: 'bold' }],
              nodeType: 'text',
              value: 'Description',
            },
          ],
          data: {},
          nodeType: 'paragraph',
        },
      ],
      data: {},
      nodeType: 'document',
    },
  },
  externalLink: { 'en-US': 'https://www.example.com' },
  shortText: { 'en-US': 'Short text' },
  complete: { 'en-US': false },
  deliverables: { 'en-US': [] },
  members: { 'en-US': [] },
  calendars: { 'en-US': null },
};

describe('Migrate working groups', () => {
  let contentfulEnv: Environment;
  let squidexGraphqlClientMock: jest.Mocked<SquidexGraphqlClient>;

  const consoleLogRef = console.log;
  beforeEach(() => {
    console.log = jest.fn();
    contentfulEnv = getContentfulEnvironmentMock();
    squidexGraphqlClientMock = {
      request: jest.fn(),
    };

    (getSquidexAndContentfulClients as jest.Mock).mockResolvedValueOnce({
      contentfulEnvironment: contentfulEnv,
      squidexGraphqlClient: squidexGraphqlClientMock,
    });

    when(contentfulEnv.getEntry)
      .calledWith('calendar-1')
      .mockResolvedValue(getEntry({}));

    const createdEntry = getEntry({});
    jest.spyOn(contentfulEnv, 'createEntry').mockResolvedValue(createdEntry);
    jest.spyOn(createdEntry, 'publish').mockResolvedValue(getEntry({}));

    jest.spyOn(eventEntry, 'publish').mockResolvedValue(getEntry({}));
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  afterAll(() => {
    console.log = consoleLogRef;
  });

  it('calls clear contentful entries for workingGroups and its related content models', async () => {
    squidexGraphqlClientMock.request.mockResolvedValueOnce(
      getWorkingGroupSquidexResponse(),
    );

    await migrateWorkingGroups();

    const clearContentfulEntriesMock = clearContentfulEntries as jest.Mock;
    expect(clearContentfulEntriesMock).toHaveBeenCalledTimes(4);
    expect(clearContentfulEntriesMock).toHaveBeenNthCalledWith(
      1,
      expect.anything(),
      'workingGroupDeliverables',
    );

    expect(clearContentfulEntriesMock).toHaveBeenNthCalledWith(
      2,
      expect.anything(),
      'workingGroupLeaders',
    );

    expect(clearContentfulEntriesMock).toHaveBeenNthCalledWith(
      3,
      expect.anything(),
      'workingGroupMembers',
    );

    expect(clearContentfulEntriesMock).toHaveBeenNthCalledWith(
      4,
      expect.anything(),
      'workingGroups',
    );
  });

  describe('creates contentful entries for a working group', () => {
    it('with only plain fields', async () => {
      squidexGraphqlClientMock.request.mockResolvedValueOnce(
        getWorkingGroupSquidexResponse(),
      );

      await migrateWorkingGroups();

      expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
        'workingGroups',
        'wg-1',
        { fields: baseCreatePayload },
      );
    });

    it('with deliverables', async () => {
      const workingGroupSquidexResponse = getWorkingGroupSquidexResponse();
      workingGroupSquidexResponse.queryWorkingGroupsContentsWithTotal!.items![0].flatData.deliverables =
        [
          {
            status: 'Incomplete',
            description: 'Deliverable 1',
          },
          {
            status: 'Complete',
            description: 'Deliverable 2',
          },
        ];

      const createdDeliverable1 = getEntry({});
      when(contentfulEnv.createEntry)
        .calledWith('workingGroupDeliverables', {
          fields: {
            status: {
              'en-US': 'Incomplete',
            },
            description: {
              'en-US': 'Deliverable 1',
            },
          },
        })
        .mockResolvedValue(createdDeliverable1);
      const publishedDeliverable1 = getEntry({});
      publishedDeliverable1.sys.id = 'contentful-deliverable-1';
      jest
        .spyOn(createdDeliverable1, 'publish')
        .mockResolvedValue(publishedDeliverable1);

      const createdDeliverable2 = getEntry({});
      when(contentfulEnv.createEntry)
        .calledWith('workingGroupDeliverables', {
          fields: {
            status: {
              'en-US': 'Complete',
            },
            description: {
              'en-US': 'Deliverable 2',
            },
          },
        })
        .mockResolvedValue(createdDeliverable2);
      const publishedDeliverable2 = getEntry({});
      publishedDeliverable2.sys.id = 'contentful-deliverable-2';
      jest
        .spyOn(createdDeliverable2, 'publish')
        .mockResolvedValue(publishedDeliverable2);

      squidexGraphqlClientMock.request.mockResolvedValueOnce(
        workingGroupSquidexResponse,
      );

      await migrateWorkingGroups();

      expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
        'workingGroups',
        'wg-1',
        {
          fields: {
            ...baseCreatePayload,
            deliverables: {
              'en-US': [
                {
                  sys: {
                    id: 'contentful-deliverable-1',
                    linkType: 'Entry',
                    type: 'Link',
                  },
                },
                {
                  sys: {
                    id: 'contentful-deliverable-2',
                    linkType: 'Entry',
                    type: 'Link',
                  },
                },
              ],
            },
          },
        },
      );
    });

    it('with leaders and members', async () => {
      const workingGroupSquidexResponse = getWorkingGroupSquidexResponse();
      workingGroupSquidexResponse.queryWorkingGroupsContentsWithTotal!.items![0].flatData.leaders =
        [
          {
            workstreamRole: 'PM',
            role: 'Project Manager',
            inactiveSinceDate: null,
            user: [],
          },
          {
            workstreamRole: 'PM',
            role: 'Project Manager',
            inactiveSinceDate: null,
            user: [
              {
                id: 'leader-1',
              },
            ],
          },
        ];
      workingGroupSquidexResponse.queryWorkingGroupsContentsWithTotal!.items![0].flatData.members =
        [
          {
            inactiveSinceDate: null,
            user: null,
          },
          {
            inactiveSinceDate: null,
            user: [
              {
                id: 'member-1',
              },
            ],
          },
        ];

      const createdWorkingGroupsLeader = getEntry({});
      when(contentfulEnv.createEntry)
        .calledWith('workingGroupLeaders', {
          fields: {
            workstreamRole: {
              'en-US': 'PM',
            },
            role: {
              'en-US': 'Project Manager',
            },
            inactiveSinceDate: {
              'en-US': null,
            },
            user: {
              'en-US': {
                sys: {
                  type: 'Link',
                  linkType: 'Entry',
                  id: 'leader-1',
                },
              },
            },
          },
        })
        .mockResolvedValue(createdWorkingGroupsLeader);
      const publishedWorkingGroupsLeader = getEntry({});
      publishedWorkingGroupsLeader.sys.id = 'contentful-leader-1';
      jest
        .spyOn(createdWorkingGroupsLeader, 'publish')
        .mockResolvedValue(publishedWorkingGroupsLeader);

      const createdWorkingGroupsMember = getEntry({});
      when(contentfulEnv.createEntry)
        .calledWith('workingGroupMembers', {
          fields: {
            inactiveSinceDate: {
              'en-US': null,
            },
            user: {
              'en-US': {
                sys: {
                  type: 'Link',
                  linkType: 'Entry',
                  id: 'member-1',
                },
              },
            },
          },
        })
        .mockResolvedValue(createdWorkingGroupsMember);
      const publishedWorkingGroupsMember = getEntry({});
      publishedWorkingGroupsMember.sys.id = 'contentful-member-1';
      jest
        .spyOn(createdWorkingGroupsMember, 'publish')
        .mockResolvedValue(publishedWorkingGroupsMember);

      squidexGraphqlClientMock.request.mockResolvedValueOnce(
        workingGroupSquidexResponse,
      );

      await migrateWorkingGroups();

      expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
        'workingGroups',
        'wg-1',
        {
          fields: {
            ...baseCreatePayload,
            members: {
              'en-US': [
                {
                  sys: {
                    id: 'contentful-leader-1',
                    linkType: 'Entry',
                    type: 'Link',
                  },
                },
                {
                  sys: {
                    id: 'contentful-member-1',
                    linkType: 'Entry',
                    type: 'Link',
                  },
                },
              ],
            },
          },
        },
      );
    });

    it('with linked calendar', async () => {
      const workingGroupSquidexResponse = getWorkingGroupSquidexResponse();
      workingGroupSquidexResponse.queryWorkingGroupsContentsWithTotal!.items![0].flatData.calendars =
        [
          {
            id: 'calendar-1',
          },
        ];

      squidexGraphqlClientMock.request.mockResolvedValueOnce(
        workingGroupSquidexResponse,
      );

      await migrateWorkingGroups();

      expect(contentfulEnv.createEntryWithId).toHaveBeenCalledWith(
        'workingGroups',
        'wg-1',
        {
          fields: {
            ...baseCreatePayload,
            calendars: {
              'en-US': {
                sys: { id: 'calendar-1', linkType: 'Entry', type: 'Link' },
              },
            },
          },
        },
      );
    });
  });
});
