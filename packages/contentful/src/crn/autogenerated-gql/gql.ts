/* eslint-disable */
import * as graphql from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
  '\n  fragment CalendarsContent on Calendars {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    googleCalendarId\n    name\n    color\n    googleApiMetadata\n    linkedFrom {\n      workingGroupsCollection(limit: 1) {\n        items {\n          sys {\n            id\n          }\n          complete\n        }\n      }\n      interestGroupsCollection(limit: 1) {\n        items {\n          sys {\n            id\n          }\n          active\n        }\n      }\n    }\n  }\n':
    graphql.CalendarsContentFragmentDoc,
  '\n  query FetchCalendarById($id: String!) {\n    calendars(id: $id) {\n      ...CalendarsContent\n    }\n  }\n  \n':
    graphql.FetchCalendarByIdDocument,
  '\n  query FetchCalendars(\n    $limit: Int\n    $skip: Int\n    $order: [CalendarsOrder]\n    $where: CalendarsFilter\n  ) {\n    calendarsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...CalendarsContent\n      }\n    }\n  }\n  \n':
    graphql.FetchCalendarsDocument,
  '\n  query FetchDashboard {\n    dashboardCollection(limit: 1, order: sys_publishedAt_DESC) {\n      items {\n        newsCollection {\n          items {\n            ...NewsContent\n          }\n        }\n\n        pagesCollection {\n          items {\n            ...PageContent\n          }\n        }\n      }\n    }\n  }\n  \n  \n':
    graphql.FetchDashboardDocument,
  '\n  fragment PartialUsersContent on Users {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n\n    email\n    firstName\n    institution\n    jobTitle\n    lastName\n    avatar {\n      url\n    }\n  }\n':
    graphql.PartialUsersContentFragmentDoc,
  '\n  query FetchDiscover {\n    discoverCollection(limit: 1, order: sys_publishedAt_DESC) {\n      items {\n        pagesCollection(limit: 20) {\n          items {\n            ...PageContent\n          }\n        }\n        trainingCollection(limit: 20) {\n          items {\n            ...TutorialsContent\n          }\n        }\n        aboutUs {\n          json\n          links {\n            entries {\n              inline {\n                sys {\n                  id\n                }\n                __typename\n                ... on Media {\n                  url\n                }\n              }\n            }\n            assets {\n              block {\n                sys {\n                  id\n                }\n                url\n                description\n                contentType\n                width\n                height\n              }\n            }\n          }\n        }\n        membersCollection {\n          items {\n            ...PartialUsersContent\n          }\n        }\n        membersTeam {\n          sys {\n            id\n          }\n        }\n        scientificAdvisoryBoardCollection {\n          items {\n            ...PartialUsersContent\n          }\n        }\n      }\n    }\n  }\n  \n  \n  \n':
    graphql.FetchDiscoverDocument,
  '\n  fragment EventsContent on Events {\n    sys {\n      id\n      publishedAt\n      publishedVersion\n    }\n    description\n    endDate\n    endDateTimeZone\n    startDate\n    startDateTimeZone\n    meetingLink\n    hideMeetingLink\n    eventLink\n    status\n    hidden\n    tags\n    title\n    notesPermanentlyUnavailable\n    notes {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    notesUpdatedAt\n    videoRecordingPermanentlyUnavailable\n    videoRecording {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    videoRecordingUpdatedAt\n    presentationPermanentlyUnavailable\n    presentation {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    presentationUpdatedAt\n    meetingMaterialsPermanentlyUnavailable\n    meetingMaterials\n    calendar {\n      googleCalendarId\n      color\n      name\n      linkedFrom {\n        workingGroupsCollection(limit: 1) {\n          items {\n            sys {\n              id\n            }\n            title\n          }\n        }\n        interestGroupsCollection(limit: 1) {\n          items {\n            sys {\n              id\n            }\n            name\n            active\n            slack\n            googleDrive\n          }\n        }\n      }\n    }\n    thumbnail {\n      url\n    }\n    speakersCollection(limit: 10) {\n      items {\n        team {\n          sys {\n            id\n          }\n          displayName\n          inactiveSince\n        }\n        user {\n          __typename\n          ... on ExternalAuthors {\n            name\n            orcid\n          }\n          ... on Users {\n            sys {\n              id\n            }\n            alumniSinceDate\n            alumniLocation\n            firstName\n            lastName\n            onboarded\n            teamsCollection(limit: 5) {\n              items {\n                sys {\n                  id\n                }\n                role\n              }\n            }\n            avatar {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n':
    graphql.EventsContentFragmentDoc,
  '\n  query FetchEventById($id: String!) {\n    events(id: $id) {\n      ...EventsContent\n    }\n  }\n  \n':
    graphql.FetchEventByIdDocument,
  '\n  query FetchEvents(\n    $limit: Int\n    $skip: Int\n    $order: [EventsOrder]\n    $where: EventsFilter\n  ) {\n    eventsCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...EventsContent\n      }\n    }\n  }\n  \n':
    graphql.FetchEventsDocument,
  '\n  query FetchEventsByUserId($id: String!, $limit: Int, $skip: Int) {\n    users(id: $id) {\n      linkedFrom {\n        eventSpeakersCollection(limit: 1) {\n          items {\n            linkedFrom {\n              eventsCollection(limit: $limit, skip: $skip) {\n                total\n                items {\n                  ...EventsContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n':
    graphql.FetchEventsByUserIdDocument,
  '\n  query FetchEventsByExternalAuthorId($id: String!, $limit: Int, $skip: Int) {\n    externalAuthors(id: $id) {\n      linkedFrom {\n        eventSpeakersCollection(limit: 1) {\n          items {\n            linkedFrom {\n              eventsCollection(limit: $limit, skip: $skip) {\n                total\n                items {\n                  ...EventsContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n':
    graphql.FetchEventsByExternalAuthorIdDocument,
  '\n  query FetchEventsByTeamId($id: String!, $limit: Int, $skip: Int) {\n    teams(id: $id) {\n      linkedFrom {\n        eventSpeakersCollection(limit: 1) {\n          items {\n            linkedFrom {\n              eventsCollection(limit: $limit, skip: $skip) {\n                total\n                items {\n                  ...EventsContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n':
    graphql.FetchEventsByTeamIdDocument,
  '\n  query FetchWorkingGroupCalendar($id: String!) {\n    workingGroups(id: $id) {\n      calendars {\n        sys {\n          id\n        }\n      }\n    }\n  }\n':
    graphql.FetchWorkingGroupCalendarDocument,
  '\n  query FetchInterestGroupCalendar($id: String!) {\n    interestGroups(id: $id) {\n      calendar {\n        sys {\n          id\n        }\n      }\n    }\n  }\n':
    graphql.FetchInterestGroupCalendarDocument,
  '\n  fragment ExternalAuthorsContent on ExternalAuthors {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    name\n    orcid\n  }\n':
    graphql.ExternalAuthorsContentFragmentDoc,
  '\n  query FetchExternalAuthorById($id: String!) {\n    externalAuthors(id: $id) {\n      ...ExternalAuthorsContent\n    }\n  }\n  \n':
    graphql.FetchExternalAuthorByIdDocument,
  '\n  query FetchExternalAuthors(\n    $limit: Int\n    $skip: Int\n    $order: [ExternalAuthorsOrder]\n  ) {\n    externalAuthorsCollection(limit: $limit, skip: $skip, order: $order) {\n      total\n      items {\n        ...ExternalAuthorsContent\n      }\n    }\n  }\n  \n':
    graphql.FetchExternalAuthorsDocument,
  '\n  fragment InterestGroupsContent on InterestGroups {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    name\n    active\n    tags\n    description\n    slack\n    googleDrive\n    thumbnail {\n      url\n    }\n    teamsCollection(limit: 50) {\n      items {\n        sys {\n          id\n          publishedAt\n        }\n        displayName\n        inactiveSince\n        expertiseAndResourceTags\n        projectTitle\n      }\n    }\n    leadersCollection(limit: 20) {\n      items {\n        sys {\n          id\n          publishedAt\n        }\n        user {\n          sys {\n            id\n            publishedAt\n            firstPublishedAt\n          }\n          firstName\n          lastName\n          email\n          alumniSinceDate\n          avatar {\n            url\n          }\n          teamsCollection(limit: 5) {\n            items {\n              role\n              inactiveSinceDate\n              team {\n                sys {\n                  id\n                }\n                inactiveSince\n                displayName\n              }\n            }\n          }\n        }\n        role\n        inactiveSinceDate\n      }\n    }\n    calendar {\n      sys {\n        id\n      }\n      color\n      googleCalendarId\n      name\n    }\n  }\n':
    graphql.InterestGroupsContentFragmentDoc,
  '\n  query FetchInterestGroupById($id: String!) {\n    interestGroups(id: $id) {\n      ...InterestGroupsContent\n    }\n  }\n  \n':
    graphql.FetchInterestGroupByIdDocument,
  '\n  query FetchInterestGroups(\n    $limit: Int\n    $skip: Int\n    $order: [InterestGroupsOrder]\n    $where: InterestGroupsFilter\n  ) {\n    interestGroupsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...InterestGroupsContent\n      }\n    }\n  }\n  \n':
    graphql.FetchInterestGroupsDocument,
  '\n  query FetchInterestGroupsByUserId($id: String!, $limit: Int, $skip: Int) {\n    interestGroupLeadersCollection(\n      limit: $limit\n      skip: $skip\n      where: { user: { sys: { id: $id } } }\n    ) {\n      total\n      items {\n        linkedFrom {\n          interestGroupsCollection(limit: 1) {\n            items {\n              ...InterestGroupsContent\n            }\n          }\n        }\n      }\n    }\n  }\n  \n':
    graphql.FetchInterestGroupsByUserIdDocument,
  '\n  fragment NewsContent on News {\n    sys {\n      id\n      firstPublishedAt\n    }\n    title\n    shortText\n    frequency\n    link\n    linkText\n    thumbnail {\n      url\n    }\n    text {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    publishDate\n  }\n':
    graphql.NewsContentFragmentDoc,
  '\n  query FetchNewsById($id: String!) {\n    news(id: $id) {\n      ...NewsContent\n    }\n  }\n  \n':
    graphql.FetchNewsByIdDocument,
  '\n  query FetchNews(\n    $limit: Int\n    $skip: Int\n    $order: [NewsOrder]\n    $where: NewsFilter\n  ) {\n    newsCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...NewsContent\n      }\n    }\n  }\n  \n':
    graphql.FetchNewsDocument,
  '\n  fragment PageContent on Pages {\n    sys {\n      id\n    }\n    title\n    path\n    shortText\n    text {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    link\n    linkText\n  }\n':
    graphql.PageContentFragmentDoc,
  '\n  query FetchPages($where: PagesFilter) {\n    pagesCollection(limit: 100, where: $where) {\n      total\n      items {\n        ...PageContent\n      }\n    }\n  }\n  \n':
    graphql.FetchPagesDocument,
  '\n  fragment TeamsContent on Teams {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    displayName\n    applicationNumber\n    inactiveSince\n    projectSummary\n    projectTitle\n    expertiseAndResourceTags\n    toolsCollection {\n      items {\n        name\n        description\n        url\n      }\n    }\n    linkedFrom {\n      teamMembershipCollection(limit: 100) {\n        items {\n          role\n          inactiveSinceDate\n          linkedFrom {\n            usersCollection(limit: 1) {\n              items {\n                sys {\n                  id\n                }\n                firstName\n                lastName\n                email\n                alumniSinceDate\n                avatar {\n                  url\n                }\n                labsCollection(limit: 5) {\n                  items {\n                    sys {\n                      id\n                    }\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n':
    graphql.TeamsContentFragmentDoc,
  '\n  query FetchTeamById($id: String!) {\n    teams(id: $id) {\n      ...TeamsContent\n    }\n  }\n  \n':
    graphql.FetchTeamByIdDocument,
  '\n  query FetchTeams(\n    $limit: Int\n    $skip: Int\n    $order: [TeamsOrder]\n    $where: TeamsFilter\n  ) {\n    teamsCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...TeamsContent\n      }\n    }\n  }\n  \n':
    graphql.FetchTeamsDocument,
  '\n  fragment TutorialsContent on Tutorials {\n    sys {\n      id\n      firstPublishedAt\n    }\n    title\n    shortText\n    thumbnail {\n      url\n    }\n    link\n    linkText\n    text {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n  }\n':
    graphql.TutorialsContentFragmentDoc,
  '\n  query FetchTutorialById($id: String!) {\n    tutorials(id: $id) {\n      ...TutorialsContent\n    }\n  }\n  \n':
    graphql.FetchTutorialByIdDocument,
  '\n  fragment UsersContent on Users {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n\n    alumniSinceDate\n    alumniLocation\n    biography\n    connections\n    createdDate\n    degree\n    email\n    contactEmail\n    dismissedGettingStarted\n    firstName\n    institution\n    jobTitle\n    lastName\n    country\n    city\n    onboarded\n    orcid\n    orcidLastModifiedDate\n    orcidLastSyncDate\n    orcidWorks\n    questions\n    expertiseAndResourceTags\n    expertiseAndResourceDescription\n    github\n    googleScholar\n    linkedIn\n    researcherId\n    researchGate\n    twitter\n    website1\n    website2\n    role\n    responsibilities\n    researchInterests\n    reachOut\n    avatar {\n      url\n    }\n    teamsCollection(limit: 100) {\n      items {\n        team {\n          sys {\n            id\n          }\n          displayName\n          inactiveSince\n        }\n        role\n        inactiveSinceDate\n      }\n    }\n    labsCollection(limit: 10) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n  }\n':
    graphql.UsersContentFragmentDoc,
  '\n  query FetchUserById($id: String!) {\n    users(id: $id) {\n      ...UsersContent\n    }\n  }\n  \n':
    graphql.FetchUserByIdDocument,
  '\n  query FetchUsers(\n    $limit: Int\n    $skip: Int\n    $order: [UsersOrder]\n    $where: UsersFilter\n  ) {\n    usersCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...UsersContent\n      }\n    }\n  }\n  \n':
    graphql.FetchUsersDocument,
  '\n  query FetchUsersByTeamId($id: String!, $limit: Int, $skip: Int) {\n    teamMembershipCollection(\n      limit: $limit\n      skip: $skip\n      where: { team: { sys: { id: $id } } }\n    ) {\n      total\n      items {\n        linkedFrom {\n          usersCollection(limit: 1) {\n            items {\n              ...UsersContent\n            }\n          }\n        }\n      }\n    }\n  }\n  \n':
    graphql.FetchUsersByTeamIdDocument,
  '\n  query FetchUsersByLabId($id: String!, $limit: Int, $skip: Int) {\n    labs(id: $id) {\n      linkedFrom {\n        usersCollection(limit: $limit, skip: $skip) {\n          total\n          items {\n            ...UsersContent\n          }\n        }\n      }\n    }\n  }\n  \n':
    graphql.FetchUsersByLabIdDocument,
  '\n  fragment WorkingGroupsContent on WorkingGroups {\n    sys {\n      id\n      publishedAt\n    }\n    title\n    description {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    externalLink\n    shortText\n    complete\n    deliverablesCollection {\n      items {\n        description\n        status\n      }\n    }\n    membersCollection {\n      items {\n        __typename\n        ... on WorkingGroupLeaders {\n          workstreamRole\n          role\n          inactiveSinceDate\n          user {\n            sys {\n              id\n            }\n            avatar {\n              url\n            }\n            email\n            firstName\n            lastName\n            alumniSinceDate\n          }\n        }\n        __typename\n        ... on WorkingGroupMembers {\n          inactiveSinceDate\n          user {\n            sys {\n              id\n            }\n            avatar {\n              url\n            }\n            email\n            firstName\n            lastName\n            alumniSinceDate\n          }\n        }\n      }\n    }\n    calendars {\n      sys {\n        id\n      }\n      name\n      color\n      googleCalendarId\n    }\n  }\n':
    graphql.WorkingGroupsContentFragmentDoc,
  '\n  query FetchWorkingGroupById($id: String!) {\n    workingGroups(id: $id) {\n      ...WorkingGroupsContent\n    }\n  }\n  \n':
    graphql.FetchWorkingGroupByIdDocument,
  '\n  query FetchWorkingGroups(\n    $limit: Int\n    $skip: Int\n    $order: [WorkingGroupsOrder]\n    $where: WorkingGroupsFilter\n  ) {\n    workingGroupsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...WorkingGroupsContent\n      }\n    }\n  }\n  \n':
    graphql.FetchWorkingGroupsDocument,
};

export function gql(
  source: '\n  fragment CalendarsContent on Calendars {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    googleCalendarId\n    name\n    color\n    googleApiMetadata\n    linkedFrom {\n      workingGroupsCollection(limit: 1) {\n        items {\n          sys {\n            id\n          }\n          complete\n        }\n      }\n      interestGroupsCollection(limit: 1) {\n        items {\n          sys {\n            id\n          }\n          active\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  fragment CalendarsContent on Calendars {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    googleCalendarId\n    name\n    color\n    googleApiMetadata\n    linkedFrom {\n      workingGroupsCollection(limit: 1) {\n        items {\n          sys {\n            id\n          }\n          complete\n        }\n      }\n      interestGroupsCollection(limit: 1) {\n        items {\n          sys {\n            id\n          }\n          active\n        }\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchCalendarById($id: String!) {\n    calendars(id: $id) {\n      ...CalendarsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchCalendarById($id: String!) {\n    calendars(id: $id) {\n      ...CalendarsContent\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchCalendars(\n    $limit: Int\n    $skip: Int\n    $order: [CalendarsOrder]\n    $where: CalendarsFilter\n  ) {\n    calendarsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...CalendarsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchCalendars(\n    $limit: Int\n    $skip: Int\n    $order: [CalendarsOrder]\n    $where: CalendarsFilter\n  ) {\n    calendarsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...CalendarsContent\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchDashboard {\n    dashboardCollection(limit: 1, order: sys_publishedAt_DESC) {\n      items {\n        newsCollection {\n          items {\n            ...NewsContent\n          }\n        }\n\n        pagesCollection {\n          items {\n            ...PageContent\n          }\n        }\n      }\n    }\n  }\n  \n  \n',
): (typeof documents)['\n  query FetchDashboard {\n    dashboardCollection(limit: 1, order: sys_publishedAt_DESC) {\n      items {\n        newsCollection {\n          items {\n            ...NewsContent\n          }\n        }\n\n        pagesCollection {\n          items {\n            ...PageContent\n          }\n        }\n      }\n    }\n  }\n  \n  \n'];
export function gql(
  source: '\n  fragment PartialUsersContent on Users {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n\n    email\n    firstName\n    institution\n    jobTitle\n    lastName\n    avatar {\n      url\n    }\n  }\n',
): (typeof documents)['\n  fragment PartialUsersContent on Users {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n\n    email\n    firstName\n    institution\n    jobTitle\n    lastName\n    avatar {\n      url\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchDiscover {\n    discoverCollection(limit: 1, order: sys_publishedAt_DESC) {\n      items {\n        pagesCollection(limit: 20) {\n          items {\n            ...PageContent\n          }\n        }\n        trainingCollection(limit: 20) {\n          items {\n            ...TutorialsContent\n          }\n        }\n        aboutUs {\n          json\n          links {\n            entries {\n              inline {\n                sys {\n                  id\n                }\n                __typename\n                ... on Media {\n                  url\n                }\n              }\n            }\n            assets {\n              block {\n                sys {\n                  id\n                }\n                url\n                description\n                contentType\n                width\n                height\n              }\n            }\n          }\n        }\n        membersCollection {\n          items {\n            ...PartialUsersContent\n          }\n        }\n        membersTeam {\n          sys {\n            id\n          }\n        }\n        scientificAdvisoryBoardCollection {\n          items {\n            ...PartialUsersContent\n          }\n        }\n      }\n    }\n  }\n  \n  \n  \n',
): (typeof documents)['\n  query FetchDiscover {\n    discoverCollection(limit: 1, order: sys_publishedAt_DESC) {\n      items {\n        pagesCollection(limit: 20) {\n          items {\n            ...PageContent\n          }\n        }\n        trainingCollection(limit: 20) {\n          items {\n            ...TutorialsContent\n          }\n        }\n        aboutUs {\n          json\n          links {\n            entries {\n              inline {\n                sys {\n                  id\n                }\n                __typename\n                ... on Media {\n                  url\n                }\n              }\n            }\n            assets {\n              block {\n                sys {\n                  id\n                }\n                url\n                description\n                contentType\n                width\n                height\n              }\n            }\n          }\n        }\n        membersCollection {\n          items {\n            ...PartialUsersContent\n          }\n        }\n        membersTeam {\n          sys {\n            id\n          }\n        }\n        scientificAdvisoryBoardCollection {\n          items {\n            ...PartialUsersContent\n          }\n        }\n      }\n    }\n  }\n  \n  \n  \n'];
export function gql(
  source: '\n  fragment EventsContent on Events {\n    sys {\n      id\n      publishedAt\n      publishedVersion\n    }\n    description\n    endDate\n    endDateTimeZone\n    startDate\n    startDateTimeZone\n    meetingLink\n    hideMeetingLink\n    eventLink\n    status\n    hidden\n    tags\n    title\n    notesPermanentlyUnavailable\n    notes {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    notesUpdatedAt\n    videoRecordingPermanentlyUnavailable\n    videoRecording {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    videoRecordingUpdatedAt\n    presentationPermanentlyUnavailable\n    presentation {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    presentationUpdatedAt\n    meetingMaterialsPermanentlyUnavailable\n    meetingMaterials\n    calendar {\n      googleCalendarId\n      color\n      name\n      linkedFrom {\n        workingGroupsCollection(limit: 1) {\n          items {\n            sys {\n              id\n            }\n            title\n          }\n        }\n        interestGroupsCollection(limit: 1) {\n          items {\n            sys {\n              id\n            }\n            name\n            active\n            slack\n            googleDrive\n          }\n        }\n      }\n    }\n    thumbnail {\n      url\n    }\n    speakersCollection(limit: 10) {\n      items {\n        team {\n          sys {\n            id\n          }\n          displayName\n          inactiveSince\n        }\n        user {\n          __typename\n          ... on ExternalAuthors {\n            name\n            orcid\n          }\n          ... on Users {\n            sys {\n              id\n            }\n            alumniSinceDate\n            alumniLocation\n            firstName\n            lastName\n            onboarded\n            teamsCollection(limit: 5) {\n              items {\n                sys {\n                  id\n                }\n                role\n              }\n            }\n            avatar {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  fragment EventsContent on Events {\n    sys {\n      id\n      publishedAt\n      publishedVersion\n    }\n    description\n    endDate\n    endDateTimeZone\n    startDate\n    startDateTimeZone\n    meetingLink\n    hideMeetingLink\n    eventLink\n    status\n    hidden\n    tags\n    title\n    notesPermanentlyUnavailable\n    notes {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    notesUpdatedAt\n    videoRecordingPermanentlyUnavailable\n    videoRecording {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    videoRecordingUpdatedAt\n    presentationPermanentlyUnavailable\n    presentation {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    presentationUpdatedAt\n    meetingMaterialsPermanentlyUnavailable\n    meetingMaterials\n    calendar {\n      googleCalendarId\n      color\n      name\n      linkedFrom {\n        workingGroupsCollection(limit: 1) {\n          items {\n            sys {\n              id\n            }\n            title\n          }\n        }\n        interestGroupsCollection(limit: 1) {\n          items {\n            sys {\n              id\n            }\n            name\n            active\n            slack\n            googleDrive\n          }\n        }\n      }\n    }\n    thumbnail {\n      url\n    }\n    speakersCollection(limit: 10) {\n      items {\n        team {\n          sys {\n            id\n          }\n          displayName\n          inactiveSince\n        }\n        user {\n          __typename\n          ... on ExternalAuthors {\n            name\n            orcid\n          }\n          ... on Users {\n            sys {\n              id\n            }\n            alumniSinceDate\n            alumniLocation\n            firstName\n            lastName\n            onboarded\n            teamsCollection(limit: 5) {\n              items {\n                sys {\n                  id\n                }\n                role\n              }\n            }\n            avatar {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchEventById($id: String!) {\n    events(id: $id) {\n      ...EventsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchEventById($id: String!) {\n    events(id: $id) {\n      ...EventsContent\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchEvents(\n    $limit: Int\n    $skip: Int\n    $order: [EventsOrder]\n    $where: EventsFilter\n  ) {\n    eventsCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...EventsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchEvents(\n    $limit: Int\n    $skip: Int\n    $order: [EventsOrder]\n    $where: EventsFilter\n  ) {\n    eventsCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...EventsContent\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchEventsByUserId($id: String!, $limit: Int, $skip: Int) {\n    users(id: $id) {\n      linkedFrom {\n        eventSpeakersCollection(limit: 1) {\n          items {\n            linkedFrom {\n              eventsCollection(limit: $limit, skip: $skip) {\n                total\n                items {\n                  ...EventsContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchEventsByUserId($id: String!, $limit: Int, $skip: Int) {\n    users(id: $id) {\n      linkedFrom {\n        eventSpeakersCollection(limit: 1) {\n          items {\n            linkedFrom {\n              eventsCollection(limit: $limit, skip: $skip) {\n                total\n                items {\n                  ...EventsContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchEventsByExternalAuthorId($id: String!, $limit: Int, $skip: Int) {\n    externalAuthors(id: $id) {\n      linkedFrom {\n        eventSpeakersCollection(limit: 1) {\n          items {\n            linkedFrom {\n              eventsCollection(limit: $limit, skip: $skip) {\n                total\n                items {\n                  ...EventsContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchEventsByExternalAuthorId($id: String!, $limit: Int, $skip: Int) {\n    externalAuthors(id: $id) {\n      linkedFrom {\n        eventSpeakersCollection(limit: 1) {\n          items {\n            linkedFrom {\n              eventsCollection(limit: $limit, skip: $skip) {\n                total\n                items {\n                  ...EventsContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchEventsByTeamId($id: String!, $limit: Int, $skip: Int) {\n    teams(id: $id) {\n      linkedFrom {\n        eventSpeakersCollection(limit: 1) {\n          items {\n            linkedFrom {\n              eventsCollection(limit: $limit, skip: $skip) {\n                total\n                items {\n                  ...EventsContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchEventsByTeamId($id: String!, $limit: Int, $skip: Int) {\n    teams(id: $id) {\n      linkedFrom {\n        eventSpeakersCollection(limit: 1) {\n          items {\n            linkedFrom {\n              eventsCollection(limit: $limit, skip: $skip) {\n                total\n                items {\n                  ...EventsContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchWorkingGroupCalendar($id: String!) {\n    workingGroups(id: $id) {\n      calendars {\n        sys {\n          id\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchWorkingGroupCalendar($id: String!) {\n    workingGroups(id: $id) {\n      calendars {\n        sys {\n          id\n        }\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchInterestGroupCalendar($id: String!) {\n    interestGroups(id: $id) {\n      calendar {\n        sys {\n          id\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchInterestGroupCalendar($id: String!) {\n    interestGroups(id: $id) {\n      calendar {\n        sys {\n          id\n        }\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  fragment ExternalAuthorsContent on ExternalAuthors {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    name\n    orcid\n  }\n',
): (typeof documents)['\n  fragment ExternalAuthorsContent on ExternalAuthors {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    name\n    orcid\n  }\n'];
export function gql(
  source: '\n  query FetchExternalAuthorById($id: String!) {\n    externalAuthors(id: $id) {\n      ...ExternalAuthorsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchExternalAuthorById($id: String!) {\n    externalAuthors(id: $id) {\n      ...ExternalAuthorsContent\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchExternalAuthors(\n    $limit: Int\n    $skip: Int\n    $order: [ExternalAuthorsOrder]\n  ) {\n    externalAuthorsCollection(limit: $limit, skip: $skip, order: $order) {\n      total\n      items {\n        ...ExternalAuthorsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchExternalAuthors(\n    $limit: Int\n    $skip: Int\n    $order: [ExternalAuthorsOrder]\n  ) {\n    externalAuthorsCollection(limit: $limit, skip: $skip, order: $order) {\n      total\n      items {\n        ...ExternalAuthorsContent\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  fragment InterestGroupsContent on InterestGroups {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    name\n    active\n    tags\n    description\n    slack\n    googleDrive\n    thumbnail {\n      url\n    }\n    teamsCollection(limit: 50) {\n      items {\n        sys {\n          id\n          publishedAt\n        }\n        displayName\n        inactiveSince\n        expertiseAndResourceTags\n        projectTitle\n      }\n    }\n    leadersCollection(limit: 20) {\n      items {\n        sys {\n          id\n          publishedAt\n        }\n        user {\n          sys {\n            id\n            publishedAt\n            firstPublishedAt\n          }\n          firstName\n          lastName\n          email\n          alumniSinceDate\n          avatar {\n            url\n          }\n          teamsCollection(limit: 5) {\n            items {\n              role\n              inactiveSinceDate\n              team {\n                sys {\n                  id\n                }\n                inactiveSince\n                displayName\n              }\n            }\n          }\n        }\n        role\n        inactiveSinceDate\n      }\n    }\n    calendar {\n      sys {\n        id\n      }\n      color\n      googleCalendarId\n      name\n    }\n  }\n',
): (typeof documents)['\n  fragment InterestGroupsContent on InterestGroups {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    name\n    active\n    tags\n    description\n    slack\n    googleDrive\n    thumbnail {\n      url\n    }\n    teamsCollection(limit: 50) {\n      items {\n        sys {\n          id\n          publishedAt\n        }\n        displayName\n        inactiveSince\n        expertiseAndResourceTags\n        projectTitle\n      }\n    }\n    leadersCollection(limit: 20) {\n      items {\n        sys {\n          id\n          publishedAt\n        }\n        user {\n          sys {\n            id\n            publishedAt\n            firstPublishedAt\n          }\n          firstName\n          lastName\n          email\n          alumniSinceDate\n          avatar {\n            url\n          }\n          teamsCollection(limit: 5) {\n            items {\n              role\n              inactiveSinceDate\n              team {\n                sys {\n                  id\n                }\n                inactiveSince\n                displayName\n              }\n            }\n          }\n        }\n        role\n        inactiveSinceDate\n      }\n    }\n    calendar {\n      sys {\n        id\n      }\n      color\n      googleCalendarId\n      name\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchInterestGroupById($id: String!) {\n    interestGroups(id: $id) {\n      ...InterestGroupsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchInterestGroupById($id: String!) {\n    interestGroups(id: $id) {\n      ...InterestGroupsContent\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchInterestGroups(\n    $limit: Int\n    $skip: Int\n    $order: [InterestGroupsOrder]\n    $where: InterestGroupsFilter\n  ) {\n    interestGroupsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...InterestGroupsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchInterestGroups(\n    $limit: Int\n    $skip: Int\n    $order: [InterestGroupsOrder]\n    $where: InterestGroupsFilter\n  ) {\n    interestGroupsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...InterestGroupsContent\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchInterestGroupsByUserId($id: String!, $limit: Int, $skip: Int) {\n    interestGroupLeadersCollection(\n      limit: $limit\n      skip: $skip\n      where: { user: { sys: { id: $id } } }\n    ) {\n      total\n      items {\n        linkedFrom {\n          interestGroupsCollection(limit: 1) {\n            items {\n              ...InterestGroupsContent\n            }\n          }\n        }\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchInterestGroupsByUserId($id: String!, $limit: Int, $skip: Int) {\n    interestGroupLeadersCollection(\n      limit: $limit\n      skip: $skip\n      where: { user: { sys: { id: $id } } }\n    ) {\n      total\n      items {\n        linkedFrom {\n          interestGroupsCollection(limit: 1) {\n            items {\n              ...InterestGroupsContent\n            }\n          }\n        }\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  fragment NewsContent on News {\n    sys {\n      id\n      firstPublishedAt\n    }\n    title\n    shortText\n    frequency\n    link\n    linkText\n    thumbnail {\n      url\n    }\n    text {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    publishDate\n  }\n',
): (typeof documents)['\n  fragment NewsContent on News {\n    sys {\n      id\n      firstPublishedAt\n    }\n    title\n    shortText\n    frequency\n    link\n    linkText\n    thumbnail {\n      url\n    }\n    text {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    publishDate\n  }\n'];
export function gql(
  source: '\n  query FetchNewsById($id: String!) {\n    news(id: $id) {\n      ...NewsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchNewsById($id: String!) {\n    news(id: $id) {\n      ...NewsContent\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchNews(\n    $limit: Int\n    $skip: Int\n    $order: [NewsOrder]\n    $where: NewsFilter\n  ) {\n    newsCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...NewsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchNews(\n    $limit: Int\n    $skip: Int\n    $order: [NewsOrder]\n    $where: NewsFilter\n  ) {\n    newsCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...NewsContent\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  fragment PageContent on Pages {\n    sys {\n      id\n    }\n    title\n    path\n    shortText\n    text {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    link\n    linkText\n  }\n',
): (typeof documents)['\n  fragment PageContent on Pages {\n    sys {\n      id\n    }\n    title\n    path\n    shortText\n    text {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    link\n    linkText\n  }\n'];
export function gql(
  source: '\n  query FetchPages($where: PagesFilter) {\n    pagesCollection(limit: 100, where: $where) {\n      total\n      items {\n        ...PageContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchPages($where: PagesFilter) {\n    pagesCollection(limit: 100, where: $where) {\n      total\n      items {\n        ...PageContent\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  fragment TeamsContent on Teams {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    displayName\n    applicationNumber\n    inactiveSince\n    projectSummary\n    projectTitle\n    expertiseAndResourceTags\n    toolsCollection {\n      items {\n        name\n        description\n        url\n      }\n    }\n    linkedFrom {\n      teamMembershipCollection(limit: 100) {\n        items {\n          role\n          inactiveSinceDate\n          linkedFrom {\n            usersCollection(limit: 1) {\n              items {\n                sys {\n                  id\n                }\n                firstName\n                lastName\n                email\n                alumniSinceDate\n                avatar {\n                  url\n                }\n                labsCollection(limit: 5) {\n                  items {\n                    sys {\n                      id\n                    }\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  fragment TeamsContent on Teams {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    displayName\n    applicationNumber\n    inactiveSince\n    projectSummary\n    projectTitle\n    expertiseAndResourceTags\n    toolsCollection {\n      items {\n        name\n        description\n        url\n      }\n    }\n    linkedFrom {\n      teamMembershipCollection(limit: 100) {\n        items {\n          role\n          inactiveSinceDate\n          linkedFrom {\n            usersCollection(limit: 1) {\n              items {\n                sys {\n                  id\n                }\n                firstName\n                lastName\n                email\n                alumniSinceDate\n                avatar {\n                  url\n                }\n                labsCollection(limit: 5) {\n                  items {\n                    sys {\n                      id\n                    }\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchTeamById($id: String!) {\n    teams(id: $id) {\n      ...TeamsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchTeamById($id: String!) {\n    teams(id: $id) {\n      ...TeamsContent\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchTeams(\n    $limit: Int\n    $skip: Int\n    $order: [TeamsOrder]\n    $where: TeamsFilter\n  ) {\n    teamsCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...TeamsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchTeams(\n    $limit: Int\n    $skip: Int\n    $order: [TeamsOrder]\n    $where: TeamsFilter\n  ) {\n    teamsCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...TeamsContent\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  fragment TutorialsContent on Tutorials {\n    sys {\n      id\n      firstPublishedAt\n    }\n    title\n    shortText\n    thumbnail {\n      url\n    }\n    link\n    linkText\n    text {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  fragment TutorialsContent on Tutorials {\n    sys {\n      id\n      firstPublishedAt\n    }\n    title\n    shortText\n    thumbnail {\n      url\n    }\n    link\n    linkText\n    text {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchTutorialById($id: String!) {\n    tutorials(id: $id) {\n      ...TutorialsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchTutorialById($id: String!) {\n    tutorials(id: $id) {\n      ...TutorialsContent\n    }\n  }\n  \n'];
export function gql(
  source: '\n  fragment UsersContent on Users {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n\n    alumniSinceDate\n    alumniLocation\n    biography\n    connections\n    createdDate\n    degree\n    email\n    contactEmail\n    dismissedGettingStarted\n    firstName\n    institution\n    jobTitle\n    lastName\n    country\n    city\n    onboarded\n    orcid\n    orcidLastModifiedDate\n    orcidLastSyncDate\n    orcidWorks\n    questions\n    expertiseAndResourceTags\n    expertiseAndResourceDescription\n    github\n    googleScholar\n    linkedIn\n    researcherId\n    researchGate\n    twitter\n    website1\n    website2\n    role\n    responsibilities\n    researchInterests\n    reachOut\n    avatar {\n      url\n    }\n    teamsCollection(limit: 100) {\n      items {\n        team {\n          sys {\n            id\n          }\n          displayName\n          inactiveSince\n        }\n        role\n        inactiveSinceDate\n      }\n    }\n    labsCollection(limit: 10) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n  }\n',
): (typeof documents)['\n  fragment UsersContent on Users {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n\n    alumniSinceDate\n    alumniLocation\n    biography\n    connections\n    createdDate\n    degree\n    email\n    contactEmail\n    dismissedGettingStarted\n    firstName\n    institution\n    jobTitle\n    lastName\n    country\n    city\n    onboarded\n    orcid\n    orcidLastModifiedDate\n    orcidLastSyncDate\n    orcidWorks\n    questions\n    expertiseAndResourceTags\n    expertiseAndResourceDescription\n    github\n    googleScholar\n    linkedIn\n    researcherId\n    researchGate\n    twitter\n    website1\n    website2\n    role\n    responsibilities\n    researchInterests\n    reachOut\n    avatar {\n      url\n    }\n    teamsCollection(limit: 100) {\n      items {\n        team {\n          sys {\n            id\n          }\n          displayName\n          inactiveSince\n        }\n        role\n        inactiveSinceDate\n      }\n    }\n    labsCollection(limit: 10) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchUserById($id: String!) {\n    users(id: $id) {\n      ...UsersContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchUserById($id: String!) {\n    users(id: $id) {\n      ...UsersContent\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchUsers(\n    $limit: Int\n    $skip: Int\n    $order: [UsersOrder]\n    $where: UsersFilter\n  ) {\n    usersCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...UsersContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchUsers(\n    $limit: Int\n    $skip: Int\n    $order: [UsersOrder]\n    $where: UsersFilter\n  ) {\n    usersCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...UsersContent\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchUsersByTeamId($id: String!, $limit: Int, $skip: Int) {\n    teamMembershipCollection(\n      limit: $limit\n      skip: $skip\n      where: { team: { sys: { id: $id } } }\n    ) {\n      total\n      items {\n        linkedFrom {\n          usersCollection(limit: 1) {\n            items {\n              ...UsersContent\n            }\n          }\n        }\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchUsersByTeamId($id: String!, $limit: Int, $skip: Int) {\n    teamMembershipCollection(\n      limit: $limit\n      skip: $skip\n      where: { team: { sys: { id: $id } } }\n    ) {\n      total\n      items {\n        linkedFrom {\n          usersCollection(limit: 1) {\n            items {\n              ...UsersContent\n            }\n          }\n        }\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchUsersByLabId($id: String!, $limit: Int, $skip: Int) {\n    labs(id: $id) {\n      linkedFrom {\n        usersCollection(limit: $limit, skip: $skip) {\n          total\n          items {\n            ...UsersContent\n          }\n        }\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchUsersByLabId($id: String!, $limit: Int, $skip: Int) {\n    labs(id: $id) {\n      linkedFrom {\n        usersCollection(limit: $limit, skip: $skip) {\n          total\n          items {\n            ...UsersContent\n          }\n        }\n      }\n    }\n  }\n  \n'];
export function gql(
  source: '\n  fragment WorkingGroupsContent on WorkingGroups {\n    sys {\n      id\n      publishedAt\n    }\n    title\n    description {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    externalLink\n    shortText\n    complete\n    deliverablesCollection {\n      items {\n        description\n        status\n      }\n    }\n    membersCollection {\n      items {\n        __typename\n        ... on WorkingGroupLeaders {\n          workstreamRole\n          role\n          inactiveSinceDate\n          user {\n            sys {\n              id\n            }\n            avatar {\n              url\n            }\n            email\n            firstName\n            lastName\n            alumniSinceDate\n          }\n        }\n        __typename\n        ... on WorkingGroupMembers {\n          inactiveSinceDate\n          user {\n            sys {\n              id\n            }\n            avatar {\n              url\n            }\n            email\n            firstName\n            lastName\n            alumniSinceDate\n          }\n        }\n      }\n    }\n    calendars {\n      sys {\n        id\n      }\n      name\n      color\n      googleCalendarId\n    }\n  }\n',
): (typeof documents)['\n  fragment WorkingGroupsContent on WorkingGroups {\n    sys {\n      id\n      publishedAt\n    }\n    title\n    description {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    externalLink\n    shortText\n    complete\n    deliverablesCollection {\n      items {\n        description\n        status\n      }\n    }\n    membersCollection {\n      items {\n        __typename\n        ... on WorkingGroupLeaders {\n          workstreamRole\n          role\n          inactiveSinceDate\n          user {\n            sys {\n              id\n            }\n            avatar {\n              url\n            }\n            email\n            firstName\n            lastName\n            alumniSinceDate\n          }\n        }\n        __typename\n        ... on WorkingGroupMembers {\n          inactiveSinceDate\n          user {\n            sys {\n              id\n            }\n            avatar {\n              url\n            }\n            email\n            firstName\n            lastName\n            alumniSinceDate\n          }\n        }\n      }\n    }\n    calendars {\n      sys {\n        id\n      }\n      name\n      color\n      googleCalendarId\n    }\n  }\n'];
export function gql(
  source: '\n  query FetchWorkingGroupById($id: String!) {\n    workingGroups(id: $id) {\n      ...WorkingGroupsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchWorkingGroupById($id: String!) {\n    workingGroups(id: $id) {\n      ...WorkingGroupsContent\n    }\n  }\n  \n'];
export function gql(
  source: '\n  query FetchWorkingGroups(\n    $limit: Int\n    $skip: Int\n    $order: [WorkingGroupsOrder]\n    $where: WorkingGroupsFilter\n  ) {\n    workingGroupsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...WorkingGroupsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchWorkingGroups(\n    $limit: Int\n    $skip: Int\n    $order: [WorkingGroupsOrder]\n    $where: WorkingGroupsFilter\n  ) {\n    workingGroupsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...WorkingGroupsContent\n      }\n    }\n  }\n  \n'];

export function gql(source: string): unknown;
export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
