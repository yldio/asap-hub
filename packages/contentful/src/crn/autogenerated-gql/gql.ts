/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
  '\n  query FetchAnalyticsTeamLeadership($limit: Int, $skip: Int) {\n    teamsCollection(order: displayName_ASC, limit: $limit, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        displayName\n        inactiveSince\n        linkedFrom {\n          interestGroupsCollection(limit: 50) {\n            items {\n              sys {\n                id\n              }\n              active\n            }\n          }\n          teamMembershipCollection(limit: 100) {\n            items {\n              inactiveSinceDate\n              linkedFrom {\n                usersCollection(limit: 1) {\n                  items {\n                    alumniSinceDate\n                    linkedFrom {\n                      interestGroupLeadersCollection(limit: 10) {\n                        items {\n                          inactiveSinceDate\n                          role\n                          linkedFrom {\n                            interestGroupsCollection(limit: 1) {\n                              items {\n                                sys {\n                                  id\n                                }\n                                active\n                              }\n                            }\n                          }\n                        }\n                      }\n                      workingGroupMembersCollection(limit: 10) {\n                        items {\n                          inactiveSinceDate\n                          linkedFrom {\n                            workingGroupsCollection(limit: 1) {\n                              items {\n                                sys {\n                                  id\n                                }\n                                complete\n                              }\n                            }\n                          }\n                        }\n                      }\n                      workingGroupLeadersCollection(limit: 10) {\n                        items {\n                          inactiveSinceDate\n                          role\n                          linkedFrom {\n                            workingGroupsCollection(limit: 1) {\n                              items {\n                                sys {\n                                  id\n                                }\n                                complete\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchAnalyticsTeamLeadershipDocument,
  '\n  query FetchUserProductivity($limit: Int, $skip: Int) {\n    usersCollection(order: firstName_ASC, limit: $limit, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        firstName\n        lastName\n        nickname\n        alumniSinceDate\n        teamsCollection(limit: 20) {\n          items {\n            team {\n              sys {\n                id\n              }\n              displayName\n              inactiveSince\n            }\n            role\n            inactiveSinceDate\n          }\n        }\n        linkedFrom {\n          researchOutputsCollection(limit: 100) {\n            items {\n              addedDate\n              asapFunded\n              createdDate\n              sharingStatus\n              documentType\n              authorsCollection(limit: 20) {\n                items {\n                  __typename\n                  ... on Users {\n                    sys {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchUserProductivityDocument,
  '\n  query FetchTeamProductivity($limit: Int, $skip: Int) {\n    teamsCollection(order: displayName_ASC, limit: $limit, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        displayName\n        inactiveSince\n        linkedFrom {\n          researchOutputsCollection(limit: 2000) {\n            items {\n              addedDate\n              asapFunded\n              createdDate\n              documentType\n              sharingStatus\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchTeamProductivityDocument,
  '\n  query FetchUserTotalResearchOutputs($skip: Int) {\n    usersCollection(order: firstName_ASC, limit: 1000, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        firstName\n        lastName\n        nickname\n        alumniSinceDate\n        labsCollection(limit: 5) {\n          items {\n            sys {\n              id\n            }\n          }\n        }\n        teamsCollection(limit: 5) {\n          items {\n            team {\n              sys {\n                id\n              }\n              displayName\n              inactiveSince\n            }\n            role\n            inactiveSinceDate\n          }\n        }\n        linkedFrom {\n          researchOutputsCollection(limit: 1) {\n            total\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchUserTotalResearchOutputsDocument,
  '\n  query FetchUserResearchOutputs($limit: Int, $skip: Int) {\n    usersCollection(order: firstName_ASC, limit: $limit, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        linkedFrom {\n          researchOutputsCollection(limit: 250) {\n            items {\n              sys {\n                id\n              }\n              addedDate\n              asapFunded\n              documentType\n              authorsCollection(limit: 120) {\n                items {\n                  __typename\n                  ... on Users {\n                    sys {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchUserResearchOutputsDocument,
  '\n  query FetchTeamCollaboration($limit: Int, $skip: Int) {\n    teamsCollection(order: displayName_ASC, limit: $limit, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        displayName\n        inactiveSince\n        linkedFrom {\n          researchOutputsCollection(limit: 850) {\n            items {\n              addedDate\n              asapFunded\n              createdDate\n              documentType\n              sharingStatus\n              labsCollection(limit: 2) {\n                total\n              }\n              teamsCollection(limit: 20) {\n                items {\n                  sys {\n                    id\n                  }\n                  displayName\n                  inactiveSince\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchTeamCollaborationDocument,
  '\n  query FetchEngagement($limit: Int, $skip: Int) {\n    teamsCollection(order: displayName_ASC, limit: $limit, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        displayName\n        inactiveSince\n        linkedFrom {\n          teamMembershipCollection(limit: 100) {\n            items {\n              role\n              linkedFrom {\n                usersCollection(limit: 1) {\n                  items {\n                    onboarded\n                  }\n                }\n              }\n            }\n          }\n          eventSpeakersCollection(limit: 1000) {\n            items {\n              linkedFrom {\n                eventsCollection(limit: 1) {\n                  items {\n                    sys {\n                      id\n                    }\n                    endDate\n                    status\n                  }\n                }\n              }\n              user {\n                __typename\n                ... on Users {\n                  sys {\n                    id\n                  }\n                  onboarded\n                  teamsCollection(limit: 3) {\n                    items {\n                      team {\n                        sys {\n                          id\n                        }\n                      }\n                      role\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchEngagementDocument,
  '\n  fragment CalendarsContent on Calendars {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    googleCalendarId\n    name\n    color\n    googleApiMetadata\n    linkedFrom {\n      workingGroupsCollection(limit: 1) {\n        items {\n          sys {\n            id\n          }\n          complete\n        }\n      }\n      interestGroupsCollection(limit: 1) {\n        items {\n          sys {\n            id\n          }\n          active\n        }\n      }\n    }\n  }\n':
    types.CalendarsContentFragmentDoc,
  '\n  query FetchCalendarById($id: String!) {\n    calendars(id: $id) {\n      ...CalendarsContent\n    }\n  }\n  \n':
    types.FetchCalendarByIdDocument,
  '\n  query FetchCalendars(\n    $limit: Int\n    $skip: Int\n    $order: [CalendarsOrder]\n    $where: CalendarsFilter\n  ) {\n    calendarsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...CalendarsContent\n      }\n    }\n  }\n  \n':
    types.FetchCalendarsDocument,
  '\n  query FetchComplianceReportById($id: String!) {\n    complianceReports(id: $id) {\n      sys {\n        id\n        firstPublishedAt\n      }\n      url\n      description\n      createdBy {\n        sys {\n          id\n        }\n        firstName\n        nickname\n        lastName\n        alumniSinceDate\n        avatar {\n          url\n        }\n        teamsCollection(limit: 3) {\n          items {\n            team {\n              sys {\n                id\n              }\n              displayName\n            }\n          }\n        }\n      }\n      manuscriptVersion {\n        linkedFrom {\n          manuscriptsCollection(limit: 1) {\n            items {\n              versionsCollection(limit: 1) {\n                total\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchComplianceReportByIdDocument,
  '\n  query FetchDashboard {\n    dashboardCollection(limit: 1, order: sys_publishedAt_DESC) {\n      items {\n        newsCollection(limit: 10) {\n          items {\n            ...NewsContent\n          }\n        }\n\n        pagesCollection(limit: 10) {\n          items {\n            ...PageContent\n          }\n        }\n\n        announcementsCollection(order: sys_firstPublishedAt_DESC) {\n          items {\n            description\n            deadline\n            link\n            sys {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n  \n  \n':
    types.FetchDashboardDocument,
  '\n  fragment PartialUsersContent on Users {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    lastUpdated\n    email\n    firstName\n    nickname\n    institution\n    jobTitle\n    lastName\n    avatar {\n      url\n    }\n  }\n':
    types.PartialUsersContentFragmentDoc,
  '\n  query FetchDiscover {\n    discoverCollection(limit: 1, order: sys_publishedAt_DESC) {\n      items {\n        aboutUs {\n          json\n          links {\n            entries {\n              inline {\n                sys {\n                  id\n                }\n                __typename\n                ... on Media {\n                  url\n                }\n              }\n            }\n            assets {\n              block {\n                sys {\n                  id\n                }\n                url\n                description\n                contentType\n                width\n                height\n              }\n            }\n          }\n        }\n        membersCollection {\n          items {\n            ...PartialUsersContent\n          }\n        }\n        membersTeam {\n          sys {\n            id\n          }\n        }\n        scientificAdvisoryBoardCollection {\n          items {\n            ...PartialUsersContent\n          }\n        }\n      }\n    }\n  }\n  \n':
    types.FetchDiscoverDocument,
  '\n  fragment DiscussionsContent on Discussions {\n    sys {\n      id\n      publishedVersion\n    }\n    title\n    message {\n      sys {\n        publishedAt\n      }\n      text\n      createdBy {\n        sys {\n          id\n        }\n        firstName\n        nickname\n        lastName\n        alumniSinceDate\n        avatar {\n          url\n        }\n        teamsCollection(limit: 3) {\n          items {\n            team {\n              sys {\n                id\n              }\n              displayName\n            }\n          }\n        }\n      }\n    }\n    repliesCollection(limit: 10) {\n      items {\n        sys {\n          publishedAt\n        }\n        text\n        createdBy {\n          sys {\n            id\n          }\n          firstName\n          nickname\n          lastName\n          alumniSinceDate\n          avatar {\n            url\n          }\n          teamsCollection(limit: 2) {\n            items {\n              team {\n                sys {\n                  id\n                }\n                displayName\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.DiscussionsContentFragmentDoc,
  '\n  query FetchDiscussionById($id: String!) {\n    discussions(id: $id) {\n      ...DiscussionsContent\n    }\n  }\n  \n':
    types.FetchDiscussionByIdDocument,
  '\n  fragment EventsContent on Events {\n    sys {\n      id\n      publishedVersion\n      publishedAt\n    }\n    lastUpdated\n    description\n    endDate\n    endDateTimeZone\n    startDate\n    startDateTimeZone\n    meetingLink\n    hideMeetingLink\n    eventLink\n    status\n    hidden\n    title\n    notesPermanentlyUnavailable\n    notes {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    notesUpdatedAt\n    videoRecordingPermanentlyUnavailable\n    videoRecording {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    videoRecordingUpdatedAt\n    presentationPermanentlyUnavailable\n    presentation {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    presentationUpdatedAt\n    meetingMaterialsPermanentlyUnavailable\n    meetingMaterials\n    researchTagsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    linkedFrom {\n      tutorialsCollection(limit: 10) {\n        items {\n          sys {\n            id\n          }\n          title\n          addedDate\n        }\n      }\n      researchOutputsCollection(limit: 10) {\n        items {\n          sys {\n            id\n          }\n          title\n          type\n          documentType\n          workingGroup @include(if: $singleEvent) {\n            sys {\n              id\n            }\n            title\n          }\n          teamsCollection(limit: 10) @include(if: $singleEvent) {\n            items {\n              sys {\n                id\n              }\n              displayName\n            }\n          }\n        }\n      }\n    }\n    calendar {\n      googleCalendarId\n      color\n      name\n      linkedFrom {\n        workingGroupsCollection(limit: 1) {\n          items {\n            sys {\n              id\n            }\n            title\n          }\n        }\n        interestGroupsCollection(limit: 1) {\n          items {\n            sys {\n              id\n            }\n            name\n            active\n            slack\n            googleDrive\n          }\n        }\n      }\n    }\n    thumbnail {\n      url\n    }\n    speakersCollection(limit: 25) {\n      items {\n        team {\n          sys {\n            id\n          }\n          displayName\n          inactiveSince\n        }\n        user {\n          __typename\n          ... on ExternalAuthors {\n            name\n          }\n          ... on Users {\n            sys {\n              id\n            }\n            alumniSinceDate\n            alumniLocation\n            firstName\n            nickname\n            lastName\n            onboarded\n            teamsCollection(limit: 5) {\n              items {\n                team {\n                  sys {\n                    id\n                  }\n                }\n                role\n              }\n            }\n            avatar {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.EventsContentFragmentDoc,
  '\n  query FetchEventById($id: String!, $singleEvent: Boolean = true) {\n    events(id: $id) {\n      ...EventsContent\n    }\n  }\n  \n':
    types.FetchEventByIdDocument,
  '\n  query FetchEvents(\n    $limit: Int\n    $skip: Int\n    $order: [EventsOrder]\n    $where: EventsFilter\n    $singleEvent: Boolean = false\n  ) {\n    eventsCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...EventsContent\n      }\n    }\n  }\n  \n':
    types.FetchEventsDocument,
  '\n  query FetchEventsByUserId(\n    $id: String!\n    $limit: Int\n    $skip: Int\n    $singleEvent: Boolean = false\n  ) {\n    users(id: $id) {\n      linkedFrom {\n        eventSpeakersCollection(limit: 1) {\n          items {\n            linkedFrom {\n              eventsCollection(limit: $limit, skip: $skip) {\n                total\n                items {\n                  ...EventsContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n':
    types.FetchEventsByUserIdDocument,
  '\n  query FetchEventsByExternalAuthorId(\n    $id: String!\n    $limit: Int\n    $skip: Int\n    $singleEvent: Boolean = false\n  ) {\n    externalAuthors(id: $id) {\n      linkedFrom {\n        eventSpeakersCollection(limit: 1) {\n          items {\n            linkedFrom {\n              eventsCollection(limit: $limit, skip: $skip) {\n                total\n                items {\n                  ...EventsContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n':
    types.FetchEventsByExternalAuthorIdDocument,
  '\n  query FetchEventsByTeamId(\n    $id: String!\n    $limit: Int\n    $skip: Int\n    $singleEvent: Boolean = false\n  ) {\n    teams(id: $id) {\n      linkedFrom {\n        eventSpeakersCollection(limit: 1) {\n          items {\n            linkedFrom {\n              eventsCollection(limit: $limit, skip: $skip) {\n                total\n                items {\n                  ...EventsContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n':
    types.FetchEventsByTeamIdDocument,
  '\n  query FetchWorkingGroupCalendar($id: String!) {\n    workingGroups(id: $id) {\n      calendars {\n        sys {\n          id\n        }\n      }\n    }\n  }\n':
    types.FetchWorkingGroupCalendarDocument,
  '\n  query FetchInterestGroupCalendar($id: String!) {\n    interestGroups(id: $id) {\n      calendar {\n        sys {\n          id\n        }\n      }\n    }\n  }\n':
    types.FetchInterestGroupCalendarDocument,
  '\n  fragment ExternalAuthorsContent on ExternalAuthors {\n    sys {\n      id\n    }\n    name\n    orcid\n  }\n':
    types.ExternalAuthorsContentFragmentDoc,
  '\n  query FetchExternalAuthorById($id: String!) {\n    externalAuthors(id: $id) {\n      ...ExternalAuthorsContent\n    }\n  }\n  \n':
    types.FetchExternalAuthorByIdDocument,
  '\n  query FetchExternalAuthors(\n    $limit: Int\n    $skip: Int\n    $order: [ExternalAuthorsOrder]\n  ) {\n    externalAuthorsCollection(limit: $limit, skip: $skip, order: $order) {\n      total\n      items {\n        ...ExternalAuthorsContent\n      }\n    }\n  }\n  \n':
    types.FetchExternalAuthorsDocument,
  '\n  query FetchGuideByTitle($title: String!) {\n    guideCollectionsCollection(limit: 1, where: { title: $title }) {\n      items {\n        guidesCollection(limit: 100) {\n          items {\n            title\n            icon {\n              asset {\n                url\n              }\n            }\n            contentCollection(limit: 100) {\n              items {\n                title\n                text\n                linkUrl\n                linkText\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchGuideByTitleDocument,
  '\n  fragment InterestGroupsContent on InterestGroups {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    name\n    active\n    researchTagsCollection(limit: 5) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    description\n    slack\n    googleDrive\n    thumbnail {\n      url\n    }\n    teamsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        displayName\n        inactiveSince\n        researchTagsCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            name\n          }\n        }\n        projectTitle\n      }\n    }\n    leadersCollection(limit: 20) {\n      items {\n        sys {\n          id\n          publishedAt\n        }\n        user {\n          sys {\n            id\n            publishedAt\n            firstPublishedAt\n          }\n          firstName\n          nickname\n          lastName\n          email\n          alumniSinceDate\n          avatar {\n            url\n          }\n          teamsCollection(limit: 5) {\n            items {\n              role\n              inactiveSinceDate\n              team {\n                sys {\n                  id\n                }\n                inactiveSince\n                displayName\n              }\n            }\n          }\n        }\n        role\n        inactiveSinceDate\n      }\n    }\n    calendar {\n      sys {\n        id\n      }\n      color\n      googleCalendarId\n      name\n    }\n    lastUpdated\n  }\n':
    types.InterestGroupsContentFragmentDoc,
  '\n  query FetchInterestGroupById($id: String!) {\n    interestGroups(id: $id) {\n      ...InterestGroupsContent\n    }\n  }\n  \n':
    types.FetchInterestGroupByIdDocument,
  '\n  query FetchInterestGroups(\n    $limit: Int\n    $skip: Int\n    $order: [InterestGroupsOrder]\n    $where: InterestGroupsFilter\n  ) {\n    interestGroupsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...InterestGroupsContent\n      }\n    }\n  }\n  \n':
    types.FetchInterestGroupsDocument,
  '\n  query FetchInterestGroupsByUserId($id: String!, $limit: Int, $skip: Int) {\n    interestGroupLeadersCollection(\n      limit: $limit\n      skip: $skip\n      where: { user: { sys: { id: $id } } }\n    ) {\n      total\n      items {\n        linkedFrom {\n          interestGroupsCollection(limit: 1) {\n            items {\n              ...InterestGroupsContent\n            }\n          }\n        }\n      }\n    }\n  }\n  \n':
    types.FetchInterestGroupsByUserIdDocument,
  '\n  query FetchLabs($limit: Int, $skip: Int, $where: LabsFilter) {\n    labsCollection(limit: $limit, skip: $skip, where: $where, order: name_ASC) {\n      total\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n  }\n':
    types.FetchLabsDocument,
  '\n  fragment ManuscriptsContent on Manuscripts {\n    sys {\n      id\n      publishedVersion\n    }\n    title\n    status\n    count\n    discussionsCollection(limit: 10) {\n      total\n      items {\n        ...DiscussionsContent\n      }\n    }\n    assignedUsersCollection(limit: 30) {\n      items {\n        sys {\n          id\n        }\n        firstName\n        lastName\n        avatar {\n          url\n        }\n      }\n    }\n    versionsCollection(limit: 20, order: sys_firstPublishedAt_DESC) {\n      items {\n        sys {\n          id\n          publishedAt\n          firstPublishedAt\n        }\n        type\n        lifecycle\n        description\n        count\n        manuscriptFile {\n          sys {\n            id\n          }\n          fileName\n          url\n        }\n        keyResourceTable {\n          sys {\n            id\n          }\n          fileName\n          url\n        }\n        additionalFilesCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            fileName\n            url\n          }\n        }\n        preprintDoi\n        publicationDoi\n        requestingApcCoverage\n        submitterName\n        submissionDate\n        otherDetails\n        acknowledgedGrantNumber\n        acknowledgedGrantNumberDetails\n        asapAffiliationIncluded\n        asapAffiliationIncludedDetails\n        manuscriptLicense\n        manuscriptLicenseDetails\n        datasetsDeposited\n        datasetsDepositedDetails\n        codeDeposited\n        codeDepositedDetails\n        protocolsDeposited\n        protocolsDepositedDetails\n        labMaterialsRegistered\n        labMaterialsRegisteredDetails\n        availabilityStatement\n        availabilityStatementDetails\n        teamsCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            displayName\n            inactiveSince\n          }\n        }\n        labsCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            labPi {\n              sys {\n                id\n              }\n            }\n            name\n          }\n        }\n        createdBy {\n          sys {\n            id\n          }\n          firstName\n          nickname\n          lastName\n          alumniSinceDate\n          avatar {\n            url\n          }\n          teamsCollection(limit: 3) {\n            items {\n              team {\n                sys {\n                  id\n                }\n                displayName\n              }\n            }\n          }\n        }\n        updatedBy {\n          sys {\n            id\n          }\n          firstName\n          nickname\n          lastName\n          alumniSinceDate\n          avatar {\n            url\n          }\n          teamsCollection(limit: 3) {\n            items {\n              team {\n                sys {\n                  id\n                }\n                displayName\n              }\n            }\n          }\n        }\n        firstAuthorsCollection(limit: 15) {\n          items {\n            __typename\n            ... on ExternalAuthors {\n              sys {\n                id\n              }\n              name\n              email\n            }\n            ... on Users {\n              sys {\n                id\n              }\n              avatar {\n                url\n              }\n              firstName\n              lastName\n              nickname\n              email\n            }\n          }\n        }\n        additionalAuthorsCollection(limit: 15) {\n          items {\n            __typename\n            ... on ExternalAuthors {\n              sys {\n                id\n              }\n              name\n              email\n            }\n            ... on Users {\n              sys {\n                id\n              }\n              avatar {\n                url\n              }\n              firstName\n              lastName\n              nickname\n              email\n            }\n          }\n        }\n        correspondingAuthorCollection(limit: 1) {\n          items {\n            __typename\n            ... on ExternalAuthors {\n              sys {\n                id\n              }\n              name\n              email\n            }\n            ... on Users {\n              sys {\n                id\n              }\n              avatar {\n                url\n              }\n              firstName\n              lastName\n              nickname\n              email\n            }\n          }\n        }\n        linkedFrom {\n          complianceReportsCollection(limit: 1) {\n            items {\n              sys {\n                id\n                firstPublishedAt\n              }\n              url\n              description\n              createdBy {\n                sys {\n                  id\n                }\n                firstName\n                nickname\n                lastName\n                alumniSinceDate\n                avatar {\n                  url\n                }\n                teamsCollection(limit: 3) {\n                  items {\n                    team {\n                      sys {\n                        id\n                      }\n                      displayName\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n':
    types.ManuscriptsContentFragmentDoc,
  '\n  query FetchManuscriptById($id: String!) {\n    manuscripts(id: $id) {\n      ...ManuscriptsContent\n      teamsCollection(limit: 10) {\n        items {\n          sys {\n            id\n          }\n          teamId\n          grantId\n        }\n      }\n    }\n  }\n  \n':
    types.FetchManuscriptByIdDocument,
  '\n  query FetchManuscripts($limit: Int, $skip: Int, $where: ManuscriptsFilter) {\n    manuscriptsCollection(limit: $limit, skip: $skip, where: $where) {\n      total\n      items {\n        sys {\n          id\n        }\n        title\n        status\n        count\n        assignedUsersCollection(limit: 30) {\n          items {\n            sys {\n              id\n            }\n            firstName\n            lastName\n            avatar {\n              url\n            }\n          }\n        }\n        teamsCollection(limit: 15) {\n          items {\n            sys {\n              id\n            }\n            displayName\n            teamId\n            grantId\n          }\n        }\n        versionsCollection(limit: 1, order: sys_firstPublishedAt_DESC) {\n          items {\n            sys {\n              id\n              publishedAt\n            }\n            requestingApcCoverage\n            type\n            lifecycle\n            count\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchManuscriptsDocument,
  '\n  query FetchManuscriptNotificationDetails($id: String!) {\n    manuscripts(id: $id) {\n      sys {\n        id\n      }\n      title\n      count\n      teamsCollection(limit: 1) {\n        items {\n          sys {\n            id\n          }\n          displayName\n          teamId\n          grantId\n        }\n      }\n      assignedUsersCollection(limit: 30) {\n        items {\n          firstName\n          lastName\n        }\n      }\n      versionsCollection(limit: 1, order: sys_firstPublishedAt_DESC) {\n        items {\n          sys {\n            id\n            publishedAt\n          }\n          teamsCollection(limit: 10) {\n            items {\n              sys {\n                id\n              }\n              displayName\n              inactiveSince\n              linkedFrom {\n                teamMembershipCollection(limit: 100) {\n                  items {\n                    role\n                    inactiveSinceDate\n                    linkedFrom {\n                      usersCollection(limit: 1) {\n                        items {\n                          alumniSinceDate\n                          email\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          firstAuthorsCollection(limit: 15) {\n            items {\n              __typename\n              ... on ExternalAuthors {\n                email\n              }\n              ... on Users {\n                email\n              }\n            }\n          }\n          additionalAuthorsCollection(limit: 15) {\n            items {\n              __typename\n              ... on ExternalAuthors {\n                email\n              }\n              ... on Users {\n                email\n              }\n            }\n          }\n          correspondingAuthorCollection(limit: 1) {\n            items {\n              __typename\n              ... on ExternalAuthors {\n                email\n              }\n              ... on Users {\n                email\n              }\n            }\n          }\n          labsCollection(limit: 10) {\n            items {\n              labPi {\n                alumniSinceDate\n                email\n              }\n            }\n          }\n          type\n          lifecycle\n          count\n        }\n      }\n    }\n  }\n':
    types.FetchManuscriptNotificationDetailsDocument,
  '\n  query FetchManuscriptsByTeamId($id: String!) {\n    teams(id: $id) {\n      linkedFrom {\n        manuscriptsCollection(limit: 500) {\n          items {\n            teamsCollection {\n              items {\n                sys {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchManuscriptsByTeamIdDocument,
  '\n  fragment NewsContent on News {\n    sys {\n      id\n      firstPublishedAt\n    }\n    title\n    shortText\n    frequency\n    link\n    linkText\n    thumbnail {\n      url\n    }\n    text {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    tagsCollection(limit: 20) {\n      items {\n        name\n      }\n    }\n    publishDate\n  }\n':
    types.NewsContentFragmentDoc,
  '\n  query FetchNewsById($id: String!) {\n    news(id: $id) {\n      ...NewsContent\n    }\n  }\n  \n':
    types.FetchNewsByIdDocument,
  '\n  query FetchNews(\n    $limit: Int\n    $skip: Int\n    $order: [NewsOrder]\n    $where: NewsFilter\n  ) {\n    newsCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...NewsContent\n      }\n    }\n  }\n  \n':
    types.FetchNewsDocument,
  '\n  fragment PageContent on Pages {\n    sys {\n      id\n    }\n    title\n    path\n    shortText\n    text {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    link\n    linkText\n  }\n':
    types.PageContentFragmentDoc,
  '\n  query FetchPages($where: PagesFilter) {\n    pagesCollection(limit: 100, where: $where) {\n      total\n      items {\n        ...PageContent\n      }\n    }\n  }\n  \n':
    types.FetchPagesDocument,
  '\n  query FetchReminders(\n    $researchOutputFilter: ResearchOutputsFilter\n    $eventFilter: EventsFilter\n    $userId: String!\n    $researchOutputVersionsFilter: ResearchOutputVersionsFilter\n    $manuscriptFilter: ManuscriptsFilter\n  ) {\n    manuscriptsCollection(where: $manuscriptFilter) {\n      items {\n        sys {\n          id\n          publishedAt\n          firstPublishedAt\n        }\n        title\n        status\n        previousStatus\n        statusUpdatedAt\n        statusUpdatedBy {\n          sys {\n            id\n          }\n          firstName\n          lastName\n        }\n        teamsCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            displayName\n          }\n        }\n        assignedUsersCollection(limit: 30) {\n          items {\n            sys {\n              id\n            }\n          }\n        }\n        versionsCollection(limit: 10) {\n          total\n          items {\n            count\n            createdBy {\n              sys {\n                id\n              }\n              firstName\n              lastName\n            }\n            firstAuthorsCollection(limit: 10) {\n              items {\n                __typename\n                ... on Users {\n                  sys {\n                    id\n                  }\n                }\n              }\n            }\n            additionalAuthorsCollection(limit: 10) {\n              items {\n                __typename\n                ... on Users {\n                  sys {\n                    id\n                  }\n                }\n              }\n            }\n            correspondingAuthorCollection(limit: 10) {\n              items {\n                __typename\n                ... on Users {\n                  sys {\n                    id\n                  }\n                }\n              }\n            }\n            labsCollection(limit: 10) {\n              items {\n                labPi {\n                  sys {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    researchOutputsCollection(where: $researchOutputFilter, preview: true) {\n      items {\n        sys {\n          id\n          publishedAt\n        }\n        addedDate\n        createdDate\n        documentType\n        title\n        teamsCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            displayName\n          }\n        }\n        workingGroup {\n          sys {\n            id\n          }\n          title\n        }\n        createdBy {\n          sys {\n            id\n          }\n          firstName\n          lastName\n        }\n        statusChangedAt\n        statusChangedBy {\n          sys {\n            id\n          }\n          firstName\n          lastName\n        }\n        isInReview\n      }\n    }\n    eventsCollection(where: $eventFilter) {\n      items {\n        sys {\n          id\n        }\n        startDate\n        endDate\n        title\n        videoRecordingUpdatedAt\n        presentationUpdatedAt\n        notesUpdatedAt\n        speakersCollection(limit: 30) {\n          items {\n            team {\n              sys {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n    users(id: $userId) {\n      role\n      openScienceTeamMember\n      teamsCollection {\n        items {\n          team {\n            sys {\n              id\n            }\n            displayName\n          }\n          role\n        }\n      }\n      linkedFrom {\n        workingGroupMembersCollection(limit: 10) {\n          items {\n            linkedFrom {\n              workingGroupsCollection(limit: 1) {\n                items {\n                  sys {\n                    id\n                  }\n                  title\n                }\n              }\n            }\n          }\n        }\n        workingGroupLeadersCollection(limit: 10) {\n          items {\n            role\n            linkedFrom {\n              workingGroupsCollection(limit: 1) {\n                items {\n                  sys {\n                    id\n                  }\n                  title\n                }\n              }\n            }\n          }\n        }\n        eventSpeakersCollection(limit: 100) {\n          items {\n            team {\n              sys {\n                id\n              }\n            }\n            linkedFrom {\n              eventsCollection(limit: 1) {\n                items {\n                  sys {\n                    id\n                  }\n                  title\n                  endDate\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    researchOutputVersionsCollection(where: $researchOutputVersionsFilter) {\n      items {\n        sys {\n          id\n          publishedAt\n        }\n        linkedFrom {\n          researchOutputsCollection(limit: 1) {\n            items {\n              sys {\n                id\n              }\n              title\n              documentType\n              teamsCollection(limit: 10) {\n                items {\n                  sys {\n                    id\n                  }\n                  displayName\n                }\n              }\n              workingGroup {\n                sys {\n                  id\n                }\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchRemindersDocument,
  '\n  query FetchTeamProjectManager($id: String!) {\n    teamMembershipCollection(\n      where: {\n        AND: [{ team: { sys: { id: $id } } }, { role: "Project Manager" }]\n      }\n    ) {\n      items {\n        linkedFrom {\n          usersCollection(limit: 1) {\n            total\n            items {\n              sys {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchTeamProjectManagerDocument,
  '\n  query FetchDiscussionReminders($discussionFilter: DiscussionsFilter) {\n    discussionsCollection(where: $discussionFilter) {\n      items {\n        sys {\n          id\n          firstPublishedAt\n        }\n        message {\n          createdBy {\n            sys {\n              id\n            }\n            firstName\n            lastName\n            role\n            openScienceTeamMember\n            teamsCollection(\n              limit: 10\n              where: { inactiveSinceDate_exists: false }\n            ) {\n              items {\n                team {\n                  sys {\n                    id\n                  }\n                  displayName\n                  inactiveSince\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchDiscussionRemindersDocument,
  '\n  query FetchMessageReminders($messageFilter: MessagesFilter) {\n    messagesCollection(where: $messageFilter) {\n      items {\n        sys {\n          id\n          firstPublishedAt\n        }\n        createdBy {\n          sys {\n            id\n          }\n          firstName\n          lastName\n          role\n          openScienceTeamMember\n          teamsCollection(\n            limit: 10\n            where: { inactiveSinceDate_exists: false }\n          ) {\n            items {\n              team {\n                sys {\n                  id\n                }\n                displayName\n                inactiveSince\n              }\n            }\n          }\n        }\n        linkedFrom {\n          discussionsCollection(limit: 1) {\n            items {\n              message {\n                sys {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchMessageRemindersDocument,
  '\n  fragment ResearchOutputsContent on ResearchOutputs {\n    sys {\n      id\n      publishedVersion\n    }\n    title\n    descriptionMd\n    shortDescription\n    link\n    addedDate\n    createdDate\n    lastUpdatedPartial\n    documentType\n    sharingStatus\n    labCatalogNumber\n    doi\n    accession\n    rrid\n    asapFunded\n    usedInAPublication\n    type\n    publishDate\n    description {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    usageNotes\n    statusChangedBy {\n      sys {\n        id\n      }\n      firstName\n      lastName\n      email\n    }\n    statusChangedAt\n    isInReview\n    authorsCollection(limit: 100) {\n      items {\n        __typename\n        ... on ExternalAuthors {\n          sys {\n            id\n          }\n          name\n          orcid\n        }\n        ... on Users {\n          sys {\n            id\n          }\n          firstName\n          nickname\n          lastName\n          email\n          onboarded\n          orcid\n          alumniSinceDate\n          avatar {\n            url\n          }\n        }\n      }\n    }\n    teamsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        displayName\n        researchTheme {\n          name\n        }\n        linkedFrom {\n          teamMembershipCollection @include(if: $fetchPMs) {\n            items {\n              role\n              inactiveSinceDate\n              linkedFrom {\n                usersCollection(limit: 1) {\n                  items {\n                    email\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    workingGroup {\n      sys {\n        id\n      }\n      title\n    }\n    methodsCollection(limit: 5) {\n      items {\n        name\n      }\n    }\n    keywordsCollection(limit: 20) {\n      items {\n        name\n      }\n    }\n    organismsCollection(limit: 5) {\n      items {\n        name\n      }\n    }\n    environmentsCollection(limit: 5) {\n      items {\n        name\n      }\n    }\n    subtype {\n      name\n    }\n    labsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    relatedResearchCollection(limit: 20, where: $relatedResearchWhere) {\n      items {\n        sys {\n          id\n        }\n        title\n        type\n        documentType\n        teamsCollection(limit: 20) @include(if: $singleOutput) {\n          items {\n            sys {\n              id\n            }\n            displayName\n          }\n        }\n        workingGroup @include(if: $singleOutput) {\n          sys {\n            id\n          }\n          title\n        }\n      }\n    }\n    linkedFrom {\n      researchOutputsCollection(limit: 60, order: [addedDate_ASC]) {\n        items {\n          sys {\n            id\n          }\n          title\n          type\n          documentType\n          teamsCollection(limit: 20) @include(if: $singleOutput) {\n            items {\n              sys {\n                id\n              }\n              displayName\n            }\n          }\n          workingGroup @include(if: $singleOutput) {\n            sys {\n              id\n            }\n            title\n          }\n        }\n      }\n    }\n    relatedEventsCollection(limit: 10) {\n      items {\n        sys {\n          id\n        }\n        title\n        endDate\n      }\n    }\n    versionsCollection {\n      items {\n        sys {\n          id\n        }\n        title\n        documentType\n        type\n        addedDate\n        link\n        rrid\n        accession\n      }\n    }\n  }\n':
    types.ResearchOutputsContentFragmentDoc,
  '\n  query FetchResearchOutputById(\n    $id: String!\n    $preview: Boolean\n    $fetchPMs: Boolean = true\n    $singleOutput: Boolean = true\n    $relatedResearchWhere: ResearchOutputsFilter = {}\n  ) {\n    researchOutputs(id: $id, preview: $preview) {\n      ...ResearchOutputsContent\n    }\n  }\n  \n':
    types.FetchResearchOutputByIdDocument,
  '\n  query FetchResearchOutputs(\n    $limit: Int\n    $skip: Int\n    $order: [ResearchOutputsOrder]\n    $where: ResearchOutputsFilter\n    $preview: Boolean\n    $fetchPMs: Boolean = false\n    $singleOutput: Boolean = false\n    $relatedResearchWhere: ResearchOutputsFilter\n  ) {\n    researchOutputsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n      preview: $preview\n    ) {\n      total\n      items {\n        ...ResearchOutputsContent\n      }\n    }\n  }\n  \n':
    types.FetchResearchOutputsDocument,
  '\n  fragment ResearchTagsContent on ResearchTags {\n    sys {\n      id\n    }\n    name\n    category\n    types\n  }\n':
    types.ResearchTagsContentFragmentDoc,
  '\n  query FetchResearchTags(\n    $limit: Int\n    $skip: Int\n    $order: [ResearchTagsOrder]\n    $where: ResearchTagsFilter\n  ) {\n    researchTagsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...ResearchTagsContent\n      }\n    }\n  }\n  \n':
    types.FetchResearchTagsDocument,
  '\n  query FetchResearchTagsById($id: String!) {\n    researchTags(id: $id) {\n      ...ResearchTagsContent\n    }\n  }\n  \n':
    types.FetchResearchTagsByIdDocument,
  '\n  query FetchTeamById($id: String!) {\n    teams(id: $id) {\n      sys {\n        id\n        publishedAt\n      }\n      displayName\n      teamId\n      grantId\n      inactiveSince\n      projectSummary\n      projectTitle\n      proposal {\n        sys {\n          id\n        }\n      }\n      toolsCollection {\n        items {\n          name\n          description\n          url\n        }\n      }\n      researchTagsCollection(limit: 20) {\n        items {\n          sys {\n            id\n          }\n          name\n        }\n      }\n      supplementGrant {\n        title\n        description\n        startDate\n        endDate\n        proposal {\n          sys {\n            id\n          }\n        }\n      }\n      linkedFrom {\n        manuscriptsCollection(limit: 20, order: sys_firstPublishedAt_DESC) {\n          items {\n            ...ManuscriptsContent\n            teamsCollection(limit: 1) {\n              items {\n                sys {\n                  id\n                }\n                teamId\n                grantId\n              }\n            }\n          }\n        }\n        teamMembershipCollection(limit: 100) {\n          items {\n            role\n            inactiveSinceDate\n            linkedFrom {\n              usersCollection(limit: 1) {\n                items {\n                  sys {\n                    id\n                  }\n                  onboarded\n                  firstName\n                  nickname\n                  lastName\n                  email\n                  alumniSinceDate\n                  avatar {\n                    url\n                  }\n                  labsCollection(limit: 5) {\n                    items {\n                      sys {\n                        id\n                      }\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n':
    types.FetchTeamByIdDocument,
  '\n  query FetchTeams(\n    $limit: Int\n    $skip: Int\n    $order: [TeamsOrder]\n    $where: TeamsFilter\n  ) {\n    teamsCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        sys {\n          id\n        }\n        displayName\n        inactiveSince\n        projectTitle\n        researchTagsCollection(limit: 20) {\n          items {\n            sys {\n              id\n            }\n            name\n          }\n        }\n        linkedFrom {\n          teamMembershipCollection(limit: 100) {\n            items {\n              role\n              linkedFrom {\n                usersCollection(limit: 1) {\n                  items {\n                    sys {\n                      id\n                    }\n                    onboarded\n                    labsCollection(limit: 5) {\n                      items {\n                        sys {\n                          id\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchTeamsDocument,
  '\n  fragment TutorialsContent on Tutorials {\n    sys {\n      id\n    }\n    addedDate\n    lastUpdated\n    datePublished\n    asapFunded\n    usedInAPublication\n    sharingStatus\n    title\n    shortText\n    thumbnail {\n      url\n    }\n    link\n    linkText\n    text {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    authorsCollection(limit: 10) {\n      items {\n        __typename\n        ... on ExternalAuthors {\n          sys {\n            id\n          }\n          name\n          orcid\n        }\n        ... on Users {\n          sys {\n            id\n          }\n          firstName\n          nickname\n          lastName\n          email\n          onboarded\n          orcid\n          alumniSinceDate\n          avatar {\n            url\n          }\n        }\n      }\n    }\n    teamsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        displayName\n      }\n    }\n    tagsCollection(limit: 20) {\n      items {\n        name\n      }\n    }\n    linkedFrom {\n      tutorialsCollection(limit: 20, order: [addedDate_ASC]) {\n        items {\n          sys {\n            id\n          }\n          title\n          addedDate\n        }\n      }\n    }\n    relatedTutorialsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        title\n        addedDate\n      }\n    }\n    relatedEventsCollection(limit: 10) {\n      items {\n        sys {\n          id\n        }\n        title\n        endDate\n      }\n    }\n  }\n':
    types.TutorialsContentFragmentDoc,
  '\n  query FetchTutorialById($id: String!) {\n    tutorials(id: $id) {\n      ...TutorialsContent\n    }\n  }\n  \n':
    types.FetchTutorialByIdDocument,
  '\n  query FetchTutorials($limit: Int, $skip: Int, $where: TutorialsFilter) {\n    tutorialsCollection(\n      limit: $limit\n      skip: $skip\n      where: $where\n      order: addedDate_DESC\n    ) {\n      total\n      items {\n        ...TutorialsContent\n      }\n    }\n  }\n  \n':
    types.FetchTutorialsDocument,
  '\n  fragment UsersContent on Users {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    activeCampaignId\n    lastUpdated\n    alumniSinceDate\n    alumniLocation\n    biography\n    connections\n    createdDate\n    degree\n    email\n    contactEmail\n    dismissedGettingStarted\n    firstName\n    middleName\n    lastName\n    nickname\n    institution\n    jobTitle\n    country\n    stateOrProvince\n    city\n    onboarded\n    orcid\n    orcidLastModifiedDate\n    orcidLastSyncDate\n    orcidWorks\n    questions\n    expertiseAndResourceDescription\n    github\n    googleScholar\n    linkedIn\n    researcherId\n    researchGate\n    twitter\n    website1\n    website2\n    role\n    openScienceTeamMember\n    responsibilities\n    researchInterests\n    reachOut\n    avatar {\n      url\n    }\n    researchTagsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    teamsCollection(limit: 10) {\n      items {\n        team {\n          sys {\n            id\n          }\n          displayName\n          inactiveSince\n          researchTheme {\n            name\n          }\n          proposal {\n            sys {\n              id\n            }\n          }\n          linkedFrom {\n            interestGroupsCollection(limit: 10) {\n              items {\n                sys {\n                  id\n                }\n                active\n                name\n              }\n            }\n          }\n        }\n        role\n        inactiveSinceDate\n      }\n    }\n    labsCollection(limit: 10) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    linkedFrom {\n      workingGroupMembersCollection(limit: 10) {\n        items {\n          inactiveSinceDate\n          linkedFrom {\n            workingGroupsCollection(limit: 1) {\n              items {\n                sys {\n                  id\n                }\n                title\n                complete\n              }\n            }\n          }\n          user {\n            lastName\n          }\n        }\n      }\n      workingGroupLeadersCollection(limit: 10) {\n        items {\n          role\n          inactiveSinceDate\n          linkedFrom {\n            workingGroupsCollection(limit: 1) {\n              items {\n                sys {\n                  id\n                }\n                title\n                complete\n              }\n            }\n          }\n          user {\n            lastName\n          }\n        }\n      }\n      interestGroupLeadersCollection(limit: 10) {\n        items {\n          role\n          linkedFrom {\n            interestGroupsCollection(limit: 1) {\n              items {\n                sys {\n                  id\n                }\n                active\n                name\n              }\n            }\n          }\n        }\n      }\n      researchOutputsCollection @include(if: $publicUser) {\n        items {\n          sys {\n            id\n          }\n          authorsCollection(limit: 20) {\n            items {\n              __typename\n              ... on Users {\n                sys {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.UsersContentFragmentDoc,
  '\n  query FetchPublicUsers(\n    $limit: Int\n    $skip: Int\n    $order: [UsersOrder]\n    $where: UsersFilter\n  ) {\n    usersCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        sys {\n          id\n          publishedAt\n          firstPublishedAt\n        }\n        avatar {\n          url\n        }\n        alumniSinceDate\n        biography\n        city\n        country\n        createdDate\n        lastUpdated\n        degree\n        firstName\n        lastName\n        institution\n        website1\n        website2\n        linkedIn\n        orcid\n        researcherId\n        twitter\n        github\n        googleScholar\n        researchGate\n        researchTagsCollection(limit: 20) {\n          items {\n            name\n          }\n        }\n        teamsCollection(limit: 10) {\n          items {\n            team {\n              displayName\n              researchTheme {\n                name\n              }\n              linkedFrom {\n                interestGroupsCollection(limit: 10) {\n                  items {\n                    sys {\n                      id\n                    }\n                    active\n                    name\n                  }\n                }\n              }\n            }\n            role\n            inactiveSinceDate\n          }\n        }\n        labsCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            name\n          }\n        }\n        linkedFrom {\n          workingGroupMembersCollection(limit: 10) {\n            items {\n              inactiveSinceDate\n              linkedFrom {\n                workingGroupsCollection(limit: 1) {\n                  items {\n                    title\n                    complete\n                  }\n                }\n              }\n            }\n          }\n          workingGroupLeadersCollection(limit: 10) {\n            items {\n              role\n              inactiveSinceDate\n              linkedFrom {\n                workingGroupsCollection(limit: 1) {\n                  items {\n                    title\n                    complete\n                  }\n                }\n              }\n            }\n          }\n          interestGroupLeadersCollection(limit: 10) {\n            items {\n              role\n              linkedFrom {\n                interestGroupsCollection(limit: 1) {\n                  items {\n                    sys {\n                      id\n                    }\n                    active\n                    name\n                  }\n                }\n              }\n            }\n          }\n          researchOutputsCollection(limit: 20) {\n            items {\n              sys {\n                id\n              }\n              authorsCollection(limit: 20) {\n                items {\n                  __typename\n                  ... on Users {\n                    sys {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.FetchPublicUsersDocument,
  '\n  query FetchUserById($id: String!, $publicUser: Boolean = false) {\n    users(id: $id) {\n      ...UsersContent\n    }\n  }\n  \n':
    types.FetchUserByIdDocument,
  '\n  fragment UserListItemContent on Users {\n    alumniSinceDate\n    avatar {\n      url\n    }\n    city\n    stateOrProvince\n    country\n    createdDate\n    degree\n    email\n    firstName\n    sys {\n      id\n    }\n    institution\n    jobTitle\n    labsCollection(limit: 10) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    lastName\n    middleName\n    nickname\n    onboarded\n    dismissedGettingStarted\n    role\n    openScienceTeamMember\n    researchTagsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    teamsCollection(limit: 10) {\n      items {\n        team {\n          sys {\n            id\n          }\n          displayName\n        }\n        role\n      }\n    }\n  }\n':
    types.UserListItemContentFragmentDoc,
  '\n  query FetchUsers(\n    $limit: Int\n    $skip: Int\n    $order: [UsersOrder]\n    $where: UsersFilter\n  ) {\n    usersCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...UserListItemContent\n      }\n    }\n  }\n  \n':
    types.FetchUsersDocument,
  '\n  query FetchUsersByTeamId($id: String!, $limit: Int, $skip: Int) {\n    teamMembershipCollection(\n      limit: $limit\n      skip: $skip\n      where: { team: { sys: { id: $id } } }\n    ) {\n      total\n      items {\n        linkedFrom {\n          usersCollection(limit: 1) {\n            items {\n              ...UserListItemContent\n            }\n          }\n        }\n      }\n    }\n  }\n  \n':
    types.FetchUsersByTeamIdDocument,
  '\n  query FetchUsersByLabId($id: String!, $limit: Int, $skip: Int) {\n    labs(id: $id) {\n      linkedFrom {\n        labMembershipCollection(limit: $limit, skip: $skip) {\n          total\n          items {\n            linkedFrom {\n              usersCollection(limit: 1) {\n                items {\n                  ...UserListItemContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n':
    types.FetchUsersByLabIdDocument,
  '\n  fragment WorkingGroupsContent on WorkingGroups {\n    sys {\n      id\n      publishedAt\n    }\n    title\n    description {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    externalLink\n    shortText\n    complete\n    deliverablesCollection {\n      items {\n        description\n        status\n      }\n    }\n    tagsCollection(limit: 20) {\n      items {\n        name\n      }\n    }\n    membersCollection {\n      items {\n        __typename\n        ... on WorkingGroupLeaders {\n          workstreamRole\n          role\n          inactiveSinceDate\n          user {\n            sys {\n              id\n            }\n            avatar {\n              url\n            }\n            email\n            firstName\n            nickname\n            lastName\n            alumniSinceDate\n            teamsCollection(limit: 5) @include(if: $singleWorkingGroup) {\n              items {\n                role\n                team {\n                  sys {\n                    id\n                  }\n                  displayName\n                }\n              }\n            }\n          }\n        }\n        __typename\n        ... on WorkingGroupMembers {\n          inactiveSinceDate\n          user {\n            sys {\n              id\n            }\n            avatar {\n              url\n            }\n            email\n            firstName\n            nickname\n            lastName\n            alumniSinceDate\n            teamsCollection(limit: 5) @include(if: $singleWorkingGroup) {\n              items {\n                role\n                team {\n                  sys {\n                    id\n                  }\n                  displayName\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    calendars {\n      sys {\n        id\n      }\n      name\n      color\n      googleCalendarId\n    }\n    lastUpdated\n  }\n':
    types.WorkingGroupsContentFragmentDoc,
  '\n  query FetchWorkingGroupById(\n    $id: String!\n    $singleWorkingGroup: Boolean = true\n  ) {\n    workingGroups(id: $id) {\n      ...WorkingGroupsContent\n    }\n  }\n  \n':
    types.FetchWorkingGroupByIdDocument,
  '\n  query FetchWorkingGroups(\n    $limit: Int\n    $skip: Int\n    $order: [WorkingGroupsOrder]\n    $where: WorkingGroupsFilter\n    $singleWorkingGroup: Boolean = false\n  ) {\n    workingGroupsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...WorkingGroupsContent\n      }\n    }\n  }\n  \n':
    types.FetchWorkingGroupsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchAnalyticsTeamLeadership($limit: Int, $skip: Int) {\n    teamsCollection(order: displayName_ASC, limit: $limit, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        displayName\n        inactiveSince\n        linkedFrom {\n          interestGroupsCollection(limit: 50) {\n            items {\n              sys {\n                id\n              }\n              active\n            }\n          }\n          teamMembershipCollection(limit: 100) {\n            items {\n              inactiveSinceDate\n              linkedFrom {\n                usersCollection(limit: 1) {\n                  items {\n                    alumniSinceDate\n                    linkedFrom {\n                      interestGroupLeadersCollection(limit: 10) {\n                        items {\n                          inactiveSinceDate\n                          role\n                          linkedFrom {\n                            interestGroupsCollection(limit: 1) {\n                              items {\n                                sys {\n                                  id\n                                }\n                                active\n                              }\n                            }\n                          }\n                        }\n                      }\n                      workingGroupMembersCollection(limit: 10) {\n                        items {\n                          inactiveSinceDate\n                          linkedFrom {\n                            workingGroupsCollection(limit: 1) {\n                              items {\n                                sys {\n                                  id\n                                }\n                                complete\n                              }\n                            }\n                          }\n                        }\n                      }\n                      workingGroupLeadersCollection(limit: 10) {\n                        items {\n                          inactiveSinceDate\n                          role\n                          linkedFrom {\n                            workingGroupsCollection(limit: 1) {\n                              items {\n                                sys {\n                                  id\n                                }\n                                complete\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchAnalyticsTeamLeadership($limit: Int, $skip: Int) {\n    teamsCollection(order: displayName_ASC, limit: $limit, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        displayName\n        inactiveSince\n        linkedFrom {\n          interestGroupsCollection(limit: 50) {\n            items {\n              sys {\n                id\n              }\n              active\n            }\n          }\n          teamMembershipCollection(limit: 100) {\n            items {\n              inactiveSinceDate\n              linkedFrom {\n                usersCollection(limit: 1) {\n                  items {\n                    alumniSinceDate\n                    linkedFrom {\n                      interestGroupLeadersCollection(limit: 10) {\n                        items {\n                          inactiveSinceDate\n                          role\n                          linkedFrom {\n                            interestGroupsCollection(limit: 1) {\n                              items {\n                                sys {\n                                  id\n                                }\n                                active\n                              }\n                            }\n                          }\n                        }\n                      }\n                      workingGroupMembersCollection(limit: 10) {\n                        items {\n                          inactiveSinceDate\n                          linkedFrom {\n                            workingGroupsCollection(limit: 1) {\n                              items {\n                                sys {\n                                  id\n                                }\n                                complete\n                              }\n                            }\n                          }\n                        }\n                      }\n                      workingGroupLeadersCollection(limit: 10) {\n                        items {\n                          inactiveSinceDate\n                          role\n                          linkedFrom {\n                            workingGroupsCollection(limit: 1) {\n                              items {\n                                sys {\n                                  id\n                                }\n                                complete\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchUserProductivity($limit: Int, $skip: Int) {\n    usersCollection(order: firstName_ASC, limit: $limit, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        firstName\n        lastName\n        nickname\n        alumniSinceDate\n        teamsCollection(limit: 20) {\n          items {\n            team {\n              sys {\n                id\n              }\n              displayName\n              inactiveSince\n            }\n            role\n            inactiveSinceDate\n          }\n        }\n        linkedFrom {\n          researchOutputsCollection(limit: 100) {\n            items {\n              addedDate\n              asapFunded\n              createdDate\n              sharingStatus\n              documentType\n              authorsCollection(limit: 20) {\n                items {\n                  __typename\n                  ... on Users {\n                    sys {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchUserProductivity($limit: Int, $skip: Int) {\n    usersCollection(order: firstName_ASC, limit: $limit, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        firstName\n        lastName\n        nickname\n        alumniSinceDate\n        teamsCollection(limit: 20) {\n          items {\n            team {\n              sys {\n                id\n              }\n              displayName\n              inactiveSince\n            }\n            role\n            inactiveSinceDate\n          }\n        }\n        linkedFrom {\n          researchOutputsCollection(limit: 100) {\n            items {\n              addedDate\n              asapFunded\n              createdDate\n              sharingStatus\n              documentType\n              authorsCollection(limit: 20) {\n                items {\n                  __typename\n                  ... on Users {\n                    sys {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchTeamProductivity($limit: Int, $skip: Int) {\n    teamsCollection(order: displayName_ASC, limit: $limit, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        displayName\n        inactiveSince\n        linkedFrom {\n          researchOutputsCollection(limit: 2000) {\n            items {\n              addedDate\n              asapFunded\n              createdDate\n              documentType\n              sharingStatus\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchTeamProductivity($limit: Int, $skip: Int) {\n    teamsCollection(order: displayName_ASC, limit: $limit, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        displayName\n        inactiveSince\n        linkedFrom {\n          researchOutputsCollection(limit: 2000) {\n            items {\n              addedDate\n              asapFunded\n              createdDate\n              documentType\n              sharingStatus\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchUserTotalResearchOutputs($skip: Int) {\n    usersCollection(order: firstName_ASC, limit: 1000, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        firstName\n        lastName\n        nickname\n        alumniSinceDate\n        labsCollection(limit: 5) {\n          items {\n            sys {\n              id\n            }\n          }\n        }\n        teamsCollection(limit: 5) {\n          items {\n            team {\n              sys {\n                id\n              }\n              displayName\n              inactiveSince\n            }\n            role\n            inactiveSinceDate\n          }\n        }\n        linkedFrom {\n          researchOutputsCollection(limit: 1) {\n            total\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchUserTotalResearchOutputs($skip: Int) {\n    usersCollection(order: firstName_ASC, limit: 1000, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        firstName\n        lastName\n        nickname\n        alumniSinceDate\n        labsCollection(limit: 5) {\n          items {\n            sys {\n              id\n            }\n          }\n        }\n        teamsCollection(limit: 5) {\n          items {\n            team {\n              sys {\n                id\n              }\n              displayName\n              inactiveSince\n            }\n            role\n            inactiveSinceDate\n          }\n        }\n        linkedFrom {\n          researchOutputsCollection(limit: 1) {\n            total\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchUserResearchOutputs($limit: Int, $skip: Int) {\n    usersCollection(order: firstName_ASC, limit: $limit, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        linkedFrom {\n          researchOutputsCollection(limit: 250) {\n            items {\n              sys {\n                id\n              }\n              addedDate\n              asapFunded\n              documentType\n              authorsCollection(limit: 120) {\n                items {\n                  __typename\n                  ... on Users {\n                    sys {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchUserResearchOutputs($limit: Int, $skip: Int) {\n    usersCollection(order: firstName_ASC, limit: $limit, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        linkedFrom {\n          researchOutputsCollection(limit: 250) {\n            items {\n              sys {\n                id\n              }\n              addedDate\n              asapFunded\n              documentType\n              authorsCollection(limit: 120) {\n                items {\n                  __typename\n                  ... on Users {\n                    sys {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchTeamCollaboration($limit: Int, $skip: Int) {\n    teamsCollection(order: displayName_ASC, limit: $limit, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        displayName\n        inactiveSince\n        linkedFrom {\n          researchOutputsCollection(limit: 850) {\n            items {\n              addedDate\n              asapFunded\n              createdDate\n              documentType\n              sharingStatus\n              labsCollection(limit: 2) {\n                total\n              }\n              teamsCollection(limit: 20) {\n                items {\n                  sys {\n                    id\n                  }\n                  displayName\n                  inactiveSince\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchTeamCollaboration($limit: Int, $skip: Int) {\n    teamsCollection(order: displayName_ASC, limit: $limit, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        displayName\n        inactiveSince\n        linkedFrom {\n          researchOutputsCollection(limit: 850) {\n            items {\n              addedDate\n              asapFunded\n              createdDate\n              documentType\n              sharingStatus\n              labsCollection(limit: 2) {\n                total\n              }\n              teamsCollection(limit: 20) {\n                items {\n                  sys {\n                    id\n                  }\n                  displayName\n                  inactiveSince\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchEngagement($limit: Int, $skip: Int) {\n    teamsCollection(order: displayName_ASC, limit: $limit, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        displayName\n        inactiveSince\n        linkedFrom {\n          teamMembershipCollection(limit: 100) {\n            items {\n              role\n              linkedFrom {\n                usersCollection(limit: 1) {\n                  items {\n                    onboarded\n                  }\n                }\n              }\n            }\n          }\n          eventSpeakersCollection(limit: 1000) {\n            items {\n              linkedFrom {\n                eventsCollection(limit: 1) {\n                  items {\n                    sys {\n                      id\n                    }\n                    endDate\n                    status\n                  }\n                }\n              }\n              user {\n                __typename\n                ... on Users {\n                  sys {\n                    id\n                  }\n                  onboarded\n                  teamsCollection(limit: 3) {\n                    items {\n                      team {\n                        sys {\n                          id\n                        }\n                      }\n                      role\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchEngagement($limit: Int, $skip: Int) {\n    teamsCollection(order: displayName_ASC, limit: $limit, skip: $skip) {\n      total\n      items {\n        sys {\n          id\n        }\n        displayName\n        inactiveSince\n        linkedFrom {\n          teamMembershipCollection(limit: 100) {\n            items {\n              role\n              linkedFrom {\n                usersCollection(limit: 1) {\n                  items {\n                    onboarded\n                  }\n                }\n              }\n            }\n          }\n          eventSpeakersCollection(limit: 1000) {\n            items {\n              linkedFrom {\n                eventsCollection(limit: 1) {\n                  items {\n                    sys {\n                      id\n                    }\n                    endDate\n                    status\n                  }\n                }\n              }\n              user {\n                __typename\n                ... on Users {\n                  sys {\n                    id\n                  }\n                  onboarded\n                  teamsCollection(limit: 3) {\n                    items {\n                      team {\n                        sys {\n                          id\n                        }\n                      }\n                      role\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment CalendarsContent on Calendars {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    googleCalendarId\n    name\n    color\n    googleApiMetadata\n    linkedFrom {\n      workingGroupsCollection(limit: 1) {\n        items {\n          sys {\n            id\n          }\n          complete\n        }\n      }\n      interestGroupsCollection(limit: 1) {\n        items {\n          sys {\n            id\n          }\n          active\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  fragment CalendarsContent on Calendars {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    googleCalendarId\n    name\n    color\n    googleApiMetadata\n    linkedFrom {\n      workingGroupsCollection(limit: 1) {\n        items {\n          sys {\n            id\n          }\n          complete\n        }\n      }\n      interestGroupsCollection(limit: 1) {\n        items {\n          sys {\n            id\n          }\n          active\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchCalendarById($id: String!) {\n    calendars(id: $id) {\n      ...CalendarsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchCalendarById($id: String!) {\n    calendars(id: $id) {\n      ...CalendarsContent\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchCalendars(\n    $limit: Int\n    $skip: Int\n    $order: [CalendarsOrder]\n    $where: CalendarsFilter\n  ) {\n    calendarsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...CalendarsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchCalendars(\n    $limit: Int\n    $skip: Int\n    $order: [CalendarsOrder]\n    $where: CalendarsFilter\n  ) {\n    calendarsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...CalendarsContent\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchComplianceReportById($id: String!) {\n    complianceReports(id: $id) {\n      sys {\n        id\n        firstPublishedAt\n      }\n      url\n      description\n      createdBy {\n        sys {\n          id\n        }\n        firstName\n        nickname\n        lastName\n        alumniSinceDate\n        avatar {\n          url\n        }\n        teamsCollection(limit: 3) {\n          items {\n            team {\n              sys {\n                id\n              }\n              displayName\n            }\n          }\n        }\n      }\n      manuscriptVersion {\n        linkedFrom {\n          manuscriptsCollection(limit: 1) {\n            items {\n              versionsCollection(limit: 1) {\n                total\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchComplianceReportById($id: String!) {\n    complianceReports(id: $id) {\n      sys {\n        id\n        firstPublishedAt\n      }\n      url\n      description\n      createdBy {\n        sys {\n          id\n        }\n        firstName\n        nickname\n        lastName\n        alumniSinceDate\n        avatar {\n          url\n        }\n        teamsCollection(limit: 3) {\n          items {\n            team {\n              sys {\n                id\n              }\n              displayName\n            }\n          }\n        }\n      }\n      manuscriptVersion {\n        linkedFrom {\n          manuscriptsCollection(limit: 1) {\n            items {\n              versionsCollection(limit: 1) {\n                total\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchDashboard {\n    dashboardCollection(limit: 1, order: sys_publishedAt_DESC) {\n      items {\n        newsCollection(limit: 10) {\n          items {\n            ...NewsContent\n          }\n        }\n\n        pagesCollection(limit: 10) {\n          items {\n            ...PageContent\n          }\n        }\n\n        announcementsCollection(order: sys_firstPublishedAt_DESC) {\n          items {\n            description\n            deadline\n            link\n            sys {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n  \n  \n',
): (typeof documents)['\n  query FetchDashboard {\n    dashboardCollection(limit: 1, order: sys_publishedAt_DESC) {\n      items {\n        newsCollection(limit: 10) {\n          items {\n            ...NewsContent\n          }\n        }\n\n        pagesCollection(limit: 10) {\n          items {\n            ...PageContent\n          }\n        }\n\n        announcementsCollection(order: sys_firstPublishedAt_DESC) {\n          items {\n            description\n            deadline\n            link\n            sys {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n  \n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment PartialUsersContent on Users {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    lastUpdated\n    email\n    firstName\n    nickname\n    institution\n    jobTitle\n    lastName\n    avatar {\n      url\n    }\n  }\n',
): (typeof documents)['\n  fragment PartialUsersContent on Users {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    lastUpdated\n    email\n    firstName\n    nickname\n    institution\n    jobTitle\n    lastName\n    avatar {\n      url\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchDiscover {\n    discoverCollection(limit: 1, order: sys_publishedAt_DESC) {\n      items {\n        aboutUs {\n          json\n          links {\n            entries {\n              inline {\n                sys {\n                  id\n                }\n                __typename\n                ... on Media {\n                  url\n                }\n              }\n            }\n            assets {\n              block {\n                sys {\n                  id\n                }\n                url\n                description\n                contentType\n                width\n                height\n              }\n            }\n          }\n        }\n        membersCollection {\n          items {\n            ...PartialUsersContent\n          }\n        }\n        membersTeam {\n          sys {\n            id\n          }\n        }\n        scientificAdvisoryBoardCollection {\n          items {\n            ...PartialUsersContent\n          }\n        }\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchDiscover {\n    discoverCollection(limit: 1, order: sys_publishedAt_DESC) {\n      items {\n        aboutUs {\n          json\n          links {\n            entries {\n              inline {\n                sys {\n                  id\n                }\n                __typename\n                ... on Media {\n                  url\n                }\n              }\n            }\n            assets {\n              block {\n                sys {\n                  id\n                }\n                url\n                description\n                contentType\n                width\n                height\n              }\n            }\n          }\n        }\n        membersCollection {\n          items {\n            ...PartialUsersContent\n          }\n        }\n        membersTeam {\n          sys {\n            id\n          }\n        }\n        scientificAdvisoryBoardCollection {\n          items {\n            ...PartialUsersContent\n          }\n        }\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment DiscussionsContent on Discussions {\n    sys {\n      id\n      publishedVersion\n    }\n    title\n    message {\n      sys {\n        publishedAt\n      }\n      text\n      createdBy {\n        sys {\n          id\n        }\n        firstName\n        nickname\n        lastName\n        alumniSinceDate\n        avatar {\n          url\n        }\n        teamsCollection(limit: 3) {\n          items {\n            team {\n              sys {\n                id\n              }\n              displayName\n            }\n          }\n        }\n      }\n    }\n    repliesCollection(limit: 10) {\n      items {\n        sys {\n          publishedAt\n        }\n        text\n        createdBy {\n          sys {\n            id\n          }\n          firstName\n          nickname\n          lastName\n          alumniSinceDate\n          avatar {\n            url\n          }\n          teamsCollection(limit: 2) {\n            items {\n              team {\n                sys {\n                  id\n                }\n                displayName\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  fragment DiscussionsContent on Discussions {\n    sys {\n      id\n      publishedVersion\n    }\n    title\n    message {\n      sys {\n        publishedAt\n      }\n      text\n      createdBy {\n        sys {\n          id\n        }\n        firstName\n        nickname\n        lastName\n        alumniSinceDate\n        avatar {\n          url\n        }\n        teamsCollection(limit: 3) {\n          items {\n            team {\n              sys {\n                id\n              }\n              displayName\n            }\n          }\n        }\n      }\n    }\n    repliesCollection(limit: 10) {\n      items {\n        sys {\n          publishedAt\n        }\n        text\n        createdBy {\n          sys {\n            id\n          }\n          firstName\n          nickname\n          lastName\n          alumniSinceDate\n          avatar {\n            url\n          }\n          teamsCollection(limit: 2) {\n            items {\n              team {\n                sys {\n                  id\n                }\n                displayName\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchDiscussionById($id: String!) {\n    discussions(id: $id) {\n      ...DiscussionsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchDiscussionById($id: String!) {\n    discussions(id: $id) {\n      ...DiscussionsContent\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment EventsContent on Events {\n    sys {\n      id\n      publishedVersion\n      publishedAt\n    }\n    lastUpdated\n    description\n    endDate\n    endDateTimeZone\n    startDate\n    startDateTimeZone\n    meetingLink\n    hideMeetingLink\n    eventLink\n    status\n    hidden\n    title\n    notesPermanentlyUnavailable\n    notes {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    notesUpdatedAt\n    videoRecordingPermanentlyUnavailable\n    videoRecording {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    videoRecordingUpdatedAt\n    presentationPermanentlyUnavailable\n    presentation {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    presentationUpdatedAt\n    meetingMaterialsPermanentlyUnavailable\n    meetingMaterials\n    researchTagsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    linkedFrom {\n      tutorialsCollection(limit: 10) {\n        items {\n          sys {\n            id\n          }\n          title\n          addedDate\n        }\n      }\n      researchOutputsCollection(limit: 10) {\n        items {\n          sys {\n            id\n          }\n          title\n          type\n          documentType\n          workingGroup @include(if: $singleEvent) {\n            sys {\n              id\n            }\n            title\n          }\n          teamsCollection(limit: 10) @include(if: $singleEvent) {\n            items {\n              sys {\n                id\n              }\n              displayName\n            }\n          }\n        }\n      }\n    }\n    calendar {\n      googleCalendarId\n      color\n      name\n      linkedFrom {\n        workingGroupsCollection(limit: 1) {\n          items {\n            sys {\n              id\n            }\n            title\n          }\n        }\n        interestGroupsCollection(limit: 1) {\n          items {\n            sys {\n              id\n            }\n            name\n            active\n            slack\n            googleDrive\n          }\n        }\n      }\n    }\n    thumbnail {\n      url\n    }\n    speakersCollection(limit: 25) {\n      items {\n        team {\n          sys {\n            id\n          }\n          displayName\n          inactiveSince\n        }\n        user {\n          __typename\n          ... on ExternalAuthors {\n            name\n          }\n          ... on Users {\n            sys {\n              id\n            }\n            alumniSinceDate\n            alumniLocation\n            firstName\n            nickname\n            lastName\n            onboarded\n            teamsCollection(limit: 5) {\n              items {\n                team {\n                  sys {\n                    id\n                  }\n                }\n                role\n              }\n            }\n            avatar {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  fragment EventsContent on Events {\n    sys {\n      id\n      publishedVersion\n      publishedAt\n    }\n    lastUpdated\n    description\n    endDate\n    endDateTimeZone\n    startDate\n    startDateTimeZone\n    meetingLink\n    hideMeetingLink\n    eventLink\n    status\n    hidden\n    title\n    notesPermanentlyUnavailable\n    notes {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    notesUpdatedAt\n    videoRecordingPermanentlyUnavailable\n    videoRecording {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    videoRecordingUpdatedAt\n    presentationPermanentlyUnavailable\n    presentation {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    presentationUpdatedAt\n    meetingMaterialsPermanentlyUnavailable\n    meetingMaterials\n    researchTagsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    linkedFrom {\n      tutorialsCollection(limit: 10) {\n        items {\n          sys {\n            id\n          }\n          title\n          addedDate\n        }\n      }\n      researchOutputsCollection(limit: 10) {\n        items {\n          sys {\n            id\n          }\n          title\n          type\n          documentType\n          workingGroup @include(if: $singleEvent) {\n            sys {\n              id\n            }\n            title\n          }\n          teamsCollection(limit: 10) @include(if: $singleEvent) {\n            items {\n              sys {\n                id\n              }\n              displayName\n            }\n          }\n        }\n      }\n    }\n    calendar {\n      googleCalendarId\n      color\n      name\n      linkedFrom {\n        workingGroupsCollection(limit: 1) {\n          items {\n            sys {\n              id\n            }\n            title\n          }\n        }\n        interestGroupsCollection(limit: 1) {\n          items {\n            sys {\n              id\n            }\n            name\n            active\n            slack\n            googleDrive\n          }\n        }\n      }\n    }\n    thumbnail {\n      url\n    }\n    speakersCollection(limit: 25) {\n      items {\n        team {\n          sys {\n            id\n          }\n          displayName\n          inactiveSince\n        }\n        user {\n          __typename\n          ... on ExternalAuthors {\n            name\n          }\n          ... on Users {\n            sys {\n              id\n            }\n            alumniSinceDate\n            alumniLocation\n            firstName\n            nickname\n            lastName\n            onboarded\n            teamsCollection(limit: 5) {\n              items {\n                team {\n                  sys {\n                    id\n                  }\n                }\n                role\n              }\n            }\n            avatar {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchEventById($id: String!, $singleEvent: Boolean = true) {\n    events(id: $id) {\n      ...EventsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchEventById($id: String!, $singleEvent: Boolean = true) {\n    events(id: $id) {\n      ...EventsContent\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchEvents(\n    $limit: Int\n    $skip: Int\n    $order: [EventsOrder]\n    $where: EventsFilter\n    $singleEvent: Boolean = false\n  ) {\n    eventsCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...EventsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchEvents(\n    $limit: Int\n    $skip: Int\n    $order: [EventsOrder]\n    $where: EventsFilter\n    $singleEvent: Boolean = false\n  ) {\n    eventsCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...EventsContent\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchEventsByUserId(\n    $id: String!\n    $limit: Int\n    $skip: Int\n    $singleEvent: Boolean = false\n  ) {\n    users(id: $id) {\n      linkedFrom {\n        eventSpeakersCollection(limit: 1) {\n          items {\n            linkedFrom {\n              eventsCollection(limit: $limit, skip: $skip) {\n                total\n                items {\n                  ...EventsContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchEventsByUserId(\n    $id: String!\n    $limit: Int\n    $skip: Int\n    $singleEvent: Boolean = false\n  ) {\n    users(id: $id) {\n      linkedFrom {\n        eventSpeakersCollection(limit: 1) {\n          items {\n            linkedFrom {\n              eventsCollection(limit: $limit, skip: $skip) {\n                total\n                items {\n                  ...EventsContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchEventsByExternalAuthorId(\n    $id: String!\n    $limit: Int\n    $skip: Int\n    $singleEvent: Boolean = false\n  ) {\n    externalAuthors(id: $id) {\n      linkedFrom {\n        eventSpeakersCollection(limit: 1) {\n          items {\n            linkedFrom {\n              eventsCollection(limit: $limit, skip: $skip) {\n                total\n                items {\n                  ...EventsContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchEventsByExternalAuthorId(\n    $id: String!\n    $limit: Int\n    $skip: Int\n    $singleEvent: Boolean = false\n  ) {\n    externalAuthors(id: $id) {\n      linkedFrom {\n        eventSpeakersCollection(limit: 1) {\n          items {\n            linkedFrom {\n              eventsCollection(limit: $limit, skip: $skip) {\n                total\n                items {\n                  ...EventsContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchEventsByTeamId(\n    $id: String!\n    $limit: Int\n    $skip: Int\n    $singleEvent: Boolean = false\n  ) {\n    teams(id: $id) {\n      linkedFrom {\n        eventSpeakersCollection(limit: 1) {\n          items {\n            linkedFrom {\n              eventsCollection(limit: $limit, skip: $skip) {\n                total\n                items {\n                  ...EventsContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchEventsByTeamId(\n    $id: String!\n    $limit: Int\n    $skip: Int\n    $singleEvent: Boolean = false\n  ) {\n    teams(id: $id) {\n      linkedFrom {\n        eventSpeakersCollection(limit: 1) {\n          items {\n            linkedFrom {\n              eventsCollection(limit: $limit, skip: $skip) {\n                total\n                items {\n                  ...EventsContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchWorkingGroupCalendar($id: String!) {\n    workingGroups(id: $id) {\n      calendars {\n        sys {\n          id\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchWorkingGroupCalendar($id: String!) {\n    workingGroups(id: $id) {\n      calendars {\n        sys {\n          id\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchInterestGroupCalendar($id: String!) {\n    interestGroups(id: $id) {\n      calendar {\n        sys {\n          id\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchInterestGroupCalendar($id: String!) {\n    interestGroups(id: $id) {\n      calendar {\n        sys {\n          id\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment ExternalAuthorsContent on ExternalAuthors {\n    sys {\n      id\n    }\n    name\n    orcid\n  }\n',
): (typeof documents)['\n  fragment ExternalAuthorsContent on ExternalAuthors {\n    sys {\n      id\n    }\n    name\n    orcid\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchExternalAuthorById($id: String!) {\n    externalAuthors(id: $id) {\n      ...ExternalAuthorsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchExternalAuthorById($id: String!) {\n    externalAuthors(id: $id) {\n      ...ExternalAuthorsContent\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchExternalAuthors(\n    $limit: Int\n    $skip: Int\n    $order: [ExternalAuthorsOrder]\n  ) {\n    externalAuthorsCollection(limit: $limit, skip: $skip, order: $order) {\n      total\n      items {\n        ...ExternalAuthorsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchExternalAuthors(\n    $limit: Int\n    $skip: Int\n    $order: [ExternalAuthorsOrder]\n  ) {\n    externalAuthorsCollection(limit: $limit, skip: $skip, order: $order) {\n      total\n      items {\n        ...ExternalAuthorsContent\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchGuideByTitle($title: String!) {\n    guideCollectionsCollection(limit: 1, where: { title: $title }) {\n      items {\n        guidesCollection(limit: 100) {\n          items {\n            title\n            icon {\n              asset {\n                url\n              }\n            }\n            contentCollection(limit: 100) {\n              items {\n                title\n                text\n                linkUrl\n                linkText\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchGuideByTitle($title: String!) {\n    guideCollectionsCollection(limit: 1, where: { title: $title }) {\n      items {\n        guidesCollection(limit: 100) {\n          items {\n            title\n            icon {\n              asset {\n                url\n              }\n            }\n            contentCollection(limit: 100) {\n              items {\n                title\n                text\n                linkUrl\n                linkText\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment InterestGroupsContent on InterestGroups {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    name\n    active\n    researchTagsCollection(limit: 5) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    description\n    slack\n    googleDrive\n    thumbnail {\n      url\n    }\n    teamsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        displayName\n        inactiveSince\n        researchTagsCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            name\n          }\n        }\n        projectTitle\n      }\n    }\n    leadersCollection(limit: 20) {\n      items {\n        sys {\n          id\n          publishedAt\n        }\n        user {\n          sys {\n            id\n            publishedAt\n            firstPublishedAt\n          }\n          firstName\n          nickname\n          lastName\n          email\n          alumniSinceDate\n          avatar {\n            url\n          }\n          teamsCollection(limit: 5) {\n            items {\n              role\n              inactiveSinceDate\n              team {\n                sys {\n                  id\n                }\n                inactiveSince\n                displayName\n              }\n            }\n          }\n        }\n        role\n        inactiveSinceDate\n      }\n    }\n    calendar {\n      sys {\n        id\n      }\n      color\n      googleCalendarId\n      name\n    }\n    lastUpdated\n  }\n',
): (typeof documents)['\n  fragment InterestGroupsContent on InterestGroups {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    name\n    active\n    researchTagsCollection(limit: 5) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    description\n    slack\n    googleDrive\n    thumbnail {\n      url\n    }\n    teamsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        displayName\n        inactiveSince\n        researchTagsCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            name\n          }\n        }\n        projectTitle\n      }\n    }\n    leadersCollection(limit: 20) {\n      items {\n        sys {\n          id\n          publishedAt\n        }\n        user {\n          sys {\n            id\n            publishedAt\n            firstPublishedAt\n          }\n          firstName\n          nickname\n          lastName\n          email\n          alumniSinceDate\n          avatar {\n            url\n          }\n          teamsCollection(limit: 5) {\n            items {\n              role\n              inactiveSinceDate\n              team {\n                sys {\n                  id\n                }\n                inactiveSince\n                displayName\n              }\n            }\n          }\n        }\n        role\n        inactiveSinceDate\n      }\n    }\n    calendar {\n      sys {\n        id\n      }\n      color\n      googleCalendarId\n      name\n    }\n    lastUpdated\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchInterestGroupById($id: String!) {\n    interestGroups(id: $id) {\n      ...InterestGroupsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchInterestGroupById($id: String!) {\n    interestGroups(id: $id) {\n      ...InterestGroupsContent\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchInterestGroups(\n    $limit: Int\n    $skip: Int\n    $order: [InterestGroupsOrder]\n    $where: InterestGroupsFilter\n  ) {\n    interestGroupsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...InterestGroupsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchInterestGroups(\n    $limit: Int\n    $skip: Int\n    $order: [InterestGroupsOrder]\n    $where: InterestGroupsFilter\n  ) {\n    interestGroupsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...InterestGroupsContent\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchInterestGroupsByUserId($id: String!, $limit: Int, $skip: Int) {\n    interestGroupLeadersCollection(\n      limit: $limit\n      skip: $skip\n      where: { user: { sys: { id: $id } } }\n    ) {\n      total\n      items {\n        linkedFrom {\n          interestGroupsCollection(limit: 1) {\n            items {\n              ...InterestGroupsContent\n            }\n          }\n        }\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchInterestGroupsByUserId($id: String!, $limit: Int, $skip: Int) {\n    interestGroupLeadersCollection(\n      limit: $limit\n      skip: $skip\n      where: { user: { sys: { id: $id } } }\n    ) {\n      total\n      items {\n        linkedFrom {\n          interestGroupsCollection(limit: 1) {\n            items {\n              ...InterestGroupsContent\n            }\n          }\n        }\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchLabs($limit: Int, $skip: Int, $where: LabsFilter) {\n    labsCollection(limit: $limit, skip: $skip, where: $where, order: name_ASC) {\n      total\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchLabs($limit: Int, $skip: Int, $where: LabsFilter) {\n    labsCollection(limit: $limit, skip: $skip, where: $where, order: name_ASC) {\n      total\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment ManuscriptsContent on Manuscripts {\n    sys {\n      id\n      publishedVersion\n    }\n    title\n    status\n    count\n    discussionsCollection(limit: 10) {\n      total\n      items {\n        ...DiscussionsContent\n      }\n    }\n    assignedUsersCollection(limit: 30) {\n      items {\n        sys {\n          id\n        }\n        firstName\n        lastName\n        avatar {\n          url\n        }\n      }\n    }\n    versionsCollection(limit: 20, order: sys_firstPublishedAt_DESC) {\n      items {\n        sys {\n          id\n          publishedAt\n          firstPublishedAt\n        }\n        type\n        lifecycle\n        description\n        count\n        manuscriptFile {\n          sys {\n            id\n          }\n          fileName\n          url\n        }\n        keyResourceTable {\n          sys {\n            id\n          }\n          fileName\n          url\n        }\n        additionalFilesCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            fileName\n            url\n          }\n        }\n        preprintDoi\n        publicationDoi\n        requestingApcCoverage\n        submitterName\n        submissionDate\n        otherDetails\n        acknowledgedGrantNumber\n        acknowledgedGrantNumberDetails\n        asapAffiliationIncluded\n        asapAffiliationIncludedDetails\n        manuscriptLicense\n        manuscriptLicenseDetails\n        datasetsDeposited\n        datasetsDepositedDetails\n        codeDeposited\n        codeDepositedDetails\n        protocolsDeposited\n        protocolsDepositedDetails\n        labMaterialsRegistered\n        labMaterialsRegisteredDetails\n        availabilityStatement\n        availabilityStatementDetails\n        teamsCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            displayName\n            inactiveSince\n          }\n        }\n        labsCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            labPi {\n              sys {\n                id\n              }\n            }\n            name\n          }\n        }\n        createdBy {\n          sys {\n            id\n          }\n          firstName\n          nickname\n          lastName\n          alumniSinceDate\n          avatar {\n            url\n          }\n          teamsCollection(limit: 3) {\n            items {\n              team {\n                sys {\n                  id\n                }\n                displayName\n              }\n            }\n          }\n        }\n        updatedBy {\n          sys {\n            id\n          }\n          firstName\n          nickname\n          lastName\n          alumniSinceDate\n          avatar {\n            url\n          }\n          teamsCollection(limit: 3) {\n            items {\n              team {\n                sys {\n                  id\n                }\n                displayName\n              }\n            }\n          }\n        }\n        firstAuthorsCollection(limit: 15) {\n          items {\n            __typename\n            ... on ExternalAuthors {\n              sys {\n                id\n              }\n              name\n              email\n            }\n            ... on Users {\n              sys {\n                id\n              }\n              avatar {\n                url\n              }\n              firstName\n              lastName\n              nickname\n              email\n            }\n          }\n        }\n        additionalAuthorsCollection(limit: 15) {\n          items {\n            __typename\n            ... on ExternalAuthors {\n              sys {\n                id\n              }\n              name\n              email\n            }\n            ... on Users {\n              sys {\n                id\n              }\n              avatar {\n                url\n              }\n              firstName\n              lastName\n              nickname\n              email\n            }\n          }\n        }\n        correspondingAuthorCollection(limit: 1) {\n          items {\n            __typename\n            ... on ExternalAuthors {\n              sys {\n                id\n              }\n              name\n              email\n            }\n            ... on Users {\n              sys {\n                id\n              }\n              avatar {\n                url\n              }\n              firstName\n              lastName\n              nickname\n              email\n            }\n          }\n        }\n        linkedFrom {\n          complianceReportsCollection(limit: 1) {\n            items {\n              sys {\n                id\n                firstPublishedAt\n              }\n              url\n              description\n              createdBy {\n                sys {\n                  id\n                }\n                firstName\n                nickname\n                lastName\n                alumniSinceDate\n                avatar {\n                  url\n                }\n                teamsCollection(limit: 3) {\n                  items {\n                    team {\n                      sys {\n                        id\n                      }\n                      displayName\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  fragment ManuscriptsContent on Manuscripts {\n    sys {\n      id\n      publishedVersion\n    }\n    title\n    status\n    count\n    discussionsCollection(limit: 10) {\n      total\n      items {\n        ...DiscussionsContent\n      }\n    }\n    assignedUsersCollection(limit: 30) {\n      items {\n        sys {\n          id\n        }\n        firstName\n        lastName\n        avatar {\n          url\n        }\n      }\n    }\n    versionsCollection(limit: 20, order: sys_firstPublishedAt_DESC) {\n      items {\n        sys {\n          id\n          publishedAt\n          firstPublishedAt\n        }\n        type\n        lifecycle\n        description\n        count\n        manuscriptFile {\n          sys {\n            id\n          }\n          fileName\n          url\n        }\n        keyResourceTable {\n          sys {\n            id\n          }\n          fileName\n          url\n        }\n        additionalFilesCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            fileName\n            url\n          }\n        }\n        preprintDoi\n        publicationDoi\n        requestingApcCoverage\n        submitterName\n        submissionDate\n        otherDetails\n        acknowledgedGrantNumber\n        acknowledgedGrantNumberDetails\n        asapAffiliationIncluded\n        asapAffiliationIncludedDetails\n        manuscriptLicense\n        manuscriptLicenseDetails\n        datasetsDeposited\n        datasetsDepositedDetails\n        codeDeposited\n        codeDepositedDetails\n        protocolsDeposited\n        protocolsDepositedDetails\n        labMaterialsRegistered\n        labMaterialsRegisteredDetails\n        availabilityStatement\n        availabilityStatementDetails\n        teamsCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            displayName\n            inactiveSince\n          }\n        }\n        labsCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            labPi {\n              sys {\n                id\n              }\n            }\n            name\n          }\n        }\n        createdBy {\n          sys {\n            id\n          }\n          firstName\n          nickname\n          lastName\n          alumniSinceDate\n          avatar {\n            url\n          }\n          teamsCollection(limit: 3) {\n            items {\n              team {\n                sys {\n                  id\n                }\n                displayName\n              }\n            }\n          }\n        }\n        updatedBy {\n          sys {\n            id\n          }\n          firstName\n          nickname\n          lastName\n          alumniSinceDate\n          avatar {\n            url\n          }\n          teamsCollection(limit: 3) {\n            items {\n              team {\n                sys {\n                  id\n                }\n                displayName\n              }\n            }\n          }\n        }\n        firstAuthorsCollection(limit: 15) {\n          items {\n            __typename\n            ... on ExternalAuthors {\n              sys {\n                id\n              }\n              name\n              email\n            }\n            ... on Users {\n              sys {\n                id\n              }\n              avatar {\n                url\n              }\n              firstName\n              lastName\n              nickname\n              email\n            }\n          }\n        }\n        additionalAuthorsCollection(limit: 15) {\n          items {\n            __typename\n            ... on ExternalAuthors {\n              sys {\n                id\n              }\n              name\n              email\n            }\n            ... on Users {\n              sys {\n                id\n              }\n              avatar {\n                url\n              }\n              firstName\n              lastName\n              nickname\n              email\n            }\n          }\n        }\n        correspondingAuthorCollection(limit: 1) {\n          items {\n            __typename\n            ... on ExternalAuthors {\n              sys {\n                id\n              }\n              name\n              email\n            }\n            ... on Users {\n              sys {\n                id\n              }\n              avatar {\n                url\n              }\n              firstName\n              lastName\n              nickname\n              email\n            }\n          }\n        }\n        linkedFrom {\n          complianceReportsCollection(limit: 1) {\n            items {\n              sys {\n                id\n                firstPublishedAt\n              }\n              url\n              description\n              createdBy {\n                sys {\n                  id\n                }\n                firstName\n                nickname\n                lastName\n                alumniSinceDate\n                avatar {\n                  url\n                }\n                teamsCollection(limit: 3) {\n                  items {\n                    team {\n                      sys {\n                        id\n                      }\n                      displayName\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchManuscriptById($id: String!) {\n    manuscripts(id: $id) {\n      ...ManuscriptsContent\n      teamsCollection(limit: 10) {\n        items {\n          sys {\n            id\n          }\n          teamId\n          grantId\n        }\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchManuscriptById($id: String!) {\n    manuscripts(id: $id) {\n      ...ManuscriptsContent\n      teamsCollection(limit: 10) {\n        items {\n          sys {\n            id\n          }\n          teamId\n          grantId\n        }\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchManuscripts($limit: Int, $skip: Int, $where: ManuscriptsFilter) {\n    manuscriptsCollection(limit: $limit, skip: $skip, where: $where) {\n      total\n      items {\n        sys {\n          id\n        }\n        title\n        status\n        count\n        assignedUsersCollection(limit: 30) {\n          items {\n            sys {\n              id\n            }\n            firstName\n            lastName\n            avatar {\n              url\n            }\n          }\n        }\n        teamsCollection(limit: 15) {\n          items {\n            sys {\n              id\n            }\n            displayName\n            teamId\n            grantId\n          }\n        }\n        versionsCollection(limit: 1, order: sys_firstPublishedAt_DESC) {\n          items {\n            sys {\n              id\n              publishedAt\n            }\n            requestingApcCoverage\n            type\n            lifecycle\n            count\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchManuscripts($limit: Int, $skip: Int, $where: ManuscriptsFilter) {\n    manuscriptsCollection(limit: $limit, skip: $skip, where: $where) {\n      total\n      items {\n        sys {\n          id\n        }\n        title\n        status\n        count\n        assignedUsersCollection(limit: 30) {\n          items {\n            sys {\n              id\n            }\n            firstName\n            lastName\n            avatar {\n              url\n            }\n          }\n        }\n        teamsCollection(limit: 15) {\n          items {\n            sys {\n              id\n            }\n            displayName\n            teamId\n            grantId\n          }\n        }\n        versionsCollection(limit: 1, order: sys_firstPublishedAt_DESC) {\n          items {\n            sys {\n              id\n              publishedAt\n            }\n            requestingApcCoverage\n            type\n            lifecycle\n            count\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchManuscriptNotificationDetails($id: String!) {\n    manuscripts(id: $id) {\n      sys {\n        id\n      }\n      title\n      count\n      teamsCollection(limit: 1) {\n        items {\n          sys {\n            id\n          }\n          displayName\n          teamId\n          grantId\n        }\n      }\n      assignedUsersCollection(limit: 30) {\n        items {\n          firstName\n          lastName\n        }\n      }\n      versionsCollection(limit: 1, order: sys_firstPublishedAt_DESC) {\n        items {\n          sys {\n            id\n            publishedAt\n          }\n          teamsCollection(limit: 10) {\n            items {\n              sys {\n                id\n              }\n              displayName\n              inactiveSince\n              linkedFrom {\n                teamMembershipCollection(limit: 100) {\n                  items {\n                    role\n                    inactiveSinceDate\n                    linkedFrom {\n                      usersCollection(limit: 1) {\n                        items {\n                          alumniSinceDate\n                          email\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          firstAuthorsCollection(limit: 15) {\n            items {\n              __typename\n              ... on ExternalAuthors {\n                email\n              }\n              ... on Users {\n                email\n              }\n            }\n          }\n          additionalAuthorsCollection(limit: 15) {\n            items {\n              __typename\n              ... on ExternalAuthors {\n                email\n              }\n              ... on Users {\n                email\n              }\n            }\n          }\n          correspondingAuthorCollection(limit: 1) {\n            items {\n              __typename\n              ... on ExternalAuthors {\n                email\n              }\n              ... on Users {\n                email\n              }\n            }\n          }\n          labsCollection(limit: 10) {\n            items {\n              labPi {\n                alumniSinceDate\n                email\n              }\n            }\n          }\n          type\n          lifecycle\n          count\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchManuscriptNotificationDetails($id: String!) {\n    manuscripts(id: $id) {\n      sys {\n        id\n      }\n      title\n      count\n      teamsCollection(limit: 1) {\n        items {\n          sys {\n            id\n          }\n          displayName\n          teamId\n          grantId\n        }\n      }\n      assignedUsersCollection(limit: 30) {\n        items {\n          firstName\n          lastName\n        }\n      }\n      versionsCollection(limit: 1, order: sys_firstPublishedAt_DESC) {\n        items {\n          sys {\n            id\n            publishedAt\n          }\n          teamsCollection(limit: 10) {\n            items {\n              sys {\n                id\n              }\n              displayName\n              inactiveSince\n              linkedFrom {\n                teamMembershipCollection(limit: 100) {\n                  items {\n                    role\n                    inactiveSinceDate\n                    linkedFrom {\n                      usersCollection(limit: 1) {\n                        items {\n                          alumniSinceDate\n                          email\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          firstAuthorsCollection(limit: 15) {\n            items {\n              __typename\n              ... on ExternalAuthors {\n                email\n              }\n              ... on Users {\n                email\n              }\n            }\n          }\n          additionalAuthorsCollection(limit: 15) {\n            items {\n              __typename\n              ... on ExternalAuthors {\n                email\n              }\n              ... on Users {\n                email\n              }\n            }\n          }\n          correspondingAuthorCollection(limit: 1) {\n            items {\n              __typename\n              ... on ExternalAuthors {\n                email\n              }\n              ... on Users {\n                email\n              }\n            }\n          }\n          labsCollection(limit: 10) {\n            items {\n              labPi {\n                alumniSinceDate\n                email\n              }\n            }\n          }\n          type\n          lifecycle\n          count\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchManuscriptsByTeamId($id: String!) {\n    teams(id: $id) {\n      linkedFrom {\n        manuscriptsCollection(limit: 500) {\n          items {\n            teamsCollection {\n              items {\n                sys {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchManuscriptsByTeamId($id: String!) {\n    teams(id: $id) {\n      linkedFrom {\n        manuscriptsCollection(limit: 500) {\n          items {\n            teamsCollection {\n              items {\n                sys {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment NewsContent on News {\n    sys {\n      id\n      firstPublishedAt\n    }\n    title\n    shortText\n    frequency\n    link\n    linkText\n    thumbnail {\n      url\n    }\n    text {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    tagsCollection(limit: 20) {\n      items {\n        name\n      }\n    }\n    publishDate\n  }\n',
): (typeof documents)['\n  fragment NewsContent on News {\n    sys {\n      id\n      firstPublishedAt\n    }\n    title\n    shortText\n    frequency\n    link\n    linkText\n    thumbnail {\n      url\n    }\n    text {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    tagsCollection(limit: 20) {\n      items {\n        name\n      }\n    }\n    publishDate\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchNewsById($id: String!) {\n    news(id: $id) {\n      ...NewsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchNewsById($id: String!) {\n    news(id: $id) {\n      ...NewsContent\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchNews(\n    $limit: Int\n    $skip: Int\n    $order: [NewsOrder]\n    $where: NewsFilter\n  ) {\n    newsCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...NewsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchNews(\n    $limit: Int\n    $skip: Int\n    $order: [NewsOrder]\n    $where: NewsFilter\n  ) {\n    newsCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...NewsContent\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment PageContent on Pages {\n    sys {\n      id\n    }\n    title\n    path\n    shortText\n    text {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    link\n    linkText\n  }\n',
): (typeof documents)['\n  fragment PageContent on Pages {\n    sys {\n      id\n    }\n    title\n    path\n    shortText\n    text {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    link\n    linkText\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchPages($where: PagesFilter) {\n    pagesCollection(limit: 100, where: $where) {\n      total\n      items {\n        ...PageContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchPages($where: PagesFilter) {\n    pagesCollection(limit: 100, where: $where) {\n      total\n      items {\n        ...PageContent\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchReminders(\n    $researchOutputFilter: ResearchOutputsFilter\n    $eventFilter: EventsFilter\n    $userId: String!\n    $researchOutputVersionsFilter: ResearchOutputVersionsFilter\n    $manuscriptFilter: ManuscriptsFilter\n  ) {\n    manuscriptsCollection(where: $manuscriptFilter) {\n      items {\n        sys {\n          id\n          publishedAt\n          firstPublishedAt\n        }\n        title\n        status\n        previousStatus\n        statusUpdatedAt\n        statusUpdatedBy {\n          sys {\n            id\n          }\n          firstName\n          lastName\n        }\n        teamsCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            displayName\n          }\n        }\n        assignedUsersCollection(limit: 30) {\n          items {\n            sys {\n              id\n            }\n          }\n        }\n        versionsCollection(limit: 10) {\n          total\n          items {\n            count\n            createdBy {\n              sys {\n                id\n              }\n              firstName\n              lastName\n            }\n            firstAuthorsCollection(limit: 10) {\n              items {\n                __typename\n                ... on Users {\n                  sys {\n                    id\n                  }\n                }\n              }\n            }\n            additionalAuthorsCollection(limit: 10) {\n              items {\n                __typename\n                ... on Users {\n                  sys {\n                    id\n                  }\n                }\n              }\n            }\n            correspondingAuthorCollection(limit: 10) {\n              items {\n                __typename\n                ... on Users {\n                  sys {\n                    id\n                  }\n                }\n              }\n            }\n            labsCollection(limit: 10) {\n              items {\n                labPi {\n                  sys {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    researchOutputsCollection(where: $researchOutputFilter, preview: true) {\n      items {\n        sys {\n          id\n          publishedAt\n        }\n        addedDate\n        createdDate\n        documentType\n        title\n        teamsCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            displayName\n          }\n        }\n        workingGroup {\n          sys {\n            id\n          }\n          title\n        }\n        createdBy {\n          sys {\n            id\n          }\n          firstName\n          lastName\n        }\n        statusChangedAt\n        statusChangedBy {\n          sys {\n            id\n          }\n          firstName\n          lastName\n        }\n        isInReview\n      }\n    }\n    eventsCollection(where: $eventFilter) {\n      items {\n        sys {\n          id\n        }\n        startDate\n        endDate\n        title\n        videoRecordingUpdatedAt\n        presentationUpdatedAt\n        notesUpdatedAt\n        speakersCollection(limit: 30) {\n          items {\n            team {\n              sys {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n    users(id: $userId) {\n      role\n      openScienceTeamMember\n      teamsCollection {\n        items {\n          team {\n            sys {\n              id\n            }\n            displayName\n          }\n          role\n        }\n      }\n      linkedFrom {\n        workingGroupMembersCollection(limit: 10) {\n          items {\n            linkedFrom {\n              workingGroupsCollection(limit: 1) {\n                items {\n                  sys {\n                    id\n                  }\n                  title\n                }\n              }\n            }\n          }\n        }\n        workingGroupLeadersCollection(limit: 10) {\n          items {\n            role\n            linkedFrom {\n              workingGroupsCollection(limit: 1) {\n                items {\n                  sys {\n                    id\n                  }\n                  title\n                }\n              }\n            }\n          }\n        }\n        eventSpeakersCollection(limit: 100) {\n          items {\n            team {\n              sys {\n                id\n              }\n            }\n            linkedFrom {\n              eventsCollection(limit: 1) {\n                items {\n                  sys {\n                    id\n                  }\n                  title\n                  endDate\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    researchOutputVersionsCollection(where: $researchOutputVersionsFilter) {\n      items {\n        sys {\n          id\n          publishedAt\n        }\n        linkedFrom {\n          researchOutputsCollection(limit: 1) {\n            items {\n              sys {\n                id\n              }\n              title\n              documentType\n              teamsCollection(limit: 10) {\n                items {\n                  sys {\n                    id\n                  }\n                  displayName\n                }\n              }\n              workingGroup {\n                sys {\n                  id\n                }\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchReminders(\n    $researchOutputFilter: ResearchOutputsFilter\n    $eventFilter: EventsFilter\n    $userId: String!\n    $researchOutputVersionsFilter: ResearchOutputVersionsFilter\n    $manuscriptFilter: ManuscriptsFilter\n  ) {\n    manuscriptsCollection(where: $manuscriptFilter) {\n      items {\n        sys {\n          id\n          publishedAt\n          firstPublishedAt\n        }\n        title\n        status\n        previousStatus\n        statusUpdatedAt\n        statusUpdatedBy {\n          sys {\n            id\n          }\n          firstName\n          lastName\n        }\n        teamsCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            displayName\n          }\n        }\n        assignedUsersCollection(limit: 30) {\n          items {\n            sys {\n              id\n            }\n          }\n        }\n        versionsCollection(limit: 10) {\n          total\n          items {\n            count\n            createdBy {\n              sys {\n                id\n              }\n              firstName\n              lastName\n            }\n            firstAuthorsCollection(limit: 10) {\n              items {\n                __typename\n                ... on Users {\n                  sys {\n                    id\n                  }\n                }\n              }\n            }\n            additionalAuthorsCollection(limit: 10) {\n              items {\n                __typename\n                ... on Users {\n                  sys {\n                    id\n                  }\n                }\n              }\n            }\n            correspondingAuthorCollection(limit: 10) {\n              items {\n                __typename\n                ... on Users {\n                  sys {\n                    id\n                  }\n                }\n              }\n            }\n            labsCollection(limit: 10) {\n              items {\n                labPi {\n                  sys {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    researchOutputsCollection(where: $researchOutputFilter, preview: true) {\n      items {\n        sys {\n          id\n          publishedAt\n        }\n        addedDate\n        createdDate\n        documentType\n        title\n        teamsCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            displayName\n          }\n        }\n        workingGroup {\n          sys {\n            id\n          }\n          title\n        }\n        createdBy {\n          sys {\n            id\n          }\n          firstName\n          lastName\n        }\n        statusChangedAt\n        statusChangedBy {\n          sys {\n            id\n          }\n          firstName\n          lastName\n        }\n        isInReview\n      }\n    }\n    eventsCollection(where: $eventFilter) {\n      items {\n        sys {\n          id\n        }\n        startDate\n        endDate\n        title\n        videoRecordingUpdatedAt\n        presentationUpdatedAt\n        notesUpdatedAt\n        speakersCollection(limit: 30) {\n          items {\n            team {\n              sys {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n    users(id: $userId) {\n      role\n      openScienceTeamMember\n      teamsCollection {\n        items {\n          team {\n            sys {\n              id\n            }\n            displayName\n          }\n          role\n        }\n      }\n      linkedFrom {\n        workingGroupMembersCollection(limit: 10) {\n          items {\n            linkedFrom {\n              workingGroupsCollection(limit: 1) {\n                items {\n                  sys {\n                    id\n                  }\n                  title\n                }\n              }\n            }\n          }\n        }\n        workingGroupLeadersCollection(limit: 10) {\n          items {\n            role\n            linkedFrom {\n              workingGroupsCollection(limit: 1) {\n                items {\n                  sys {\n                    id\n                  }\n                  title\n                }\n              }\n            }\n          }\n        }\n        eventSpeakersCollection(limit: 100) {\n          items {\n            team {\n              sys {\n                id\n              }\n            }\n            linkedFrom {\n              eventsCollection(limit: 1) {\n                items {\n                  sys {\n                    id\n                  }\n                  title\n                  endDate\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    researchOutputVersionsCollection(where: $researchOutputVersionsFilter) {\n      items {\n        sys {\n          id\n          publishedAt\n        }\n        linkedFrom {\n          researchOutputsCollection(limit: 1) {\n            items {\n              sys {\n                id\n              }\n              title\n              documentType\n              teamsCollection(limit: 10) {\n                items {\n                  sys {\n                    id\n                  }\n                  displayName\n                }\n              }\n              workingGroup {\n                sys {\n                  id\n                }\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchTeamProjectManager($id: String!) {\n    teamMembershipCollection(\n      where: {\n        AND: [{ team: { sys: { id: $id } } }, { role: "Project Manager" }]\n      }\n    ) {\n      items {\n        linkedFrom {\n          usersCollection(limit: 1) {\n            total\n            items {\n              sys {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchTeamProjectManager($id: String!) {\n    teamMembershipCollection(\n      where: {\n        AND: [{ team: { sys: { id: $id } } }, { role: "Project Manager" }]\n      }\n    ) {\n      items {\n        linkedFrom {\n          usersCollection(limit: 1) {\n            total\n            items {\n              sys {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchDiscussionReminders($discussionFilter: DiscussionsFilter) {\n    discussionsCollection(where: $discussionFilter) {\n      items {\n        sys {\n          id\n          firstPublishedAt\n        }\n        message {\n          createdBy {\n            sys {\n              id\n            }\n            firstName\n            lastName\n            role\n            openScienceTeamMember\n            teamsCollection(\n              limit: 10\n              where: { inactiveSinceDate_exists: false }\n            ) {\n              items {\n                team {\n                  sys {\n                    id\n                  }\n                  displayName\n                  inactiveSince\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchDiscussionReminders($discussionFilter: DiscussionsFilter) {\n    discussionsCollection(where: $discussionFilter) {\n      items {\n        sys {\n          id\n          firstPublishedAt\n        }\n        message {\n          createdBy {\n            sys {\n              id\n            }\n            firstName\n            lastName\n            role\n            openScienceTeamMember\n            teamsCollection(\n              limit: 10\n              where: { inactiveSinceDate_exists: false }\n            ) {\n              items {\n                team {\n                  sys {\n                    id\n                  }\n                  displayName\n                  inactiveSince\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchMessageReminders($messageFilter: MessagesFilter) {\n    messagesCollection(where: $messageFilter) {\n      items {\n        sys {\n          id\n          firstPublishedAt\n        }\n        createdBy {\n          sys {\n            id\n          }\n          firstName\n          lastName\n          role\n          openScienceTeamMember\n          teamsCollection(\n            limit: 10\n            where: { inactiveSinceDate_exists: false }\n          ) {\n            items {\n              team {\n                sys {\n                  id\n                }\n                displayName\n                inactiveSince\n              }\n            }\n          }\n        }\n        linkedFrom {\n          discussionsCollection(limit: 1) {\n            items {\n              message {\n                sys {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchMessageReminders($messageFilter: MessagesFilter) {\n    messagesCollection(where: $messageFilter) {\n      items {\n        sys {\n          id\n          firstPublishedAt\n        }\n        createdBy {\n          sys {\n            id\n          }\n          firstName\n          lastName\n          role\n          openScienceTeamMember\n          teamsCollection(\n            limit: 10\n            where: { inactiveSinceDate_exists: false }\n          ) {\n            items {\n              team {\n                sys {\n                  id\n                }\n                displayName\n                inactiveSince\n              }\n            }\n          }\n        }\n        linkedFrom {\n          discussionsCollection(limit: 1) {\n            items {\n              message {\n                sys {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment ResearchOutputsContent on ResearchOutputs {\n    sys {\n      id\n      publishedVersion\n    }\n    title\n    descriptionMd\n    shortDescription\n    link\n    addedDate\n    createdDate\n    lastUpdatedPartial\n    documentType\n    sharingStatus\n    labCatalogNumber\n    doi\n    accession\n    rrid\n    asapFunded\n    usedInAPublication\n    type\n    publishDate\n    description {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    usageNotes\n    statusChangedBy {\n      sys {\n        id\n      }\n      firstName\n      lastName\n      email\n    }\n    statusChangedAt\n    isInReview\n    authorsCollection(limit: 100) {\n      items {\n        __typename\n        ... on ExternalAuthors {\n          sys {\n            id\n          }\n          name\n          orcid\n        }\n        ... on Users {\n          sys {\n            id\n          }\n          firstName\n          nickname\n          lastName\n          email\n          onboarded\n          orcid\n          alumniSinceDate\n          avatar {\n            url\n          }\n        }\n      }\n    }\n    teamsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        displayName\n        researchTheme {\n          name\n        }\n        linkedFrom {\n          teamMembershipCollection @include(if: $fetchPMs) {\n            items {\n              role\n              inactiveSinceDate\n              linkedFrom {\n                usersCollection(limit: 1) {\n                  items {\n                    email\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    workingGroup {\n      sys {\n        id\n      }\n      title\n    }\n    methodsCollection(limit: 5) {\n      items {\n        name\n      }\n    }\n    keywordsCollection(limit: 20) {\n      items {\n        name\n      }\n    }\n    organismsCollection(limit: 5) {\n      items {\n        name\n      }\n    }\n    environmentsCollection(limit: 5) {\n      items {\n        name\n      }\n    }\n    subtype {\n      name\n    }\n    labsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    relatedResearchCollection(limit: 20, where: $relatedResearchWhere) {\n      items {\n        sys {\n          id\n        }\n        title\n        type\n        documentType\n        teamsCollection(limit: 20) @include(if: $singleOutput) {\n          items {\n            sys {\n              id\n            }\n            displayName\n          }\n        }\n        workingGroup @include(if: $singleOutput) {\n          sys {\n            id\n          }\n          title\n        }\n      }\n    }\n    linkedFrom {\n      researchOutputsCollection(limit: 60, order: [addedDate_ASC]) {\n        items {\n          sys {\n            id\n          }\n          title\n          type\n          documentType\n          teamsCollection(limit: 20) @include(if: $singleOutput) {\n            items {\n              sys {\n                id\n              }\n              displayName\n            }\n          }\n          workingGroup @include(if: $singleOutput) {\n            sys {\n              id\n            }\n            title\n          }\n        }\n      }\n    }\n    relatedEventsCollection(limit: 10) {\n      items {\n        sys {\n          id\n        }\n        title\n        endDate\n      }\n    }\n    versionsCollection {\n      items {\n        sys {\n          id\n        }\n        title\n        documentType\n        type\n        addedDate\n        link\n        rrid\n        accession\n      }\n    }\n  }\n',
): (typeof documents)['\n  fragment ResearchOutputsContent on ResearchOutputs {\n    sys {\n      id\n      publishedVersion\n    }\n    title\n    descriptionMd\n    shortDescription\n    link\n    addedDate\n    createdDate\n    lastUpdatedPartial\n    documentType\n    sharingStatus\n    labCatalogNumber\n    doi\n    accession\n    rrid\n    asapFunded\n    usedInAPublication\n    type\n    publishDate\n    description {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    usageNotes\n    statusChangedBy {\n      sys {\n        id\n      }\n      firstName\n      lastName\n      email\n    }\n    statusChangedAt\n    isInReview\n    authorsCollection(limit: 100) {\n      items {\n        __typename\n        ... on ExternalAuthors {\n          sys {\n            id\n          }\n          name\n          orcid\n        }\n        ... on Users {\n          sys {\n            id\n          }\n          firstName\n          nickname\n          lastName\n          email\n          onboarded\n          orcid\n          alumniSinceDate\n          avatar {\n            url\n          }\n        }\n      }\n    }\n    teamsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        displayName\n        researchTheme {\n          name\n        }\n        linkedFrom {\n          teamMembershipCollection @include(if: $fetchPMs) {\n            items {\n              role\n              inactiveSinceDate\n              linkedFrom {\n                usersCollection(limit: 1) {\n                  items {\n                    email\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    workingGroup {\n      sys {\n        id\n      }\n      title\n    }\n    methodsCollection(limit: 5) {\n      items {\n        name\n      }\n    }\n    keywordsCollection(limit: 20) {\n      items {\n        name\n      }\n    }\n    organismsCollection(limit: 5) {\n      items {\n        name\n      }\n    }\n    environmentsCollection(limit: 5) {\n      items {\n        name\n      }\n    }\n    subtype {\n      name\n    }\n    labsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    relatedResearchCollection(limit: 20, where: $relatedResearchWhere) {\n      items {\n        sys {\n          id\n        }\n        title\n        type\n        documentType\n        teamsCollection(limit: 20) @include(if: $singleOutput) {\n          items {\n            sys {\n              id\n            }\n            displayName\n          }\n        }\n        workingGroup @include(if: $singleOutput) {\n          sys {\n            id\n          }\n          title\n        }\n      }\n    }\n    linkedFrom {\n      researchOutputsCollection(limit: 60, order: [addedDate_ASC]) {\n        items {\n          sys {\n            id\n          }\n          title\n          type\n          documentType\n          teamsCollection(limit: 20) @include(if: $singleOutput) {\n            items {\n              sys {\n                id\n              }\n              displayName\n            }\n          }\n          workingGroup @include(if: $singleOutput) {\n            sys {\n              id\n            }\n            title\n          }\n        }\n      }\n    }\n    relatedEventsCollection(limit: 10) {\n      items {\n        sys {\n          id\n        }\n        title\n        endDate\n      }\n    }\n    versionsCollection {\n      items {\n        sys {\n          id\n        }\n        title\n        documentType\n        type\n        addedDate\n        link\n        rrid\n        accession\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchResearchOutputById(\n    $id: String!\n    $preview: Boolean\n    $fetchPMs: Boolean = true\n    $singleOutput: Boolean = true\n    $relatedResearchWhere: ResearchOutputsFilter = {}\n  ) {\n    researchOutputs(id: $id, preview: $preview) {\n      ...ResearchOutputsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchResearchOutputById(\n    $id: String!\n    $preview: Boolean\n    $fetchPMs: Boolean = true\n    $singleOutput: Boolean = true\n    $relatedResearchWhere: ResearchOutputsFilter = {}\n  ) {\n    researchOutputs(id: $id, preview: $preview) {\n      ...ResearchOutputsContent\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchResearchOutputs(\n    $limit: Int\n    $skip: Int\n    $order: [ResearchOutputsOrder]\n    $where: ResearchOutputsFilter\n    $preview: Boolean\n    $fetchPMs: Boolean = false\n    $singleOutput: Boolean = false\n    $relatedResearchWhere: ResearchOutputsFilter\n  ) {\n    researchOutputsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n      preview: $preview\n    ) {\n      total\n      items {\n        ...ResearchOutputsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchResearchOutputs(\n    $limit: Int\n    $skip: Int\n    $order: [ResearchOutputsOrder]\n    $where: ResearchOutputsFilter\n    $preview: Boolean\n    $fetchPMs: Boolean = false\n    $singleOutput: Boolean = false\n    $relatedResearchWhere: ResearchOutputsFilter\n  ) {\n    researchOutputsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n      preview: $preview\n    ) {\n      total\n      items {\n        ...ResearchOutputsContent\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment ResearchTagsContent on ResearchTags {\n    sys {\n      id\n    }\n    name\n    category\n    types\n  }\n',
): (typeof documents)['\n  fragment ResearchTagsContent on ResearchTags {\n    sys {\n      id\n    }\n    name\n    category\n    types\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchResearchTags(\n    $limit: Int\n    $skip: Int\n    $order: [ResearchTagsOrder]\n    $where: ResearchTagsFilter\n  ) {\n    researchTagsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...ResearchTagsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchResearchTags(\n    $limit: Int\n    $skip: Int\n    $order: [ResearchTagsOrder]\n    $where: ResearchTagsFilter\n  ) {\n    researchTagsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...ResearchTagsContent\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchResearchTagsById($id: String!) {\n    researchTags(id: $id) {\n      ...ResearchTagsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchResearchTagsById($id: String!) {\n    researchTags(id: $id) {\n      ...ResearchTagsContent\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchTeamById($id: String!) {\n    teams(id: $id) {\n      sys {\n        id\n        publishedAt\n      }\n      displayName\n      teamId\n      grantId\n      inactiveSince\n      projectSummary\n      projectTitle\n      proposal {\n        sys {\n          id\n        }\n      }\n      toolsCollection {\n        items {\n          name\n          description\n          url\n        }\n      }\n      researchTagsCollection(limit: 20) {\n        items {\n          sys {\n            id\n          }\n          name\n        }\n      }\n      supplementGrant {\n        title\n        description\n        startDate\n        endDate\n        proposal {\n          sys {\n            id\n          }\n        }\n      }\n      linkedFrom {\n        manuscriptsCollection(limit: 20, order: sys_firstPublishedAt_DESC) {\n          items {\n            ...ManuscriptsContent\n            teamsCollection(limit: 1) {\n              items {\n                sys {\n                  id\n                }\n                teamId\n                grantId\n              }\n            }\n          }\n        }\n        teamMembershipCollection(limit: 100) {\n          items {\n            role\n            inactiveSinceDate\n            linkedFrom {\n              usersCollection(limit: 1) {\n                items {\n                  sys {\n                    id\n                  }\n                  onboarded\n                  firstName\n                  nickname\n                  lastName\n                  email\n                  alumniSinceDate\n                  avatar {\n                    url\n                  }\n                  labsCollection(limit: 5) {\n                    items {\n                      sys {\n                        id\n                      }\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchTeamById($id: String!) {\n    teams(id: $id) {\n      sys {\n        id\n        publishedAt\n      }\n      displayName\n      teamId\n      grantId\n      inactiveSince\n      projectSummary\n      projectTitle\n      proposal {\n        sys {\n          id\n        }\n      }\n      toolsCollection {\n        items {\n          name\n          description\n          url\n        }\n      }\n      researchTagsCollection(limit: 20) {\n        items {\n          sys {\n            id\n          }\n          name\n        }\n      }\n      supplementGrant {\n        title\n        description\n        startDate\n        endDate\n        proposal {\n          sys {\n            id\n          }\n        }\n      }\n      linkedFrom {\n        manuscriptsCollection(limit: 20, order: sys_firstPublishedAt_DESC) {\n          items {\n            ...ManuscriptsContent\n            teamsCollection(limit: 1) {\n              items {\n                sys {\n                  id\n                }\n                teamId\n                grantId\n              }\n            }\n          }\n        }\n        teamMembershipCollection(limit: 100) {\n          items {\n            role\n            inactiveSinceDate\n            linkedFrom {\n              usersCollection(limit: 1) {\n                items {\n                  sys {\n                    id\n                  }\n                  onboarded\n                  firstName\n                  nickname\n                  lastName\n                  email\n                  alumniSinceDate\n                  avatar {\n                    url\n                  }\n                  labsCollection(limit: 5) {\n                    items {\n                      sys {\n                        id\n                      }\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchTeams(\n    $limit: Int\n    $skip: Int\n    $order: [TeamsOrder]\n    $where: TeamsFilter\n  ) {\n    teamsCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        sys {\n          id\n        }\n        displayName\n        inactiveSince\n        projectTitle\n        researchTagsCollection(limit: 20) {\n          items {\n            sys {\n              id\n            }\n            name\n          }\n        }\n        linkedFrom {\n          teamMembershipCollection(limit: 100) {\n            items {\n              role\n              linkedFrom {\n                usersCollection(limit: 1) {\n                  items {\n                    sys {\n                      id\n                    }\n                    onboarded\n                    labsCollection(limit: 5) {\n                      items {\n                        sys {\n                          id\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchTeams(\n    $limit: Int\n    $skip: Int\n    $order: [TeamsOrder]\n    $where: TeamsFilter\n  ) {\n    teamsCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        sys {\n          id\n        }\n        displayName\n        inactiveSince\n        projectTitle\n        researchTagsCollection(limit: 20) {\n          items {\n            sys {\n              id\n            }\n            name\n          }\n        }\n        linkedFrom {\n          teamMembershipCollection(limit: 100) {\n            items {\n              role\n              linkedFrom {\n                usersCollection(limit: 1) {\n                  items {\n                    sys {\n                      id\n                    }\n                    onboarded\n                    labsCollection(limit: 5) {\n                      items {\n                        sys {\n                          id\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment TutorialsContent on Tutorials {\n    sys {\n      id\n    }\n    addedDate\n    lastUpdated\n    datePublished\n    asapFunded\n    usedInAPublication\n    sharingStatus\n    title\n    shortText\n    thumbnail {\n      url\n    }\n    link\n    linkText\n    text {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    authorsCollection(limit: 10) {\n      items {\n        __typename\n        ... on ExternalAuthors {\n          sys {\n            id\n          }\n          name\n          orcid\n        }\n        ... on Users {\n          sys {\n            id\n          }\n          firstName\n          nickname\n          lastName\n          email\n          onboarded\n          orcid\n          alumniSinceDate\n          avatar {\n            url\n          }\n        }\n      }\n    }\n    teamsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        displayName\n      }\n    }\n    tagsCollection(limit: 20) {\n      items {\n        name\n      }\n    }\n    linkedFrom {\n      tutorialsCollection(limit: 20, order: [addedDate_ASC]) {\n        items {\n          sys {\n            id\n          }\n          title\n          addedDate\n        }\n      }\n    }\n    relatedTutorialsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        title\n        addedDate\n      }\n    }\n    relatedEventsCollection(limit: 10) {\n      items {\n        sys {\n          id\n        }\n        title\n        endDate\n      }\n    }\n  }\n',
): (typeof documents)['\n  fragment TutorialsContent on Tutorials {\n    sys {\n      id\n    }\n    addedDate\n    lastUpdated\n    datePublished\n    asapFunded\n    usedInAPublication\n    sharingStatus\n    title\n    shortText\n    thumbnail {\n      url\n    }\n    link\n    linkText\n    text {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    authorsCollection(limit: 10) {\n      items {\n        __typename\n        ... on ExternalAuthors {\n          sys {\n            id\n          }\n          name\n          orcid\n        }\n        ... on Users {\n          sys {\n            id\n          }\n          firstName\n          nickname\n          lastName\n          email\n          onboarded\n          orcid\n          alumniSinceDate\n          avatar {\n            url\n          }\n        }\n      }\n    }\n    teamsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        displayName\n      }\n    }\n    tagsCollection(limit: 20) {\n      items {\n        name\n      }\n    }\n    linkedFrom {\n      tutorialsCollection(limit: 20, order: [addedDate_ASC]) {\n        items {\n          sys {\n            id\n          }\n          title\n          addedDate\n        }\n      }\n    }\n    relatedTutorialsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        title\n        addedDate\n      }\n    }\n    relatedEventsCollection(limit: 10) {\n      items {\n        sys {\n          id\n        }\n        title\n        endDate\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchTutorialById($id: String!) {\n    tutorials(id: $id) {\n      ...TutorialsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchTutorialById($id: String!) {\n    tutorials(id: $id) {\n      ...TutorialsContent\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchTutorials($limit: Int, $skip: Int, $where: TutorialsFilter) {\n    tutorialsCollection(\n      limit: $limit\n      skip: $skip\n      where: $where\n      order: addedDate_DESC\n    ) {\n      total\n      items {\n        ...TutorialsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchTutorials($limit: Int, $skip: Int, $where: TutorialsFilter) {\n    tutorialsCollection(\n      limit: $limit\n      skip: $skip\n      where: $where\n      order: addedDate_DESC\n    ) {\n      total\n      items {\n        ...TutorialsContent\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment UsersContent on Users {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    activeCampaignId\n    lastUpdated\n    alumniSinceDate\n    alumniLocation\n    biography\n    connections\n    createdDate\n    degree\n    email\n    contactEmail\n    dismissedGettingStarted\n    firstName\n    middleName\n    lastName\n    nickname\n    institution\n    jobTitle\n    country\n    stateOrProvince\n    city\n    onboarded\n    orcid\n    orcidLastModifiedDate\n    orcidLastSyncDate\n    orcidWorks\n    questions\n    expertiseAndResourceDescription\n    github\n    googleScholar\n    linkedIn\n    researcherId\n    researchGate\n    twitter\n    website1\n    website2\n    role\n    openScienceTeamMember\n    responsibilities\n    researchInterests\n    reachOut\n    avatar {\n      url\n    }\n    researchTagsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    teamsCollection(limit: 10) {\n      items {\n        team {\n          sys {\n            id\n          }\n          displayName\n          inactiveSince\n          researchTheme {\n            name\n          }\n          proposal {\n            sys {\n              id\n            }\n          }\n          linkedFrom {\n            interestGroupsCollection(limit: 10) {\n              items {\n                sys {\n                  id\n                }\n                active\n                name\n              }\n            }\n          }\n        }\n        role\n        inactiveSinceDate\n      }\n    }\n    labsCollection(limit: 10) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    linkedFrom {\n      workingGroupMembersCollection(limit: 10) {\n        items {\n          inactiveSinceDate\n          linkedFrom {\n            workingGroupsCollection(limit: 1) {\n              items {\n                sys {\n                  id\n                }\n                title\n                complete\n              }\n            }\n          }\n          user {\n            lastName\n          }\n        }\n      }\n      workingGroupLeadersCollection(limit: 10) {\n        items {\n          role\n          inactiveSinceDate\n          linkedFrom {\n            workingGroupsCollection(limit: 1) {\n              items {\n                sys {\n                  id\n                }\n                title\n                complete\n              }\n            }\n          }\n          user {\n            lastName\n          }\n        }\n      }\n      interestGroupLeadersCollection(limit: 10) {\n        items {\n          role\n          linkedFrom {\n            interestGroupsCollection(limit: 1) {\n              items {\n                sys {\n                  id\n                }\n                active\n                name\n              }\n            }\n          }\n        }\n      }\n      researchOutputsCollection @include(if: $publicUser) {\n        items {\n          sys {\n            id\n          }\n          authorsCollection(limit: 20) {\n            items {\n              __typename\n              ... on Users {\n                sys {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  fragment UsersContent on Users {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n      publishedVersion\n    }\n    activeCampaignId\n    lastUpdated\n    alumniSinceDate\n    alumniLocation\n    biography\n    connections\n    createdDate\n    degree\n    email\n    contactEmail\n    dismissedGettingStarted\n    firstName\n    middleName\n    lastName\n    nickname\n    institution\n    jobTitle\n    country\n    stateOrProvince\n    city\n    onboarded\n    orcid\n    orcidLastModifiedDate\n    orcidLastSyncDate\n    orcidWorks\n    questions\n    expertiseAndResourceDescription\n    github\n    googleScholar\n    linkedIn\n    researcherId\n    researchGate\n    twitter\n    website1\n    website2\n    role\n    openScienceTeamMember\n    responsibilities\n    researchInterests\n    reachOut\n    avatar {\n      url\n    }\n    researchTagsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    teamsCollection(limit: 10) {\n      items {\n        team {\n          sys {\n            id\n          }\n          displayName\n          inactiveSince\n          researchTheme {\n            name\n          }\n          proposal {\n            sys {\n              id\n            }\n          }\n          linkedFrom {\n            interestGroupsCollection(limit: 10) {\n              items {\n                sys {\n                  id\n                }\n                active\n                name\n              }\n            }\n          }\n        }\n        role\n        inactiveSinceDate\n      }\n    }\n    labsCollection(limit: 10) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    linkedFrom {\n      workingGroupMembersCollection(limit: 10) {\n        items {\n          inactiveSinceDate\n          linkedFrom {\n            workingGroupsCollection(limit: 1) {\n              items {\n                sys {\n                  id\n                }\n                title\n                complete\n              }\n            }\n          }\n          user {\n            lastName\n          }\n        }\n      }\n      workingGroupLeadersCollection(limit: 10) {\n        items {\n          role\n          inactiveSinceDate\n          linkedFrom {\n            workingGroupsCollection(limit: 1) {\n              items {\n                sys {\n                  id\n                }\n                title\n                complete\n              }\n            }\n          }\n          user {\n            lastName\n          }\n        }\n      }\n      interestGroupLeadersCollection(limit: 10) {\n        items {\n          role\n          linkedFrom {\n            interestGroupsCollection(limit: 1) {\n              items {\n                sys {\n                  id\n                }\n                active\n                name\n              }\n            }\n          }\n        }\n      }\n      researchOutputsCollection @include(if: $publicUser) {\n        items {\n          sys {\n            id\n          }\n          authorsCollection(limit: 20) {\n            items {\n              __typename\n              ... on Users {\n                sys {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchPublicUsers(\n    $limit: Int\n    $skip: Int\n    $order: [UsersOrder]\n    $where: UsersFilter\n  ) {\n    usersCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        sys {\n          id\n          publishedAt\n          firstPublishedAt\n        }\n        avatar {\n          url\n        }\n        alumniSinceDate\n        biography\n        city\n        country\n        createdDate\n        lastUpdated\n        degree\n        firstName\n        lastName\n        institution\n        website1\n        website2\n        linkedIn\n        orcid\n        researcherId\n        twitter\n        github\n        googleScholar\n        researchGate\n        researchTagsCollection(limit: 20) {\n          items {\n            name\n          }\n        }\n        teamsCollection(limit: 10) {\n          items {\n            team {\n              displayName\n              researchTheme {\n                name\n              }\n              linkedFrom {\n                interestGroupsCollection(limit: 10) {\n                  items {\n                    sys {\n                      id\n                    }\n                    active\n                    name\n                  }\n                }\n              }\n            }\n            role\n            inactiveSinceDate\n          }\n        }\n        labsCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            name\n          }\n        }\n        linkedFrom {\n          workingGroupMembersCollection(limit: 10) {\n            items {\n              inactiveSinceDate\n              linkedFrom {\n                workingGroupsCollection(limit: 1) {\n                  items {\n                    title\n                    complete\n                  }\n                }\n              }\n            }\n          }\n          workingGroupLeadersCollection(limit: 10) {\n            items {\n              role\n              inactiveSinceDate\n              linkedFrom {\n                workingGroupsCollection(limit: 1) {\n                  items {\n                    title\n                    complete\n                  }\n                }\n              }\n            }\n          }\n          interestGroupLeadersCollection(limit: 10) {\n            items {\n              role\n              linkedFrom {\n                interestGroupsCollection(limit: 1) {\n                  items {\n                    sys {\n                      id\n                    }\n                    active\n                    name\n                  }\n                }\n              }\n            }\n          }\n          researchOutputsCollection(limit: 20) {\n            items {\n              sys {\n                id\n              }\n              authorsCollection(limit: 20) {\n                items {\n                  __typename\n                  ... on Users {\n                    sys {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query FetchPublicUsers(\n    $limit: Int\n    $skip: Int\n    $order: [UsersOrder]\n    $where: UsersFilter\n  ) {\n    usersCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        sys {\n          id\n          publishedAt\n          firstPublishedAt\n        }\n        avatar {\n          url\n        }\n        alumniSinceDate\n        biography\n        city\n        country\n        createdDate\n        lastUpdated\n        degree\n        firstName\n        lastName\n        institution\n        website1\n        website2\n        linkedIn\n        orcid\n        researcherId\n        twitter\n        github\n        googleScholar\n        researchGate\n        researchTagsCollection(limit: 20) {\n          items {\n            name\n          }\n        }\n        teamsCollection(limit: 10) {\n          items {\n            team {\n              displayName\n              researchTheme {\n                name\n              }\n              linkedFrom {\n                interestGroupsCollection(limit: 10) {\n                  items {\n                    sys {\n                      id\n                    }\n                    active\n                    name\n                  }\n                }\n              }\n            }\n            role\n            inactiveSinceDate\n          }\n        }\n        labsCollection(limit: 10) {\n          items {\n            sys {\n              id\n            }\n            name\n          }\n        }\n        linkedFrom {\n          workingGroupMembersCollection(limit: 10) {\n            items {\n              inactiveSinceDate\n              linkedFrom {\n                workingGroupsCollection(limit: 1) {\n                  items {\n                    title\n                    complete\n                  }\n                }\n              }\n            }\n          }\n          workingGroupLeadersCollection(limit: 10) {\n            items {\n              role\n              inactiveSinceDate\n              linkedFrom {\n                workingGroupsCollection(limit: 1) {\n                  items {\n                    title\n                    complete\n                  }\n                }\n              }\n            }\n          }\n          interestGroupLeadersCollection(limit: 10) {\n            items {\n              role\n              linkedFrom {\n                interestGroupsCollection(limit: 1) {\n                  items {\n                    sys {\n                      id\n                    }\n                    active\n                    name\n                  }\n                }\n              }\n            }\n          }\n          researchOutputsCollection(limit: 20) {\n            items {\n              sys {\n                id\n              }\n              authorsCollection(limit: 20) {\n                items {\n                  __typename\n                  ... on Users {\n                    sys {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchUserById($id: String!, $publicUser: Boolean = false) {\n    users(id: $id) {\n      ...UsersContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchUserById($id: String!, $publicUser: Boolean = false) {\n    users(id: $id) {\n      ...UsersContent\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment UserListItemContent on Users {\n    alumniSinceDate\n    avatar {\n      url\n    }\n    city\n    stateOrProvince\n    country\n    createdDate\n    degree\n    email\n    firstName\n    sys {\n      id\n    }\n    institution\n    jobTitle\n    labsCollection(limit: 10) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    lastName\n    middleName\n    nickname\n    onboarded\n    dismissedGettingStarted\n    role\n    openScienceTeamMember\n    researchTagsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    teamsCollection(limit: 10) {\n      items {\n        team {\n          sys {\n            id\n          }\n          displayName\n        }\n        role\n      }\n    }\n  }\n',
): (typeof documents)['\n  fragment UserListItemContent on Users {\n    alumniSinceDate\n    avatar {\n      url\n    }\n    city\n    stateOrProvince\n    country\n    createdDate\n    degree\n    email\n    firstName\n    sys {\n      id\n    }\n    institution\n    jobTitle\n    labsCollection(limit: 10) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    lastName\n    middleName\n    nickname\n    onboarded\n    dismissedGettingStarted\n    role\n    openScienceTeamMember\n    researchTagsCollection(limit: 20) {\n      items {\n        sys {\n          id\n        }\n        name\n      }\n    }\n    teamsCollection(limit: 10) {\n      items {\n        team {\n          sys {\n            id\n          }\n          displayName\n        }\n        role\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchUsers(\n    $limit: Int\n    $skip: Int\n    $order: [UsersOrder]\n    $where: UsersFilter\n  ) {\n    usersCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...UserListItemContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchUsers(\n    $limit: Int\n    $skip: Int\n    $order: [UsersOrder]\n    $where: UsersFilter\n  ) {\n    usersCollection(limit: $limit, skip: $skip, order: $order, where: $where) {\n      total\n      items {\n        ...UserListItemContent\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchUsersByTeamId($id: String!, $limit: Int, $skip: Int) {\n    teamMembershipCollection(\n      limit: $limit\n      skip: $skip\n      where: { team: { sys: { id: $id } } }\n    ) {\n      total\n      items {\n        linkedFrom {\n          usersCollection(limit: 1) {\n            items {\n              ...UserListItemContent\n            }\n          }\n        }\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchUsersByTeamId($id: String!, $limit: Int, $skip: Int) {\n    teamMembershipCollection(\n      limit: $limit\n      skip: $skip\n      where: { team: { sys: { id: $id } } }\n    ) {\n      total\n      items {\n        linkedFrom {\n          usersCollection(limit: 1) {\n            items {\n              ...UserListItemContent\n            }\n          }\n        }\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchUsersByLabId($id: String!, $limit: Int, $skip: Int) {\n    labs(id: $id) {\n      linkedFrom {\n        labMembershipCollection(limit: $limit, skip: $skip) {\n          total\n          items {\n            linkedFrom {\n              usersCollection(limit: 1) {\n                items {\n                  ...UserListItemContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchUsersByLabId($id: String!, $limit: Int, $skip: Int) {\n    labs(id: $id) {\n      linkedFrom {\n        labMembershipCollection(limit: $limit, skip: $skip) {\n          total\n          items {\n            linkedFrom {\n              usersCollection(limit: 1) {\n                items {\n                  ...UserListItemContent\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  fragment WorkingGroupsContent on WorkingGroups {\n    sys {\n      id\n      publishedAt\n    }\n    title\n    description {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    externalLink\n    shortText\n    complete\n    deliverablesCollection {\n      items {\n        description\n        status\n      }\n    }\n    tagsCollection(limit: 20) {\n      items {\n        name\n      }\n    }\n    membersCollection {\n      items {\n        __typename\n        ... on WorkingGroupLeaders {\n          workstreamRole\n          role\n          inactiveSinceDate\n          user {\n            sys {\n              id\n            }\n            avatar {\n              url\n            }\n            email\n            firstName\n            nickname\n            lastName\n            alumniSinceDate\n            teamsCollection(limit: 5) @include(if: $singleWorkingGroup) {\n              items {\n                role\n                team {\n                  sys {\n                    id\n                  }\n                  displayName\n                }\n              }\n            }\n          }\n        }\n        __typename\n        ... on WorkingGroupMembers {\n          inactiveSinceDate\n          user {\n            sys {\n              id\n            }\n            avatar {\n              url\n            }\n            email\n            firstName\n            nickname\n            lastName\n            alumniSinceDate\n            teamsCollection(limit: 5) @include(if: $singleWorkingGroup) {\n              items {\n                role\n                team {\n                  sys {\n                    id\n                  }\n                  displayName\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    calendars {\n      sys {\n        id\n      }\n      name\n      color\n      googleCalendarId\n    }\n    lastUpdated\n  }\n',
): (typeof documents)['\n  fragment WorkingGroupsContent on WorkingGroups {\n    sys {\n      id\n      publishedAt\n    }\n    title\n    description {\n      json\n      links {\n        entries {\n          inline {\n            sys {\n              id\n            }\n            __typename\n            ... on Media {\n              url\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            url\n            description\n            contentType\n            width\n            height\n          }\n        }\n      }\n    }\n    externalLink\n    shortText\n    complete\n    deliverablesCollection {\n      items {\n        description\n        status\n      }\n    }\n    tagsCollection(limit: 20) {\n      items {\n        name\n      }\n    }\n    membersCollection {\n      items {\n        __typename\n        ... on WorkingGroupLeaders {\n          workstreamRole\n          role\n          inactiveSinceDate\n          user {\n            sys {\n              id\n            }\n            avatar {\n              url\n            }\n            email\n            firstName\n            nickname\n            lastName\n            alumniSinceDate\n            teamsCollection(limit: 5) @include(if: $singleWorkingGroup) {\n              items {\n                role\n                team {\n                  sys {\n                    id\n                  }\n                  displayName\n                }\n              }\n            }\n          }\n        }\n        __typename\n        ... on WorkingGroupMembers {\n          inactiveSinceDate\n          user {\n            sys {\n              id\n            }\n            avatar {\n              url\n            }\n            email\n            firstName\n            nickname\n            lastName\n            alumniSinceDate\n            teamsCollection(limit: 5) @include(if: $singleWorkingGroup) {\n              items {\n                role\n                team {\n                  sys {\n                    id\n                  }\n                  displayName\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    calendars {\n      sys {\n        id\n      }\n      name\n      color\n      googleCalendarId\n    }\n    lastUpdated\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchWorkingGroupById(\n    $id: String!\n    $singleWorkingGroup: Boolean = true\n  ) {\n    workingGroups(id: $id) {\n      ...WorkingGroupsContent\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchWorkingGroupById(\n    $id: String!\n    $singleWorkingGroup: Boolean = true\n  ) {\n    workingGroups(id: $id) {\n      ...WorkingGroupsContent\n    }\n  }\n  \n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n  query FetchWorkingGroups(\n    $limit: Int\n    $skip: Int\n    $order: [WorkingGroupsOrder]\n    $where: WorkingGroupsFilter\n    $singleWorkingGroup: Boolean = false\n  ) {\n    workingGroupsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...WorkingGroupsContent\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  query FetchWorkingGroups(\n    $limit: Int\n    $skip: Int\n    $order: [WorkingGroupsOrder]\n    $where: WorkingGroupsFilter\n    $singleWorkingGroup: Boolean = false\n  ) {\n    workingGroupsCollection(\n      limit: $limit\n      skip: $skip\n      order: $order\n      where: $where\n    ) {\n      total\n      items {\n        ...WorkingGroupsContent\n      }\n    }\n  }\n  \n'];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
