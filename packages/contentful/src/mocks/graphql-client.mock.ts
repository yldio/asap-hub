import { GraphQLClient } from 'graphql-request';
import { GraphQLFileLoader } from '@graphql-tools/graphql-file-loader';
import { loadSchemaSync } from '@graphql-tools/load';
import { addMocksToSchema, createMockStore, IMocks } from '@graphql-tools/mock';
import { ASTNode, graphql, print } from 'graphql';

export const getContentfulGraphqlClientMockServer = (
  inputMocks: IMocks,
): GraphQLClient => {
  const schema = loadSchemaSync('../crn/schema/autogenerated-schema.graphql', {
    cwd: __dirname,
    loaders: [new GraphQLFileLoader()],
  });
  const resultDto = () => ({
    items: [...new Array(1)],
    total: 1,
  });
  const mocks = {
    JSON: () => '2021-10-12T15:42:05Z',
    PagesCollection: resultDto,
    NewsCollection: resultDto,
    ...inputMocks,
  };
  const store = createMockStore({
    schema,
    mocks,
  });
  const schemaWithMocks = addMocksToSchema({
    schema,
    store,
  });

  return {
    request: async (query, variables?) => {
      const result = await graphql(
        schemaWithMocks,
        print(query as ASTNode),
        undefined,
        undefined,
        variables as { [key: string]: unknown },
      );

      if (Array.isArray(result.errors) && result.errors.length > 0) {
        throw new Error(JSON.stringify(result.errors));
      }

      return result.data;
    },
  } as GraphQLClient;
};
