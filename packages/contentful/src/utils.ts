import { Document, Node } from '@contentful/rich-text-types';
import { documentToHtmlString } from '@contentful/rich-text-html-renderer';
import { Asset } from './crn/autogenerated-gql/graphql';

export type RichTextFromQuery = {
  json: Document;
  links: {
    assets: {
      block: Array<
        Pick<
          Asset,
          | 'url'
          | 'description'
          | 'contentType'
          | 'width'
          | 'height'
          | 'description'
        > & { sys: { id: string } }
      >;
    };
  };
};

type AssetById = {
  [assetId: string]: Pick<
    Asset,
    'url' | 'description' | 'contentType' | 'width' | 'height' | 'description'
  >;
};

export const parseRichText = (rtf: RichTextFromQuery) => {
  const assetById: AssetById | undefined = rtf.links.assets.block?.reduce(
    (assetInfoById: AssetById, asset) => ({
      ...assetInfoById,
      [asset.sys.id]: {
        ...asset,
      },
    }),
    {},
  );

  const options = {
    renderNode: {
      'embedded-asset-block': (node: Node) => {
        const assetId = node.data.target.sys.id as string;

        if (assetById && assetId && assetById[assetId]) {
          const { url, description, contentType, width, height } =
            assetById[assetId];
          const dimensions =
            width && height ? ` width="${width}" height="${height}"` : '';

          switch (contentType) {
            case 'application/pdf':
              return `<iframe src="${url}"${dimensions}>`;

            case 'video/mp4':
              return `<iframe src="${url}"${dimensions} allowFullScreen>`;

            default:
              return `<img src="${url}"${dimensions} alt=${
                description || ''
              }/>`;
          }
        }
        throw new Error(
          `Asset with id ${assetId} does not exist in contentful`,
        );
      },
    },
  };
  return documentToHtmlString(rtf?.json, options);
};
