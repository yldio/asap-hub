import retry from 'async-retry';
import type {
  Entry as CDAEntry,
  EntrySkeletonType,
  FieldsType,
} from 'contentful';
import type { Sys } from '../crn/autogenerated-gql/graphql';

type Entity =
  | 'events'
  | 'users'
  | 'workingGroups'
  | 'projects'
  | 'outputs'
  | 'researchOutputs'
  | 'discussions'
  | 'manuscripts';
type OptionalExceptFor<T, TRequired extends keyof T> = Partial<T> &
  Pick<T, TRequired>;

type DataContent = {
  sys: OptionalExceptFor<Sys, 'publishedVersion'>;
};

type Data = {
  [K in Entity]?: DataContent | null;
};
const pollContentful = async <T extends EntrySkeletonType<FieldsType, string>>(
  fetchEntry:
    | (() => Promise<CDAEntry<T> | undefined>)
    | (() => Promise<Data | undefined>),
  revision: number,
  entity?: Entity,
) =>
  retry(
    // eslint-disable-next-line consistent-return
    async (bail) => {
      const entry = await fetchEntry();

      if (!entry) {
        return bail(new Error('Not found'));
      }

      if ('sys' in entry) {
        if ((entry.sys.revision || 0) < revision) {
          throw new Error(
            `Entry with id ${entry.sys.id} not synced. Sys revision: ${
              entry.sys.revision || 0
            }. Revision: ${revision}.`,
          );
        }
        return entry;
      }

      if (entity) {
        const data = entry[entity];
        if (!data) {
          throw new Error('Not found');
        }

        if ((data.sys.publishedVersion || 0) < revision) {
          throw new Error(
            `Entry with id ${data.sys.id} not synced. Published version: ${
              data.sys.publishedVersion || 0
            }. Revision: ${revision}.`,
          );
        }
      }
    },
    {
      minTimeout: 200,
      maxRetryTime: 60_000,
      factor: 2,
      randomize: false,
    },
  );

export const pollContentfulDeliveryApi = async <
  T extends EntrySkeletonType<FieldsType, string>,
>(
  fetchEntry: () => Promise<CDAEntry<T> | undefined>,
  revision: number,
) => pollContentful(fetchEntry, revision) as Promise<CDAEntry<T>>;

export const pollContentfulGql = async <FetchType extends Data>(
  version: number,
  fetchData: () => Promise<FetchType | undefined>,
  entity: Entity,
) => pollContentful(fetchData, version, entity) as Promise<void>;
